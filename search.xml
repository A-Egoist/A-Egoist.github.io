<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并行处理及分布式系统</title>
      <link href="/posts/debbe7f/"/>
      <url>/posts/debbe7f/</url>
      
        <content type="html"><![CDATA[<h1 id="并行处理及分布式系统"><a href="#并行处理及分布式系统" class="headerlink" title="并行处理及分布式系统"></a>并行处理及分布式系统</h1><h2 id="1-为什么要并行计算"><a href="#1-为什么要并行计算" class="headerlink" title="1 为什么要并行计算"></a>1 为什么要并行计算</h2><h3 id="1-1-为什么需要不断提升性能"><a href="#1-1-为什么需要不断提升性能" class="headerlink" title="1.1 为什么需要不断提升性能"></a>1.1 为什么需要不断提升性能</h3><ul><li>随着计算能力的增加，我们所面临的计算问题和需求也在增加</li><li>随着技术的进步，我们从未想过的技术得到了解决，比如：人类基因解码、更准确的医疗成像、更快速准确的网络搜索……</li><li>更复杂的问题仍有待解决，比如：气候模拟、蛋白质折叠、药物发现、能源研究、数据分析……</li></ul><h3 id="1-2-为什么要构建并行系统"><a href="#1-2-为什么要构建并行系统" class="headerlink" title="1.2 为什么要构建并行系统"></a>1.2 为什么要构建并行系统</h3><p>单处理器性能大幅度提升的主要方法是增加集成电路晶体管密度。但是随着晶体管尺寸的减小，晶体管的传递速度增快，它们的能耗也在增加，大多数的能量是以热能的形式消耗，当一块集成电路变得太热的时候，就会变得不可靠。在 21 世纪的第一个 10 年中，使用空气冷却集成电路的散热能力已达到极限。也就是说，只通过增加集成电路的速度来提升处理器的性能的方法不可取。在这种条件下，集成电路制造商提出<span style='background:yellow'>多核处理器</span>的思路。</p><h3 id="1-3-为什么要编写并行程序"><a href="#1-3-为什么要编写并行程序" class="headerlink" title="1.3 为什么要编写并行程序"></a>1.3 为什么要编写并行程序</h3><p>大多数为传统单核系统编写的程序无法利用多核处理器，为了使程序能够更快地运行，有更加逼真的图像，就需要将串行程序改写为并行程序。</p><h3 id="1-4-如何编写并行程序"><a href="#1-4-如何编写并行程序" class="headerlink" title="1.4 如何编写并行程序"></a>1.4 如何编写并行程序</h3><p>想要解决某个问题，需要编写其对应的并行程序，首先需要对任务进行划分，确定其属于<span style='background:yellow'>任务并行</span>还是<span style='background:yellow'>数据并行</span>。</p><ul><li>任务并行：当许多任务或函数可以独立地、大规模地并行执行时，这就是任务并行。任务并行的重点在于利用多核系统对任务进行分配，将待解决的问题所需要的执行的各个任务分配到各个核上执行。</li><li>数据并行：当可以同时处理许多数据时，这就是数据并行。数据并行的重点在于利用多核系统对数据进行分配，每个核在分配到的数据集上执行大致相似的数据操作</li></ul><h3 id="1-5-接下来做什么"><a href="#1-5-接下来做什么" class="headerlink" title="1.5 接下来做什么"></a>1.5 接下来做什么</h3><p>首先我会参考《并行程序设计导论》所讲的 C 语言的三种拓展：<span style='background:yellow'>消息传递接口(Message-Passing Interface，MPI)</span>、<span style='background:yellow'>POSIX 线程(POSIX threads，Pthreads)</span> 和 <span style='background:yellow'>OpenMP</span> 来编写基本的并行程序。这三种方式编写的并行程序都是利用多核 CPU 实现的，然后我会介绍利用 NVIDIA 的 GPU 进行并行程序编写的方式以及其相关基础，也就是 <span style='background:yellow'>CUDA C</span> 编程的基础。</p><p>选择并行程序实现框架的时候应该根据计算机的架构来选择，即根据硬件选择软件。Pthreads 和 OpenMP 是为 <span style='background:yellow'>共享内存系统</span> 的编程而设计的，它们提过访问共享内存的机制；而 MPI 是为 <span style='background:yellow'>分布式内存系统</span> 的编程而设计的，它提供发送消息的机制。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211224164854593.png" alt=""></p><p>图中(a)表示共享内存系统，(b)表示分布式内存系统。</p><h3 id="1-6-并发、并行、分布式"><a href="#1-6-并发、并行、分布式" class="headerlink" title="1.6 并发、并行、分布式"></a>1.6 并发、并行、分布式</h3><ul><li>并发计算：一个程序的多个任务再同一个时段内可以同时执行</li><li>并行计算：一个程序通过多个任务紧密协作来解决某个问题</li><li>分布式计算：一个程序需要与其他程序写作来解决某个问题</li></ul><h2 id="2-并行硬件和并行软件"><a href="#2-并行硬件和并行软件" class="headerlink" title="2 并行硬件和并行软件"></a>2 并行硬件和并行软件</h2><h3 id="2-1-背景知识"><a href="#2-1-背景知识" class="headerlink" title="2.1 背景知识"></a>2.1 背景知识</h3><p>并行计算涉及到两个不同的技术领域：</p><ul><li>计算机架构(硬件)</li><li>并行程序设计(软件)</li></ul><p>硬件主要的目标就是为软件提供更快的计算速度，更低的性能功耗比，硬件结构上支持更快的并行。<br>软件的主要目的是使用当前的硬件压榨出最高的性能，给应用提供更稳定快速的计算结果。</p><h4 id="2-1-1-冯-·-洛依曼结构"><a href="#2-1-1-冯-·-洛依曼结构" class="headerlink" title="2.1.1 冯 · 洛依曼结构"></a>2.1.1 冯 · 洛依曼结构</h4><p>经典的冯 · 洛依曼结构包括存储器、运算器、控制器、输入设备、输出设备，其中运算器和控制器都在 CPU 之中，CPU 和主存通过总线连接。当数据或指令从主存传送到 CPU 时，称为数据或指令从内存中取出或者读出；当数据或指令从 CPU 传送到主存时，称为数据或指令写入或者存入内存中。这样主存和 CPU 之间的分离称为 <span style='background:yellow'>冯 · 洛依曼瓶颈</span>。</p><h4 id="2-1-2-进程、多任务及线程"><a href="#2-1-2-进程、多任务及线程" class="headerlink" title="2.1.2 进程、多任务及线程"></a>2.1.2 进程、多任务及线程</h4><ul><li><p>进程：正在运行的程序的一个实例。</p></li><li><p>多任务：通过时间片轮转的方式使人产生多个任务同时执行的错觉。</p></li><li>线程：线程包含在进程中，同一个进程内的线程共享内存和 I/O 设备，利用线程程序员可以将程序划分为多个大致独立的任务。</li></ul><h3 id="2-2-对冯-·-洛依曼模型的改进"><a href="#2-2-对冯-·-洛依曼模型的改进" class="headerlink" title="2.2 对冯 · 洛依曼模型的改进"></a>2.2 对冯 · 洛依曼模型的改进</h3><p>《并行程序设计导论》介绍了三种对冯 · 洛依曼模型的改进措施：缓存、虚拟内存、低层次并行</p><h4 id="2-2-1-缓存-Cache"><a href="#2-2-1-缓存-Cache" class="headerlink" title="2.2.1 缓存(Cache)"></a>2.2.1 缓存(Cache)</h4><p>基于访存局部性而设计的 CPU 缓存(CPU Cache)有着比其他存储器更小的访问开销，CPU Cache 通常和 CPU 位于同一块芯片上，访存开销比普通内存小很多。</p><blockquote><p>局部性原理</p><ul><li>访问一个位置之后，接着访问其附近的位置</li><li>空间局部性：访问临近的位置</li><li>时间局部性：最近访问的位置，在不久的将来还会访问</li></ul></blockquote><p>CPU Cache 一般分为不同的层(level)，第一层(L1)最小但是访问速度最快，更高层的 Cache (L2, L3, …)更大但访问速度较慢。大多数系统采用 3 层 Cache，每层 Cache 中的数据不重合，且都会存放在主存中。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211226105856481.png" style="zoom:80%;" /></p><p>当 CPU 需要访问数据或指令时，它会沿着 <span style='background:yellow'>L1 Cache -&gt; L2 Cache -&gt; L3 Cache -&gt; 主存</span> 这条路径查询，若从 Cache 中查询到数据或指令时，则称为 <span style='background:yellow'>Cache 命中</span> 或 <span style='background:yellow'>命中</span>；若没有从 Cache 中查询到则称为 <span style='background:yellow'>Cache 缺失</span> 或 <span style='background:yellow'>缺失</span>。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211226110626495.png" alt="Cache 命中" style="zoom:80%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211226110720893.png" alt="Cache 缺失" style="zoom:80%;" /></p><p>当 CPU 向 Cache 写数据时，会出现 Cache 中的值与主存中的值不一致的情况，为了解决这个问题，数中介绍了两种方法：</p><ul><li>写直达：当 CPU 向 Cache 写数据时，更新主存中的数据。</li><li>写回：将 Cache 中的数据标记为 <span style='background:yellow'>脏数据</span>，当 Cache line 被主存中的新的 Cache line 替换时，脏的 Cache line 会被写入主存。</li></ul><p>在 Cache 设计中，另一个问题是 Cache line 应该存储在什么位置。当从主存中取出一个 Cache line 时，应该把这个 Cache line 放到 Cache 中的什么位置，不同的系统采用不同的方式，这些方式分别为：</p><ul><li>全相联：一个新的 Cache line 可以放在 Cache 中的任意位置</li><li>直接映射：每一个 Cache line 在 Cache 中都有唯一的位置</li><li>n路组相联：每个 Cache line 可以被放在 n 个不同的位置中的一个</li></ul><p>当主存中的行能被映射到不同到 Cache 中的不同位置时，需要决定替换或者驱逐 Cache 中的某一行。常用的方案是<strong>最近最少使用</strong>。</p><h4 id="2-2-2-虚拟内存"><a href="#2-2-2-虚拟内存" class="headerlink" title="2.2.2 虚拟内存"></a>2.2.2 虚拟内存</h4><p>如果一个大型的程序或者程序需要访问大型数据集，那么所有的指令或者数据可能在主存中放不下。采用 <span style='background:yellow'>虚拟内存</span>，使得主存可以作为辅存的缓存。利用时空局部性的原理，只把正在运行程序的活动部分保存在主存中。</p><h4 id="2-2-3-低层次并行"><a href="#2-2-3-低层次并行" class="headerlink" title="2.2.3 低层次并行"></a>2.2.3 低层次并行</h4><p><strong>指令级并行</strong></p><p>指令级并行通过让多个处理器部件或者功能单元同时执行指令来提高处理器的性能。有两种主要方法来实现指令级并行：</p><ul><li>流水线：将功能单元分阶段安排。</li><li>多发射：让多条指令同时启动。<ul><li>静态多发射：功能单元在<strong>编译时</strong>调度</li><li>动态多发射：功能单元在<strong>运行时</strong>调度</li></ul></li></ul><p><strong>硬件多线程</strong></p><p>硬件多线程为系统提供了一种机制，使得当前执行的任务被阻塞时，系统能够继续其他有用的工作。</p><ul><li>细粒度多线程：处理器在每条指令执行完后切换线程，从而跳过被阻塞的线程。</li><li>粗粒度多线程：只切换那些需要等待较长时间才能完成操作而被阻塞的线程。</li><li>同步多线程：通过允许多个县城同时使用多个功能单元来利用超标量处理器的性能。</li></ul><h3 id="2-3-并行硬件"><a href="#2-3-并行硬件" class="headerlink" title="2.3 并行硬件"></a>2.3 并行硬件</h3><p>利用 <span style='background:yellow'>Flynn 分类法</span> 对计算机体系结构进行划分：</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/4.png" style="zoom: 80%;" /></p><p>分别以数据和指令进行分析：</p><ul><li>单指令单数据 SISD (传统串行计算机，386)</li><li>单指令多数据 SIMD (并行架构，比如向量机，所有核心指令唯一，但是数据不同，现在 CPU 基本都有这类的向量指令)</li><li>多指令单数据 MISD (少见，多个指令围殴一个数据)</li><li>多指令多数据 MIMD (并行架构，多核心，多指令，异步处理多个数据流，从而实现空间上的并行，MIMD 多数情况下包含 SIMD，就是 MIMD 有很多计算核，计算核支持 SIMD)</li></ul><p><span style='background:yellow'>注：GPU 属于 SPMD，但是其可以使用 SIMD 并行</span></p><p>计算机架构也可以 <span style='background:yellow'>根据内存划分</span>：</p><ul><li>共享内存系统<br><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211226170617065.png" alt="共享内存系统" style="zoom:80%;" /></li><li>分布式内存系统<br><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211226170804988.png" alt="分布式内存系统" style="zoom:80%;" /></li></ul><h3 id="2-4-并行软件"><a href="#2-4-并行软件" class="headerlink" title="2.4 并行软件"></a>2.4 并行软件</h3><h3 id="2-5-输入和输出"><a href="#2-5-输入和输出" class="headerlink" title="2.5 输入和输出"></a>2.5 输入和输出</h3><h3 id="2-6-性能"><a href="#2-6-性能" class="headerlink" title="2.6 性能"></a>2.6 性能</h3><p><strong>线性加速比</strong>：$T_{并行}=T_{串行}/p$，其中 $p$ 表示程序运行所运行的系统的核数。</p><p><strong>加速比</strong>：$S=\frac{T_{并行}}{T_{串行}}$</p><h2 id="3-MPI编程"><a href="#3-MPI编程" class="headerlink" title="3 MPI编程"></a>3 MPI编程</h2><h2 id="4-Pthreads编程"><a href="#4-Pthreads编程" class="headerlink" title="4 Pthreads编程"></a>4 Pthreads编程</h2><h2 id="5-OpenMP编程"><a href="#5-OpenMP编程" class="headerlink" title="5 OpenMP编程"></a>5 OpenMP编程</h2><h2 id="6-并行程序开发"><a href="#6-并行程序开发" class="headerlink" title="6 并行程序开发"></a>6 并行程序开发</h2>]]></content>
      
      
      <categories>
          
          <category> Parallel Programing </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读系列】ESRGAN</title>
      <link href="/posts/fb6fe7b/"/>
      <url>/posts/fb6fe7b/</url>
      
        <content type="html"><![CDATA[<h1 id="ESRGAN-Enhanced-Super-Resolution-Generative-Adversarial-Networks"><a href="#ESRGAN-Enhanced-Super-Resolution-Generative-Adversarial-Networks" class="headerlink" title="ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks"></a>ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks</h1><p>论文地址：<a href="https://openaccess.thecvf.com/content_ECCVW_2018/papers/11133/Wang_ESRGAN_Enhanced_Super-Resolution_Generative_Adversarial_Networks_ECCVW_2018_paper.pdf">https://openaccess.thecvf.com/content_ECCVW_2018/papers/11133/Wang_ESRGAN_Enhanced_Super-Resolution_Generative_Adversarial_Networks_ECCVW_2018_paper.pdf</a></p><p>代码：<a href="https://github.com/xinntao/ESRGAN">https://github.com/xinntao/ESRGAN</a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这篇文章在 SRGAN 的基础上对其 network architecture、adversarial loss 和 perceptual loss 做了改进。</p><ol><li>使用 Residual-in-Residual Dense Block(RRDB) 替换掉 SRGAN 中所使用的 Residual Block 并去掉了 BN 层。</li><li>参考 <a href="https://openreview.net/pdf?id=S1erHoR5t7">Relativistic GAN</a> 对 SRGAN 中所使用的 adversarial loss 做了改进</li><li>使用激活层之前的 feature map 来计算 perceptual loss</li></ol><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="1-使用-RRDB-替换-RB-并去掉-BN-层"><a href="#1-使用-RRDB-替换-RB-并去掉-BN-层" class="headerlink" title="1 使用 RRDB 替换 RB 并去掉 BN 层"></a>1 使用 RRDB 替换 RB 并去掉 BN 层</h3><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211209163159040.png" alt="image-20211209163159040" style="zoom:80%;" /></p><h3 id="2-参照-Relativistic-GAN-改进对抗损失-adversarial-loss"><a href="#2-参照-Relativistic-GAN-改进对抗损失-adversarial-loss" class="headerlink" title="2 参照 Relativistic GAN 改进对抗损失(adversarial loss)"></a>2 参照 Relativistic GAN 改进对抗损失(adversarial loss)</h3><h3 id="3-使用激活层之前的-feature-map-计算-perceptual-loss"><a href="#3-使用激活层之前的-feature-map-计算-perceptual-loss" class="headerlink" title="3 使用激活层之前的 feature map 计算 perceptual loss"></a>3 使用激活层之前的 feature map 计算 perceptual loss</h3><h3 id="4-使用-Network-Interpolation-的方法平衡主客观评价指标的矛盾"><a href="#4-使用-Network-Interpolation-的方法平衡主客观评价指标的矛盾" class="headerlink" title="4 使用 Network Interpolation 的方法平衡主客观评价指标的矛盾"></a>4 使用 Network Interpolation 的方法平衡主客观评价指标的矛盾</h3>]]></content>
      
      
      <categories>
          
          <category> reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读系列】目录</title>
      <link href="/posts/3d436878/"/>
      <url>/posts/3d436878/</url>
      
        <content type="html"><![CDATA[<h1 id="【论文精读系列】目录"><a href="#【论文精读系列】目录" class="headerlink" title="【论文精读系列】目录"></a>【论文精读系列】目录</h1><p>本文为 <font color="red">论文精读系列</font> 的目录，点击链接跳转到对应的文章。</p><p>PS: 本文排版参照 <a href="https://github.com/mli/paper-reading">https://github.com/mli/paper-reading</a></p><h2 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h2><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><div class="table-container"><table><thead><tr><th>Read</th><th>Published</th><th>Year</th><th>Title</th><th>Introduction</th><th>Blog</th></tr></thead><tbody><tr><td>✅</td><td></td><td>2015</td><td>ResNet</td><td></td><td></td></tr><tr><td>✅</td><td></td><td></td><td>SRCNN</td><td>首次将 CNN 用于 SR 领域</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h3 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h3><div class="table-container"><table><thead><tr><th>Read</th><th>Published</th><th>Year</th><th>Title</th><th>Introduction</th><th>Blog</th></tr></thead><tbody><tr><td>✅</td><td></td><td>2014</td><td><a href="https://arxiv.org/abs/1406.2661">GAN</a></td><td></td><td></td></tr><tr><td>✅</td><td></td><td></td><td><a href="https://openaccess.thecvf.com/content_cvpr_2017/papers/Ledig_Photo-Realistic_Single_Image_CVPR_2017_paper.pdf">SRGAN</a></td><td>首次将 GAN 用于 SR 领域</td><td></td></tr><tr><td>✅</td><td>✅</td><td>2018</td><td><a href="https://openaccess.thecvf.com/content_ECCVW_2018/papers/11133/Wang_ESRGAN_Enhanced_Super-Resolution_Generative_Adversarial_Networks_ECCVW_2018_paper.pdf">ESRGAN</a></td><td>PIRM218-SR 比赛冠军</td><td><a href="https://a-egoist.com/posts/fb6fe7b/">https://a-egoist.com/posts/fb6fe7b/</a></td></tr><tr><td>✅</td><td></td><td></td><td><a href="https://arxiv.org/abs/2107.10833v2">Real-ESRGAN</a></td><td></td></tr></tbody></table></div><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><div class="table-container"><table><thead><tr><th>Read</th><th>Published</th><th>Year</th><th>Title</th><th>Introduction</th><th>Blog</th></tr></thead><tbody><tr><td>✅</td><td></td><td></td><td><a href="https://arxiv.org/abs/2010.11929">ViT</a></td><td>Transformer杀入CV界</td><td></td></tr><tr><td></td><td></td><td></td><td><a href="https://arxiv.org/abs/2103.14030">Swin Transformer</a></td><td>多层次的Vision Transformer</td><td></td></tr><tr><td></td><td></td><td></td><td><a href="https://arxiv.org/abs/2111.06377">MAE</a></td><td>BERT的CV版</td></tr></tbody></table></div><h3 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h3><div class="table-container"><table><thead><tr><th>Read</th><th>Published</th><th>Year</th><th>Title</th><th>Introduction</th><th>Blog</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="Natural-Language-Processing"><a href="#Natural-Language-Processing" class="headerlink" title="Natural Language Processing"></a>Natural Language Processing</h2><h3 id="Transformer-1"><a href="#Transformer-1" class="headerlink" title="Transformer"></a>Transformer</h3><div class="table-container"><table><thead><tr><th>Read</th><th>Published</th><th>Year</th><th>Title</th><th>Introduction</th><th>Blog</th></tr></thead><tbody><tr><td>✅</td><td></td><td></td><td><a href="https://arxiv.org/abs/1706.03762">Transformer</a></td><td>继MLP、CNN、RNN后的第四大类架构</td><td></td></tr><tr><td></td><td></td><td></td><td><a href="https://arxiv.org/abs/1810.04805">BERT</a></td><td>Transformer一统NLP的开始</td><td></td></tr><tr><td></td><td></td><td></td><td><a href="https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf">GPT</a></td><td></td></tr></tbody></table></div><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><div class="table-container"><table><thead><tr><th>Read</th><th>Published</th><th>Year</th><th>Title</th><th>Introduction</th><th>Blog</th></tr></thead><tbody><tr><td></td><td></td><td></td><td><a href="https://arxiv.org/abs/1412.6980">Adam</a></td><td>深度学习里最常用的优化算法之一</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MachineLearning </tag>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注意力机制</title>
      <link href="/posts/a44b8419/"/>
      <url>/posts/a44b8419/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Attention"><a href="#1-Attention" class="headerlink" title="1 Attention"></a>1 Attention</h2><h3 id="1-1-什么是-Attention"><a href="#1-1-什么是-Attention" class="headerlink" title="1.1 什么是 Attention"></a>1.1 什么是 Attention</h3><p>灵长类动物的视觉系统中的视神经接受了大量的感官输入。在检查视觉场景时，我们的视觉神经系统大约每秒收到 $10^8$ 位的信息，这远远超过了大脑能够完全处理的水平。但是，并非所有刺激的影响都是相等的。意识的聚集和专注使灵长类动物能够在复杂的视觉环境中将注意力引向感兴趣的物体，例如猎物和天敌。</p><p>在心理学框架中，人类根据<strong>随意(有意识)线索</strong>和<strong>不随意(无意识)线索</strong>选择注意点。下面两张图展现了在<strong>随意线索</strong>和<strong>不随意线索</strong>的影响改下，眼的注意力集中的位置。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211122155257114.png" alt="基于不随意线索，注意力集中在红色杯子上" style="zoom: 60%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211122155325467.png" alt="基于随意线索，注意力集中在报纸上" style="zoom:60%;" /></p><p>卷积、全连接层、池化层基本上都只考虑<strong>不随意线索</strong>，注意力机制则显示的考虑<strong>随意线索</strong>。</p><p>在注意力机制中，定义以下三点：</p><ul><li>随意线索被称为查询(query)</li><li>每个输入是一个不随意线索(key)和值(value)的 pair</li><li>通过注意力池化层来有偏向性的选择某些输入<ul><li>一般写作 $f(x)=\sum_i\alpha(x,x_i)y_i$，其中 $\alpha(x,x_i)$ 表示注意力权重</li></ul></li></ul><h3 id="1-2-非参注意力池化层"><a href="#1-2-非参注意力池化层" class="headerlink" title="1.2 非参注意力池化层"></a>1.2 非参注意力池化层</h3><p>早在 60 年代就出现了非参数的注意力机制。假设给定数据 $(x_i,y_i),i=1,\dots,n$，其中 $x_i$ 表示 key，$y_i$ 表示 value，要想根据 query 将数据进行池化</p><p>最简单的方案——平均池化：</p><script type="math/tex; mode=display">f(x)=\frac{1}{n}\sum_iy_i\tag{1}</script><p>无论输入的 $x$ 是什么，每次都返回所有 value 的均值。</p><p><strong>Nadaraya-Waston 核回归</strong>：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{n} \frac{K\left(x-x_{i}\right)}{\sum_{j=1}^{n} K\left(x-x_{j}\right)} y_{i}\tag{2}</script><p>其中，$f(\cdot)$ 中的 $x$ 表示 query，$K(\cdot)$ 表示核函数，用于衡量 query $x$ 和 key $x_i$ 之间的距离。这一个方法可以类比于 K-Nearest Neighbor，对于一个 query 函数的输出跟倾向于与其最相关的 value，而这个相关性则通过 query 和 key 共同计算出来。</p><p>若公式 $(2)$ 中的 $K(\cdot)$ 使用的是高斯核：$K(\mu)=\frac{1}{\sqrt{2\pi}}\exp(-\frac{\mu^2}{2})$，那么可得：</p><script type="math/tex; mode=display">\begin{aligned}f(x) &=\sum_{i=1}^{n} \frac{\exp \left(-\frac{1}{2}\left(x-x_{i}\right)^{2}\right)}{\sum_{j=1}^{n} \exp \left(-\frac{1}{2}\left(x-x_{j}\right)^{2}\right)} y_{i} \\&=\sum_{i=1}^{n} \operatorname{softmax}\left(-\frac{1}{2}\left(x-x_{i}\right)^{2}\right) y_{i}\end{aligned}\tag{3}</script><h3 id="1-3-参数化的注意力机制"><a href="#1-3-参数化的注意力机制" class="headerlink" title="1.3 参数化的注意力机制"></a>1.3 参数化的注意力机制</h3><p>在公式 $(3)$ 的基础上引入可以学习的参数 $w$：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{n} \operatorname{softmax}\left(-\frac{1}{2}\left(\left(x-x_{i}\right) w\right)^{2}\right) y_{i}\tag{4}</script><h3 id="1-4-注意力分数"><a href="#1-4-注意力分数" class="headerlink" title="1.4 注意力分数"></a>1.4 注意力分数</h3><p>由公式 $(3)$ 可得：</p><script type="math/tex; mode=display">f(x)=\sum_{i} \alpha\left(x, x_{i}\right) y_{i}=\sum_{i=1}^{n} \operatorname{softmax}\left(-\frac{1}{2}\left(x-x_{i}\right)^{2}\right) y_{i}\tag{5}</script><p>其中 $\alpha(\cdot)$ 表示注意力权重，根据输入的 query 和 key 来计算当前 value 的权重；$-\frac{1}{2}\left(x-x_{i}\right)^{2}$ 表示的就是注意力分数。</p><p>计算注意力的过程如图所示：</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211123215734223.png" alt="计算注意力汇聚的输出为值的加权和" style="zoom: 80%;" /></p><p>首先根据输入的 query，来计算 query 和 key 之间的 attention score，然后将 score 进行一次 $\operatorname{softmax}$ 得到 attention weight，attention weight 和对应的 value 做乘法再求和得到最后的输出。</p><p><strong>拓展到高纬度</strong></p><p>假设 query $\mathbf{q} \in \mathbb{R}^{q}$，$m$ 对 key-value $(\mathbf{k}_{1}, \mathbf{v}_{1}),\dots,$ 这里 $\mathbf{k}_{i} \in \mathbb{R}^{k}$，$\mathbf{v}_{i} \in \mathbb{R}^{v}$ </p><p>注意力池化层：</p><script type="math/tex; mode=display">\begin{array}{c}f\left(\mathbf{q},\left(\mathbf{k}_{1}, \mathbf{v}_{1}\right), \ldots,\left(\mathbf{k}_{m}, \mathbf{v}_{m}\right)\right)=\sum_{i=1}^{m} \alpha\left(\mathbf{q}, \mathbf{k}_{i}\right) \mathbf{v}_{i} \in \mathbb{R}^{v} \\\alpha\left(\mathbf{q}, \mathbf{k}_{i}\right)=\operatorname{softmax}\left(a\left(\mathbf{q}, \mathbf{k}_{i}\right)\right)=\frac{\exp \left(a\left(\mathbf{q}, \mathbf{k}_{i}\right)\right)}{\sum_{j=1}^{m} \exp \left(a\left(\mathbf{q}, \mathbf{k}_{j}\right)\right)} \in \mathbb{R}\end{array}\tag{6}</script><p>其中 $\operatorname{softmax}(\cdot)$ 中的参数 $a(\mathbf{q},\mathbf{k}_i)$ 表示注意力分数。</p><p>从公式 $(6)$ 可以看出，我们应该关注 $a(\cdot)$ 怎么设计，接下来介绍两种思路。</p><h4 id="1-4-1-Additive-Attention"><a href="#1-4-1-Additive-Attention" class="headerlink" title="1.4.1 Additive Attention"></a>1.4.1 Additive Attention</h4><p>可学参数：$\mathbf{W}_{k}\in\mathbb{R}^{h\times k},\mathbf{W}_{q}\in\mathbb{R}^{h\times q},\mathbf{v}\in \mathbb{R}^{h} $</p><script type="math/tex; mode=display">a(\mathbf{k}, \mathbf{q})=\mathbf{v}^{T} \tanh \left(\mathbf{W}_{k} \mathbf{k}+\mathbf{W}_{q} \mathbf{q}\right)</script><p>其中 $\operatorname{tanh}(\cdot)$ 表示 tanh 激活函数。等价于将 query 和 key 合并起来后放到一个隐藏层大小为 h 输出大小为 1 的单隐藏层 MLP</p><p>该方法中 query、key 和 value 的长度可以不一样。</p><h4 id="1-4-2-Scaled-Dot-Product-Attention"><a href="#1-4-2-Scaled-Dot-Product-Attention" class="headerlink" title="1.4.2 Scaled Dot-Product Attention"></a>1.4.2 Scaled Dot-Product Attention</h4><p>如果 query 和 key 都是同样的长度 $\mathbf{q},\mathbf{k}_i\in\mathbb{R}^d$，那么可以：</p><script type="math/tex; mode=display">a\left(\mathbf{q}, \mathbf{k}_i\right)=\left\langle\mathbf{q}, \mathbf{k}_i\right\rangle/\sqrt{d}</script><p>向量化版本</p><p>query $\mathbf{Q} \in \mathbb{R}^{n \times d}$, key $\mathbf{K} \in \mathbb{R}^{m \times d}$, value $\mathbf{V} \in \mathbb{R}^{m \times v}$</p><p>attention score: $a(\mathbf{Q}, \mathbf{K})=\mathbf{Q K}^{T} / \sqrt{d} \in \mathbb{R}^{n \times m} $</p><p>attention pooling: $f=\operatorname{softmax}(a(\mathbf{Q}, \mathbf{K})) \mathbf{V} \in \mathbb{R}^{n \times v} $</p><h2 id="2-Self-attention"><a href="#2-Self-attention" class="headerlink" title="2 Self-attention"></a>2 Self-attention</h2><h3 id="2-1-什么是-Self-attention"><a href="#2-1-什么是-Self-attention" class="headerlink" title="2.1 什么是 Self-attention"></a>2.1 什么是 Self-attention</h3><p>下面三幅图展示了 CNN、RNN 和 self-attention 如何处理一个序列的输入。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211125212203795.png" alt=""></p><p>CNN 会考虑当前输入和其前面的 n 个输入以及后面 n 个输入的关系。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211125212213605.png" alt=""></p><p>RNN 会考虑当前输入和其前面的所有输入的关系。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211125212223836.png" alt=""></p><p>Self-attention 会考虑当前输入和全局输入的关系。</p><p>总的来说，Self-attention 可以表述为：给定序列 $\mathbf{x}_{1},\ldots,\mathbf{x}_{n},\forall \mathbf{x}_{i}\in\mathbb{R}^{d}$，自注意力池化层将 $\mathbf{x}_{i}$ 当做 key, value, query 来对序列抽取特征得到  $\mathbf{y}_{1},\ldots,\mathbf{y}_{n}$，这里</p><script type="math/tex; mode=display">\mathbf{y}_{i}=f\left(\mathbf{x}_{i},\left(\mathbf{x}_{1}, \mathbf{x}_{1}\right), \ldots,\left(\mathbf{x}_{n}, \mathbf{x}_{n}\right)\right) \in \mathbb{R}^{d}</script><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211112102751408.png" alt=""></p><h3 id="2-2-Self-attention-怎样运作"><a href="#2-2-Self-attention-怎样运作" class="headerlink" title="2.2 Self-attention 怎样运作"></a>2.2 Self-attention 怎样运作</h3><p>对于每一个输入 $a^i$ 在考虑其与全局的关联性之后得到 $b^i$</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211125213823110.png" style="zoom: 67%;" /></p><p>如何计算 $a^1$ 和 $a^2,a^3,a^4$ 的关联性？在 1.4 节中介绍的注意力分数计算方法就是用于计算 query 和 key 之间关联性的方法。即常用的 Dot-product attention 和 Additive attention。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211125214756307.png" style="zoom: 67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126100520270.png" alt="Dot-product attention" style="zoom:67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126100545737.png" alt="Additive attention" style="zoom:67%;" /></p><p><strong>计算 $a^1$ 和 $a^2,a^3,a^4$ 的关联性</strong></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126103241556.png" style="zoom: 67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126103525057.png" style="zoom:67%;" /></p><p>对于输入 $a^i$ 将其分别左乘上矩阵 $W^q,W^k,W^v$ 得到 $q^i,k^i,v^i$，然后利用 $q^i,k^j$ 计算 $a^i,a^j$ 之间的关联性，计算结果为 attention score，将 attention score 放入激活函数后得到 attention weight，attention weight 乘上 $v^j$ 再求和可得到 $b^i$，即 $a^i$ 对应的输出。</p><p><strong>矩阵化</strong></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126104254060.png" style="zoom:67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126104825961.png" style="zoom:67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126110708373.png" style="zoom:67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126110845466.png" style="zoom:67%;" /></p><p>通过上面的几张图可以看出，虽然 Self-attention 中间做了很多复杂的工作，但是在 Self-attention 中需要学习的参数只有 $W^q,W^k,W^v$，其他的参数都是预先设定好的。</p><h3 id="2-3-Multi-head-Self-attention"><a href="#2-3-Multi-head-Self-attention" class="headerlink" title="2.3 Multi-head Self-attention"></a>2.3 Multi-head Self-attention</h3><p>在 Self-attention 中，我们使用 query 去需要相关的 key，但是相关有很多种不同的定义，不同的定义与不同的 query 绑定，即同一个输入需要有多个 query。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126163650293.png" style="zoom:67%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126163718123.png" style="zoom:67%;" /></p><p>在上图中，在 Self-attention 的基础上对于每个 $q^i,k^i,v^i$ 其左乘上一个矩阵可以得到 $q^{i,1},q^{i,2},k^{i,1},k^{i,2},v^{i,1},v^{i,2}$，然后按照 Self-attention 中相同的计算方式可以得到 $b^{i,1},b^{i,2}$。</p><p>然后将得到的 $b^{i,1},b^{i,2}$ 接起来左乘一个矩阵就可以得到 Multi-head Self-attention 的输出 $b^i$。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126170914847.png" style="zoom:80%;" /></p><h3 id="2-4-Position-Encoding"><a href="#2-4-Position-Encoding" class="headerlink" title="2.4 Position Encoding"></a>2.4 Position Encoding</h3><p>因为 Self-attention 考虑的是全局的信息，而且即便输入的顺序改变了，也不会影响输出的结果。但是在实际的应用中，很多时候需要考虑位置信息，例如一个 sequence。因此，为了让 Self-attention 能够考虑到位置信息，为每个输入加上一个 position encoding。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126175153186.png" style="zoom:80%;" /></p><p>其中 $e^i$ 表示在每个输入上增加的 position encoding 信息，对于每个 $a^i$ 都有一个专属的 $e^i$ 与之对应。$e^i$ 产生的方式有很多种，在论文 <a href="https://arxiv.org/pdf/2003.09229.pdf">Learning to Encode Position for Transformer with Continuous Dynamical Model</a> 中提出并比较了 position encoding。</p><h3 id="2-5-Self-attention-for-Image"><a href="#2-5-Self-attention-for-Image" class="headerlink" title="2.5 Self-attention for Image"></a>2.5 Self-attention for Image</h3><p>对于一张 shape = (5, 10, 3) 的 RGB 图片，可以将其看成一个 vector set，其中的每一个 pixel 都可以看成一个 vector (r, g, b)，然后就可以将其放入 Self-attention 模型进行计算。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126182324503.png" style="zoom:80%;" /></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126215014003.png" style="zoom:67%;" /></p><h2 id="3-Self-attention-v-s-CNN"><a href="#3-Self-attention-v-s-CNN" class="headerlink" title="3 Self-attention v.s. CNN"></a>3 Self-attention v.s. CNN</h2><p>CNN 和 Self-attention 都可以考虑一定范围内的信息，但是 CNN 只能够考虑到感受野内的信息，而 Self-attention 能够考虑到全局的信息。因此可以把 CNN 看做 Self-attention 的简化版本，Self-attention 看做 CNN 的复杂化版本。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126215255573.png" style="zoom:80%;" /></p><p>从集合的角度来看，CNN 可以看做是 Self-attention 的子集。在论文 <a href="https://arxiv.org/pdf/1911.03584.pdf">ON THE RELATIONSHIP BETWEEN SELF-ATTENTION AND CONVOLUTIONAL LAYERS</a> 中详细介绍了 Self-attention 和 CNN 的关系。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126215729192.png" style="zoom:80%;" /></p><p>从下图(出自论文 <a href="https://arxiv.org/pdf/2010.11929.pdf">AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</a>)中的数据可以看出，利用较小的数据量训练时，CNN 的效果优于 Self-attention，但是随着数据量的增大，Self-attention 的效果越来越好，在数据量达到 300 Million 的时候 Self-attention 的效果会优于 CNN。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211126215900812.png" style="zoom:80%;" /></p><h2 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4 Summary"></a>4 Summary</h2><p>本篇博客对 attention 做了一个基本介绍，然后又介绍了 attention 最常用的一种实现 Self-attention，Self-attention 在 <a href="https://arxiv.org/abs/1706.03762">Transformer</a> 和 <a href="https://arxiv.org/abs/1810.04805">BERT</a> 中有着举足轻重的地位。我最开始学习 attention 的目的，是为了了解其在 computer vision 方向的应用，所以在之后的博客中我会更加详细的介绍目前 attention 在 computer vision 方向的应用以及遇到的问题。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://zh-v2.d2l.ai/index.html">《动手学深度学习》</a></p><p><a href="https://www.bilibili.com/video/BV1264y1i7R1?spm_id_from=333.999.0.0">64 注意力机制【动手学深度学习v2】</a></p><p><a href="https://www.bilibili.com/video/BV1Tb4y167rb?spm_id_from=333.999.0.0">65 注意力分数【动手学深度学习v2】</a></p><p><a href="https://www.bilibili.com/video/BV19o4y1m7mo?spm_id_from=333.999.0.0">67 自注意力【动手学深度学习v2】</a></p><p><a href="https://www.bilibili.com/video/BV1Kq4y1H7FL?spm_id_from=333.999.0.0">68 Transformer【动手学深度学习v2】</a></p><p><a href="https://www.bilibili.com/video/BV1pu411o7BE?spm_id_from=333.999.0.0">Transformer论文逐段精读【论文精读】</a></p><p><a href="https://www.bilibili.com/video/BV1Wv411h7kN?p=23">(强推)李宏毅2021春机器学习课程</a></p><p><a href="https://speech.ee.ntu.edu.tw/~hylee/ml/ml2021-course-data/self_v7.pdf">【機器學習2021】自注意力機制 (Self-attention) slides</a></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> attention </tag>
            
            <tag> self-attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA 编程入门</title>
      <link href="/posts/63deb372/"/>
      <url>/posts/63deb372/</url>
      
        <content type="html"><![CDATA[<h1 id="CUDA-编程入门"><a href="#CUDA-编程入门" class="headerlink" title="CUDA 编程入门"></a>CUDA 编程入门</h1><h2 id="CUDA-概述"><a href="#CUDA-概述" class="headerlink" title="CUDA 概述"></a>CUDA 概述</h2><p>CUDA 是 NVIDIA 推出的用于其发布的 GPU 的并行计算架构，使用 CUDA 可以利用 GPU 的并行计算引擎更加高效的完成复杂的计算难题。</p><p>在目前主流的使用冯·诺依曼体系结构的计算机中，GPU 属于一个外置的设备，因此即便在利用 GPU 进行并行计算的时候也无法脱离 CPU，需要与 CPU 协同工作。因此当我们在说 GPU 并行计算时，其实指的是基于 CPU+GPU 的异构计算架构。在异构计算架构中，CPU 和 GPU 通过 PCI-E 总线连接在一起进行协同工作，所以 CPU 所在位置称为 Host，GPU 所在位置称为 Device，如下图所示。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211120161819279.png" alt=""></p><p>从上图可以看到，GPU 中有着更多的运算核心，非常适合数据并行的计算密集型任务，比如大型的矩阵计算。</p><h2 id="CUDA-编程模型基础"><a href="#CUDA-编程模型基础" class="headerlink" title="CUDA 编程模型基础"></a>CUDA 编程模型基础</h2><p>在了解了 CUDA 的基本概念之后，还需要了解 CUDA 编程模型的基本概念以便于之后利用 CUDA 编写并行计算程序。</p><p>CUDA 模型时一个异构模型，需要 CPU 和 GPU 协同工作，在 CUDA 中一般用 Host 指代 CPU 及其内存，Device 指代 GPU 及其内存。CUDA 程序中既包含在 Host 上运行的程序，也包含在 Device 上运行的程序，并且 Host 和 Device 之间可以进行通信，如进行数据拷贝等操作。一般的将需要串行执行的程序放在 Host 上执行，需要并行执行的程序放在 Device 上进行。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211120163002840.png" alt="异构编程"></p><p>CUDA 程序一般的执行流程：</p><ol><li>分配 Host 内存，并进行数据初始化</li><li>分配 Device 内存，并将 Host 上的数据拷贝到 Device 上</li><li>调用 CUDA Kernel 在 Device 上进行并行运算</li><li>将运算结果从 Device 上拷贝到 Host 上，并释放 Device 上对应的内存</li><li>并行运算结束，Host 得到运算结果，释放 Host 上分配的内存，程序结束</li></ol><p>在第 3 步中，CUDA Kernel 指的是在 Device 线程上并行执行的函数，在程序中利用 <code>__global__</code> 符号声明，在调用时需要用 <code>&lt;&lt;&lt;grid, block&gt;&gt;&gt;</code> 来指定 Kernel 执行的线程数量，在 CUDA 中每一个线程都要执行 Kernel 函数，并且每个线程会被分配到一个唯一的 Thread ID，这个 ID 值可以通过 Kernel 的内置变量 <code>threadIdx</code> 来获得。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__gloabl__ <span class="token function">vectorAddition</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> device_a<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> device_b<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> device_c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义 Kernel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*    some codes    */</span>    vectorAddition<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 Kernel 并指定 grid 为 10, block 为 32</span>    <span class="token comment">/*    some codes    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Kernel-的层次结构"><a href="#Kernel-的层次结构" class="headerlink" title="Kernel 的层次结构"></a>Kernel 的层次结构</h3><p>Kernel 在 Device 执行的时候实际上是启动很多线程，这些线程都执行 Kernel 这个函数。其中，由这个 Kernel 启动的所有线程称为一个 grid，同一个 grid 中的线程共享相同的 Global memory，grid 是线程结构的第一个层次。一个 grid 又可以划分为多个 block，每一个 block 包含多个线程，其中的所有线程又共享 Per-block shared memory，block 是线程结构的第二个层次。最后，每一个线程(thread)有着自己的 Per-thread local memory。</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211120170339118.png" alt="线程两层组织结构"></p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211120170021535.png" alt="内存层次结构"></p><p>下图是一个线程两层组织结构的示意图，其中 grid 和 block 均为 2-dim 的线程组织。grid 和 block 都是定义为 <code>dim3</code> 类型的变量，<code>dim3</code> 可以看成是包含三个无符号整数(x, y, z)成员的结构体变量，在定义时，缺省值初始化为1。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">dim3 <span class="token function">grid</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dim3 <span class="token function">block</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>grid<span class="token punctuation">,</span> block<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/v2-aa6aa453ff39aa7078dde59b59b512d8_720w.jpg" alt=""></p><p>从线程的组织结构可以得知，一个线程是由(blockIdx, threadIdx)来唯一标识的，blockIdx 和 threadIdx 都是 <code>dim3</code> 类型的变量，其中 blockIdx 指定线程所在 block 在 grid 中的位置，threadIdx 指定线程在 block 中的位置，如图中的 Thread(2,1) 满足：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">threadIdx<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>threadIdx<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>blockIdx<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>blockIdx<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个 block 是放在同一个流式多处理器(SM)上运行的，但是单个 SM 上的运算核心(cuda core)有限，这导致线程块中的线程数是有限制的，因此在设置 grid 和 block 的 shape 时需要根据所使用的 Device 来设计。</p><p>如果要知道一个线程在 block 中的全局 ID，就必须要根据 block 的组织结构来计算，对于一个 2-dim 的 block($D_x$, $D_y$)，线程($x$, $y$)的 ID 值为 $x+y<em>D_x$，如果是 3-dim 的 block($D_x$, $D_y$, $D_z$)，线程($x$, $y$, $z$)的 ID 值为 $x+y</em>D_x+z<em>D_x</em>D_y$。</p><h3 id="CUDA-实现向量加法"><a href="#CUDA-实现向量加法" class="headerlink" title="CUDA 实现向量加法"></a>CUDA 实现向量加法</h3><h4 id="查看-Device-基本信息"><a href="#查看-Device-基本信息" class="headerlink" title="查看 Device 基本信息"></a>查看 Device 基本信息</h4><p>在进行 CUDA 编程之前，需要先看一下自己的 Device 的配置，便于之后自己设定 grid 和 block 更好的利用 GPU。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cuda_runtime.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"device_launch_parameters.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cudaDeviceProp deviceProp<span class="token punctuation">;</span>    <span class="token function">cudaGetDeviceProperties</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deviceProp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Device 0 information:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设备名称与型号: %s\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"显存大小: %d MB\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deviceProp<span class="token punctuation">.</span>totalGlobalMem <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"含有的SM数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"CUDA CORE数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount <span class="token operator">*</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"计算能力: %d.%d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>major<span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Device 0 information:<br>设备名称与型号: Tesla K20c<br>显存大小: 4743 MB<br>含有的SM数量: 13<br>CUDA CORE数量: 2496<br>计算能力: 3.5<br>Device 1 information:<br>设备名称与型号: Tesla K20c<br>显存大小: 4743 MB<br>含有的SM数量: 13<br>CUDA CORE数量: 2496<br>计算能力: 3.5</p></blockquote><p>其中第 12 行乘 192 的原因是我所使用的设备为 Tesla K20，而 Tesla K 系列均采用 Kepler 架构，该架构下每个 SM 中的 cuda core 的数量为 192。</p><h4 id="实现-Vector-Addition"><a href="#实现-Vector-Addition" class="headerlink" title="实现 Vector Addition"></a>实现 Vector Addition</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cuda_runtime.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"device_launch_parameters.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> LENGTH <span class="token operator">=</span> <span class="token number">5e4</span><span class="token punctuation">;</span><span class="token class-name">clock_t</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vectorAdditionOnDevice</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> A<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LENGTH<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">vectorAdditionOnDevice</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//calculation on GPU</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Calculation on GPU version1 use %.8f seconds.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">vectorAdditionOnDevice</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> B<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> C<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span><span class="token operator">*</span> device_A <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">float</span><span class="token operator">*</span> device_B <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">float</span><span class="token operator">*</span> device_C <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_A<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分配内存</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_B<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分配内存</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_C<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分配内存</span>    <span class="token keyword">const</span> <span class="token keyword">float</span> perBlockThreads <span class="token operator">=</span> <span class="token number">192.0</span><span class="token punctuation">;</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_A<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将数据从 Host 拷贝到 Device</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_B<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将数据从 Host 拷贝到 Device</span>    additionKernelVersion<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">ceil</span><span class="token punctuation">(</span>size <span class="token operator">/</span> perBlockThreads<span class="token punctuation">)</span><span class="token punctuation">,</span> perBlockThreads<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>device_A<span class="token punctuation">,</span> device_B<span class="token punctuation">,</span> device_C<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 Kernel 进行并行计算</span>    <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_C<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">,</span> cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将数据从 Device 拷贝到 Host</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>device_A<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放内存</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>device_B<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放内存</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>device_C<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放内存</span><span class="token punctuation">&#125;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> B<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> C<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 此处定义用于向量加法的 Kernel</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Calculation on GPU version1 use 0.14711700 seconds.</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/34587739">CUDA编程入门极简教程</a></p><p><a href="https://cs.colby.edu/courses/S14/cs336/online_materials/CUDA_C_Programming_Guide.pdf">CUDA C Programming Guide</a></p>]]></content>
      
      
      <categories>
          
          <category> Parallel Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学基础</title>
      <link href="/posts/e403a46/"/>
      <url>/posts/e403a46/</url>
      
        <content type="html"><![CDATA[<p>本篇博客不包含深度学习中所有的数学知识，只是我在学习过程中，对不会或者不熟悉的数学知识的记录，因此部分内容和推导我会省略掉。</p><h2 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h2><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h2 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a><strong>条件概率</strong></h3><script type="math/tex; mode=display">P(A|B)=\frac{P(A,B)}{P(B)}</script><h3 id="乘法公式"><a href="#乘法公式" class="headerlink" title="乘法公式"></a><strong>乘法公式</strong></h3><script type="math/tex; mode=display">P(A,B)=P(B)\cdot P(A|B)\\s.t.\ P(B)\ >0\\P(A,B)=P(A)\cdot P(B|A)\\s.t.\ P(A)\ >0\\</script><h3 id="乘法公式推广"><a href="#乘法公式推广" class="headerlink" title="乘法公式推广"></a><strong>乘法公式推广</strong></h3><script type="math/tex; mode=display">P(A_1,A_2,A_3)=P(A_1)\cdot P(A_2|A_1)\cdot P(A_3|A_1,A_2)\\\\P(A_1,\dots,A_n)=P(A_1)\cdot P(A_2|A_1)\cdot P(A_3|A_1,A_2)\cdot P(A_4|A_1,A_2,A_3)\cdots\\s.t.\ P(A_1)>0,\dots ,P(A_1,\dots,A_{n-1})>0</script><h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a><strong>全概率公式</strong></h3><p>知原因推结果</p><script type="math/tex; mode=display">P(A)=\sum_{i=1}^nP(B_i)P(A|B_i)</script><h3 id="Bayes-公式"><a href="#Bayes-公式" class="headerlink" title="Bayes 公式"></a><strong>Bayes 公式</strong></h3><p>知结果推原因</p><script type="math/tex; mode=display">P(B_i|A)=\frac{P(A,B_i)}{P(A)}=\frac{P(B_i)P(A|B_i)}{\sum_{i=1}^nP(B_i)P(A|B_i)},i=1,\dots,n\\s.t.\ P(A|B_i)>0,i=1,\dots,n</script><h3 id="伯努利概型"><a href="#伯努利概型" class="headerlink" title="伯努利概型"></a><strong>伯努利概型</strong></h3><p>定义：试验结果只有两个的试验 E，称为伯努利试验</p><p>定理：$n$ 重伯努利概型中，设 $P(A)=p$，$P(\overline{A})=1-p$，则 $n$ 重伯努利概型中 $A$ 发生 $k$ 次的概率为</p><script type="math/tex; mode=display">P_n(k)=C_n^k\cdot{p^k}\cdot{(1-p)^{(n-k)}},k=0,1,\dots,n</script><h3 id="二项分布-X-sim-B-n-p"><a href="#二项分布-X-sim-B-n-p" class="headerlink" title="二项分布 $X\sim B(n,p)$"></a><strong>二项分布</strong> $X\sim B(n,p)$</h3><p>在 $n$ 重伯努利概型中，设 $P(A)=p$，$P(\overline{A})=1-p=q$，$X$ 为 $A$ 发生的次数，则</p><script type="math/tex; mode=display">P(X=k)=C_n^k\cdot{p^k}\cdot{q^{(n-k)}},k=0,1,\dots,n</script><h3 id="泊松分布-X-sim-P-lambda"><a href="#泊松分布-X-sim-P-lambda" class="headerlink" title="泊松分布 $X\sim P(\lambda)$"></a><strong>泊松分布</strong> $X\sim P(\lambda)$</h3><script type="math/tex; mode=display">P(X=k)=\frac{\lambda^ke^{-\lambda}}{k!}\\s.t.\ \lambda>0且为常数,k=0,1,\dots</script><p><font color="red">注</font> 若 $X\sim B(n,p)$，$n&gt;10$，$p&lt;0.1$ 时，$P(X=k)\approx \frac{\lambda^ke^{-\lambda}}{k!}$</p><h3 id="均匀分布-X-sim-mu-a-b"><a href="#均匀分布-X-sim-mu-a-b" class="headerlink" title="均匀分布 $X\sim \mu[a,b]$"></a><strong>均匀分布</strong> $X\sim \mu[a,b]$</h3><h3 id="指数分布-X-sim-e-lambda"><a href="#指数分布-X-sim-e-lambda" class="headerlink" title="指数分布 $X\sim e(\lambda)$"></a><strong>指数分布</strong> $X\sim e(\lambda)$</h3><h3 id="正态分布-X-sim-N-mu-theta-2"><a href="#正态分布-X-sim-N-mu-theta-2" class="headerlink" title="正态分布 $X\sim N(\mu,\theta^2)$"></a><strong>正态分布</strong> $X\sim N(\mu,\theta^2)$</h3><h3 id="标准正态分布-X-sim-N-0-1"><a href="#标准正态分布-X-sim-N-0-1" class="headerlink" title="标准正态分布 $X\sim N(0,1)$"></a><strong>标准正态分布</strong> $X\sim N(0,1)$</h3><h2 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h2><h3 id="自信息"><a href="#自信息" class="headerlink" title="自信息"></a><strong>自信息</strong></h3><p>任何事件都会承载着一定的信息量，包括已经发生的事件和未发生的事件，只是它们承载的信息量会有所不同。</p><p>如昨天下雨这个已知事件，因为已经发生，既定事实，那么它的信息量就为 $0$。如明天会下雨这个事件，因为未有发生，那么这个事件的信息量就大。</p><p>从上面例子可以看出信息量是一个与事件发生概率相关的概念，而且可以得出，事件发生的概率越小，其信息量越大。</p><p>定义事件 $X=x$ 的自信息为</p><script type="math/tex; mode=display">I\left(x\right)=-\log_2 P\left(x\right)</script><h3 id="香农熵-Shannon-Entropy"><a href="#香农熵-Shannon-Entropy" class="headerlink" title="香农熵(Shannon Entropy)"></a><strong>香农熵(Shannon Entropy)</strong></h3><p>当一个事件发生的概率为 $p\left(x\right)$，那么它的信息量是 $-\log{p\left(x\right)}$</p><p>如果把这个事件的所有可能性罗列出来，就可以求得该事件信息量的期望</p><p>信息量的期望就是熵，所以熵的公式为</p><script type="math/tex; mode=display">H\left(\mathrm{x}\right)=\mathbb{E}_{\mathrm{x}\sim P}\left[I\left(x\right)\right]=-\mathbb{E}_{\mathrm{x}\sim P}\left[\log{P\left(x\right)}\right]</script><p>也可以表述为</p><script type="math/tex; mode=display">H\left(\mathrm{x}\right)=-\sum_{i=1}^{n}p\left(x_i\right)\log{p\left(x_i\right)}</script><p>对于 0-1 分布问题，熵的计算可以简化为</p><script type="math/tex; mode=display">H\left(\mathrm{x}\right)=-p\left(x\right)\log{\left(p\left(x\right)\right)}-\left(1-p\left(x\right)\right)\log\left(1-p\left(x\right)\right)</script><h3 id="相对熵-KL-散度-Kullback-Leibler-divergence"><a href="#相对熵-KL-散度-Kullback-Leibler-divergence" class="headerlink" title="相对熵(KL 散度)(Kullback-Leibler divergence)"></a><strong>相对熵(KL 散度)(Kullback-Leibler divergence)</strong></h3><p>对于同一个随机变量 $\mathbf{x}$，如果其有两个单独的概率分布 $P(\mathbf{x})$ 和 $Q(\mathbf{x})$，可以使用 KL 散度来衡量这两个分布的差异，KL 散度越小，真实分布与近似分布之间的匹配就越好。</p><script type="math/tex; mode=display">D_{\mathrm{KL}}(P \| Q)=\mathbb{E}_{\mathrm{x} \sim P}\left[\log \frac{P(x)}{Q(x)}\right]=\mathbb{E}_{\mathrm{x} \sim P}[\log P(x)-\log Q(x)]</script><p>在机器学习中，$P$ 往往用来表示样本的真实分布，$Q$ 用来表示模型所预测的分布，那么 KL 散度就可以计算两个分布的差异，也就是 Loss</p><script type="math/tex; mode=display">D_{KL}(P\|Q)=\sum_{i=1}^n{P(x_i)\log{\frac{P(x_i)}{Q(x_i)}}}</script><p>因为 KL 散度是非负的并且衡量的是两个分布之间的差异，它经常被用作分布之间的某种距离。然而，它并不是真的距离，因为它不是对称的：对于某些 $P$ 和 $Q$，$D_{KL}(P|Q)\ne D_{KL}(Q|P)$。这种非对称性意味着选择 $D_{KL}(P|Q)$ 还是 $D_{KL}(Q|P)$ 影响很大。</p><p>对于 KL 散度的直观解释可以看这篇文章：<a href="https://zhuanlan.zhihu.com/p/37452654">初学机器学习：直观解读KL散度的数学概念</a></p><p>如何证明 KL 散度大于等于 $0$ (未解决)</p><h3 id="交叉熵-Cross-Entropy"><a href="#交叉熵-Cross-Entropy" class="headerlink" title="交叉熵(Cross Entropy)"></a><strong>交叉熵(Cross Entropy)</strong></h3><p>两个分布 $P$ 和 $Q$ 之间的交叉熵定义为：</p><script type="math/tex; mode=display">H\left(P,Q\right)=-\mathbb{E}_{x\sim P}\log{Q\left(x\right)}</script><p>将 KL 散度公式变形：</p><script type="math/tex; mode=display">\begin{align}D_{\mathrm{KL}}(P \| Q)&=\mathbb{E}_{\mathrm{x} \sim P}[\log P(x)-\log Q(x)]\\&=\mathbb{E}_{\mathrm{x}\sim{P}}[\log{P(x)}]-\mathbb{E}_{\mathrm{x}\sim{P}}[\log{Q(x)}]\\&=-H(P)-\mathbb{E}_{\mathbf{x}\sim P}[\log Q(x)]\\&=-H(P)+H(P,Q)\end{align}</script><p>所以可得到交叉熵和 KL 散度的关系：</p><script type="math/tex; mode=display">H(P,Q)=H(P)+D_{KL}(P\|Q)</script><p>在机器学习中，需要评估 label 和 predicts 之间的差距，使用 KL 散度刚刚好，即 $D_{KL}(\mathbf{y}|\hat{\mathbf{y}})$。由于 KL 散度中的前一部分 $−H(y)$ 不变，故在优化过程中，只需要关注交叉熵就可以了。所以一般在机器学习中直接用交叉熵做 loss，评估模型。</p><p>在信息论中，$\lim_{x\to 0}x\log x=0$</p><h3 id="JS-散度-Jensen-Shannon-divergence"><a href="#JS-散度-Jensen-Shannon-divergence" class="headerlink" title="JS 散度(Jensen-Shannon divergence)"></a><strong>JS 散度(Jensen-Shannon divergence)</strong></h3><p><strong>JS 散度</strong>度量了两个概率分布的相似度，基于 KL 散度的变体，解决了 KL 散度非对称的问题。</p><p>一般地，JS 散度是对称的，其取值是 $0$ 到 $1$ 之间。定义如下：</p><script type="math/tex; mode=display">JS(P_1\|P_2)=\frac{1}{2}KL(P_1\|\frac{P_1+P_2}{2})+\frac{1}{2}KL(P_2\|\frac{P_1+P_2}{2})</script><h3 id="Wasserstein-距离"><a href="#Wasserstein-距离" class="headerlink" title="Wasserstein 距离"></a><strong>Wasserstein 距离</strong></h3><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/74075915">交叉熵、相对熵（KL散度）、JS散度和Wasserstein距离（推土机距离）</a></p><p>KL 散度和 JS 散度的问题</p><ul><li>如果两个分布 $P,Q$ 离得很远，完全没有重叠的时候，那么 KL 散度值是没有意义的，而 JS 散度值是一个常数。这在学习算法中是比较致命的，这就意味着这一点的梯度为 $0$，梯度消失了。</li></ul><p><strong>Wasserstein距离</strong> 度量两个概率分布之间的距离，定义如下</p><script type="math/tex; mode=display">W(P_1,P_2)=\inf_{\gamma\sim\prod(P_1,P_2)}\mathbb{E}_{(x,y)\sim\gamma}[\left\|x-y\right\|]</script><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h3 id="Jensen-不等式"><a href="#Jensen-不等式" class="headerlink" title="Jensen 不等式"></a><strong>Jensen 不等式</strong></h3><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/39315786">Jensen不等式初步理解及证明</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 深度学习 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
            <tag> 微积分 </tag>
            
            <tag> 概率论 </tag>
            
            <tag> 信息论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论基础</title>
      <link href="/posts/eadfe50d/"/>
      <url>/posts/eadfe50d/</url>
      
        <content type="html"><![CDATA[<h2 id="图论基础"><a href="#图论基础" class="headerlink" title="图论基础"></a>图论基础</h2><h3 id="树和图的存储"><a href="#树和图的存储" class="headerlink" title="树和图的存储"></a>树和图的存储</h3><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>树是特殊的图，无向图是特殊的有向图，所以只需要考虑有向图的存储。</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210302185556639.png" alt=""></p><p>图的存储(邻接表) 适用于稀疏图</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图的存储(邻接矩阵) 适用于稠密图</p><p>图 DFS</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图 BFS</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p><a href="https://www.acwing.com/activity/content/problem/content/911/1/">拓扑排序</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> d<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesC40DF13FFF92612293DC87F4CDFCA125.png" alt=""></p><h4 id="反向建图"><a href="#反向建图" class="headerlink" title="反向建图"></a>反向建图</h4><p>用反向图找到一条从A到B的道路后，若翻回原图，则路线会变成B到A。<br>因此，反向建图之后，跑一遍最短路(Dijkstra | SPFA)，得到的就是任意点到源点的最短路。</p><h4 id="求最短路有几条"><a href="#求最短路有几条" class="headerlink" title="求最短路有几条"></a>求最短路有几条</h4><p>当访问到这个节点时，如果是第一次访问，将这个节点的答案+=他父节点的答案，并将这个节点推到队尾（push）；</p><p>如果是第二次访问且当前的距离等于之前记录的距离，说明这是第二条最短路，同样，将这个节点的答案+=他父节点的答案，但不需要（push）了。</p><p>操作计数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判负环"><a href="#判负环" class="headerlink" title="判负环"></a>判负环</h4><p>在找最短路的时候当经过的路径中有负环的时候，没经过该负环一次距离减小，重复经过这几个形成负环的点。根据鸽巢原理，n个点的最短路中最多经过n - 1个点，当经过的点数大于等于n的时候说明该路径中存在负环。因此，只需要在spfa中每次更新dist的时候统计经过的点数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="朴素Dijkstra"><a href="#朴素Dijkstra" class="headerlink" title="朴素Dijkstra"></a>朴素Dijkstra</h4><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><h5 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h5><p><a href="https://www.acwing.com/problem/content/851/">Dijkstra求最短路 I</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// g数组存边，dist数组表示从1到i点的最短距离</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 表示每个点的最短路是否已经确定</span><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 在未确定最短路的点中找到距离起点最短的点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 t <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token comment">// 用t更新其他点的距离</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span>        g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆优化Dijkstra"><a href="#堆优化Dijkstra" class="headerlink" title="堆优化Dijkstra"></a>堆优化Dijkstra</h4><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><h5 id="模板：-1"><a href="#模板：-1" class="headerlink" title="模板："></a>模板：</h5><p><a href="https://www.acwing.com/problem/content/852/">Dijkstra求最短路 II</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pii<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pii<span class="token operator">>></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// first表示距离， second表示编号</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">,</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h4><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><h5 id="模板：-2"><a href="#模板：-2" class="headerlink" title="模板："></a>模板：</h5><p><a href="https://www.acwing.com/problem/content/description/855/">有边数限制的最短路</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edges<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> backup<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>backup<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> w <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> backup<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">></span> INF <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">>></span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">>></span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">Bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SPFA求最短路"><a href="#SPFA求最短路" class="headerlink" title="SPFA求最短路"></a>SPFA求最短路</h4><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><h5 id="模板：-3"><a href="#模板：-3" class="headerlink" title="模板："></a>模板：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SPFA判负环"><a href="#SPFA判负环" class="headerlink" title="SPFA判负环"></a>SPFA判负环</h4><h5 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h5><h5 id="模板：-4"><a href="#模板：-4" class="headerlink" title="模板："></a>模板：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> INF <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最短路应用"><a href="#最短路应用" class="headerlink" title="最短路应用"></a>最短路应用</h4><h5 id="洛谷题单"><a href="#洛谷题单" class="headerlink" title="洛谷题单"></a>洛谷题单</h5><h6 id="P3371-【模板】单源最短路径（弱化版）"><a href="#P3371-【模板】单源最短路径（弱化版）" class="headerlink" title="P3371 【模板】单源最短路径（弱化版）"></a><a href="https://www.luogu.com.cn/problem/P3371">P3371 【模板】单源最短路径（弱化版）</a></h6><p>解法1(堆优化Dijkstra)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pii<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pii<span class="token operator">></span> <span class="token operator">></span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pii t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">,</span> d <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2(朴素Dijkstra)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法3(SPFA)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="P1629-邮递员送信"><a href="#P1629-邮递员送信" class="headerlink" title="P1629 邮递员送信"></a><a href="https://www.luogu.com.cn/problem/P1629">P1629 邮递员送信</a></h6><p>反向建图，将多源一汇最短路变为单源最短路。</p><p>解法1(朴素Dijkstra + 反向建图)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> vis<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2(堆优化Dijkstra + 反向建图)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> vis<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pii<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pii<span class="token operator">></span> <span class="token operator">></span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// first distance seconde node</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pii t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b <span class="token operator">+</span> n<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法3(SPFA + 反向建图)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> vis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b <span class="token operator">+</span> n<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="P4779-【模板】单源最短路径（标准版）"><a href="#P4779-【模板】单源最短路径（标准版）" class="headerlink" title="P4779 【模板】单源最短路径（标准版）"></a><a href="https://www.luogu.com.cn/problem/P4779">P4779 【模板】单源最短路径（标准版）</a></h6><p>解法1(SPFA):</p><p>被卡了</p><p>解法2(堆优化Dijkstra)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pii<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pii<span class="token operator">></span> <span class="token operator">></span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pii t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="P1144-最短路计数"><a href="#P1144-最短路计数" class="headerlink" title="P1144 最短路计数"></a><a href="https://www.luogu.com.cn/problem/P1144">P1144 最短路计数</a></h6><p>解法1(SPFA + 操作计数)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">100003</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法2(堆优化Dijkstra + 操作计数)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">100003</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pii<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pii<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pii<span class="token operator">></span> <span class="token operator">></span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pii t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> distance <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> distance <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> ans<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法3(BFS)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">待写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="单源最短路建图方式"><a href="#单源最短路建图方式" class="headerlink" title="单源最短路建图方式"></a>单源最短路建图方式</h5><h5 id="单源最短路的综合应用"><a href="#单源最短路的综合应用" class="headerlink" title="单源最短路的综合应用"></a>单源最短路的综合应用</h5><h5 id="单源最短路的扩展应用"><a href="#单源最短路的扩展应用" class="headerlink" title="单源最短路的扩展应用"></a>单源最短路的扩展应用</h5><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images122C7E50BAA4A32D233AC8D4675DD601.png" alt=""></p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><strong>连通图</strong>：在无向图中，若任意两个顶点<code>vi</code>与<code>vj</code>都有路径相通，则称该无向图为连通图。</li><li><strong>强连通图</strong>：在有向图中，若任意两个顶点<code>vi</code>与<code>vj</code>都有路径相通，则称该有向图为强连通图。</li><li><strong>连通网</strong>：在连通图中，若图的边具有一定的意义，每一条边都对应着一个数，称为权；权代表着连接连个顶点的代价，称这种连通图叫做连通网。</li><li><strong>生成树</strong>：一个连通图的生成树是指一个连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边。一颗有n个顶点的生成树有且仅有n-1条边，如果生成树中再添加一条边，则必定成环。</li><li><strong>最小生成树</strong>：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。</li></ul><h4 id="朴素Prim"><a href="#朴素Prim" class="headerlink" title="朴素Prim"></a>朴素Prim</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>1、初始化所有点到集合中的最短距离为INF，然后遍历n次，将所有点都加入集合。</p><p>2、在每次遍历的时候，选取一个距离集合的距离最小的点加入集合，然后用这个点来更新其它未在集合中的点到集合的最小值。</p><h5 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> sum <span class="token operator">+=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// sum 在用t更新其它点之前更新，避免负环的影响</span>        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 用t来更新其它点到集合的距离</span>            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> mp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> mp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> mp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> INF<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>1、将所有边按照权重大小，从小到大排序 <code>O(mlogm)</code></p><p>2、枚举每条边，如果两个点所在的集合没有联通，则将这条边加入集合，使两个集合合并成一个集合(并查集)</p><h5 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    bool operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Edge<span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">// 运算符重载，也可以直接写一个cmp函数</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> w <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Edges<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>Edges<span class="token punctuation">,</span> Edges <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> Edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> Edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> w <span class="token operator">=</span> Edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cnt <span class="token operator">++</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> w<span class="token punctuation">;</span>            p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> INF<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> Edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">>></span> Edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">>></span> Edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images59B1EAC4E47F315555918F732D86BFDB.png" alt=""></p><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>二分图：</p><blockquote><p> 1、顶点集V可分割为两个互不相交的子集，并且图中每条边依附的两个顶点都分属于这两个互不相交的子集，两个子集内的顶点不相邻(百度百科)</p><p>2、图中换的边数为偶数，则可以将这个换分为两个不同的顶点集合，集合内没有边连接，集合间用这些边连接。</p></blockquote><h4 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h4><p>思路：</p><p>二分图中，一个连通块中边的数量为偶数，将整个连通块染色，如果没有出现矛盾则为二分图，出现矛盾则不是二分图。</p><p>模板：</p><h4 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h4>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> Prim </tag>
            
            <tag> Kruskal </tag>
            
            <tag> 染色法 </tag>
            
            <tag> 匈牙利算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA view GPU information</title>
      <link href="/posts/0/"/>
      <url>/posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="CUDA-view-GPU-information"><a href="#CUDA-view-GPU-information" class="headerlink" title="CUDA view GPU information"></a>CUDA view GPU information</h1><p>详细代码如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cuda_runtime.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"device_launch_parameters.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cudaDeviceProp deviceProp<span class="token punctuation">;</span>    <span class="token function">cudaGetDeviceProperties</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deviceProp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设备名称与型号: %s\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"显存大小: %d MB\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deviceProp<span class="token punctuation">.</span>totalGlobalMem <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"含有的SM数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"CUDA CORE数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"计算能力: %d.%d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>major<span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Parallel Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA Vector Addition</title>
      <link href="/posts/7c0a38a4/"/>
      <url>/posts/7c0a38a4/</url>
      
        <content type="html"><![CDATA[<h1 id="CUDA-Vector-Addition"><a href="#CUDA-Vector-Addition" class="headerlink" title="CUDA Vector Addition"></a>CUDA Vector Addition</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><p>1）安装 xshell</p><p>2）远程连接服务器，打开 jupyter 服务</p><p>3）网页进入对应的 jupyter 服务</p><h2 id="2-Launcher-的介绍"><a href="#2-Launcher-的介绍" class="headerlink" title="2 Launcher 的介绍"></a>2 Launcher 的介绍</h2><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20211118202650402.png" alt="Launcher introduction"></p><h2 id="3-查看-GPU-设备信息"><a href="#3-查看-GPU-设备信息" class="headerlink" title="3 查看 GPU 设备信息"></a>3 查看 GPU 设备信息</h2><p>1）点击 Text File</p><p>2）在其中输入对应的代码<br><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cuda_runtime.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"device_launch_parameters.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cudaDeviceProp deviceProp<span class="token punctuation">;</span>    <span class="token function">cudaGetDeviceProperties</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>deviceProp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设备名称与型号: %s\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"显存大小: %d MB\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deviceProp<span class="token punctuation">.</span>totalGlobalMem <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"含有的SM数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"CUDA CORE数量: %d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>multiProcessorCount <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"计算能力: %d.%d\n"</span><span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>major<span class="token punctuation">,</span> deviceProp<span class="token punctuation">.</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>3）重命名文件，后缀名改为 .cu</p><p>4）在 Terminal 中输入以下指令编译代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc filename.cu -o filename.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）在 Terminal 中输入一下指令运行可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./filename.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-向量加法的实现"><a href="#4-向量加法的实现" class="headerlink" title="4 向量加法的实现"></a>4 向量加法的实现</h2><p>1）点击 Text File</p><p>2）在其中输入对应的代码<br><code>CPU version</code><br><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">clock_t</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// initial</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// vector addition</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Vector addition on CPU use %.8f s.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>CUDA version</code><br><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cuda_runtime.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"device_launch_parameters.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion1</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion2</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion3</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">clock_t</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 在 host 端初始化数据</span>    <span class="token keyword">float</span> <span class="token operator">*</span>device_a<span class="token punctuation">,</span> <span class="token operator">*</span>device_b<span class="token punctuation">,</span> <span class="token operator">*</span>device_c <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在 device 分配内存</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在 device 分配内存</span>    <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_c<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在 device 分配内存</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 host 的数据拷贝到 device</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_b<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 host 的数据拷贝到 device</span>    additionKernelVersion1<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">ceil</span><span class="token punctuation">(</span>N <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>device_a<span class="token punctuation">,</span> device_b<span class="token punctuation">,</span> device_c<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 kernel 进行运算</span>    <span class="token comment">// additionKernelVersion2&lt;&lt;&lt;ceil(N / 32), 32>>>(device_a, device_b, device_c, size);  // 使用 kernel 进行运算</span>    <span class="token comment">// additionKernelVersion3&lt;&lt;&lt;ceil(N / 32), 32>>>(device_a, device_b, device_c, size);  // 使用 kernel 进行运算</span>    <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">,</span> cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 device 中的计算结果拷贝到 host</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>device_a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放 device 中的内存</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>device_b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放 device 中的内存</span>    <span class="token function">cudaFree</span><span class="token punctuation">(</span>device_c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放 device 中的内存</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Vector addition version 1 on GPU use %.8f s.\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// printf("Vector addition version 2 on GPU use %.8f s.\n", (float)(end - start) / CLOCKS_PER_SEC);</span>    <span class="token comment">// printf("Vector addition version 3 on GPU use %.8f s.\n", (float)(end - start) / CLOCKS_PER_SEC);</span><span class="token punctuation">&#125;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion1</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> B<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> C<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion2</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> B<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> C<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    C<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>__global__ <span class="token keyword">void</span> <span class="token function">additionKernelVersion3</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> B<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> C<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    C<span class="token punctuation">[</span>i <span class="token operator">+</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i <span class="token operator">+</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>i <span class="token operator">+</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>3）重命名文件，后缀名改为 .cu</p><p>4）在 Terminal 中输入以下指令编译代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc vector_addition.cu -o vector_addition.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）在 Terminal 中输入一下指令运行可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./vector_addition.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Parallel Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛进阶指南学习笔记</title>
      <link href="/posts/b68f41a0/"/>
      <url>/posts/b68f41a0/</url>
      
        <content type="html"><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><p>其中，第一位为1是负数</p><blockquote><p>[+1] = [0000 0001]原</p><p>[-1] = [1000 0001]原</p></blockquote><p>因此，8位二进制数的取值范围：[-127,127]</p><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>正数的补码是其本身</p><p>负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1(即在其反码的基础上+1)</p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><p>正数的反码是其本身</p><p>负数的反码是在其原码的基础上，符号位不变，其余各个位取反</p><blockquote><p>[+1] = [00000001]原 = [00000001]反</p><p>[-1] = [10000001]原 = [11111110]反</p></blockquote><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><p><code>memset(a, 0x3f, sizeof(a))</code> 给数组赋值 0x3f3f3f3f</p><p>赋值正无穷 INF = 0x3f3f3f3f 或者 INF = 0x3f</p><h4 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h4><p>左移：n &lt;&lt; x = n*2^x</p><p>右移：n &gt;&gt; x = n/2^x  (在C++中右移为算数右移，即移出去的位丢弃，空缺位用“符号位”来填充)</p><h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><h5 id="原理解释："><a href="#原理解释：" class="headerlink" title="原理解释："></a>原理解释：</h5><p><img src="https://img2020.cnblogs.com/blog/1852543/202101/1852543-20210120145456615-1978955513.png" alt=""></p><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> p<span class="token punctuation">,</span> t <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> t <span class="token operator">%</span> p<span class="token punctuation">;</span>        t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">%</span> p<span class="token punctuation">;</span>        k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><p><a href="https://www.acwing.com/problem/content/91/">AcWing 89. a^b</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>p<span class="token punctuation">;</span>    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>        a <span class="token operator">*=</span> a<span class="token punctuation">;</span>        a <span class="token operator">%=</span> p<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>res <span class="token operator">%</span> p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/92/">AcWing 90. 64位整数乘法</a></p><p>与快速幂原理相同，将一个乘数分解成二进制来表示，然后再相乘，防止溢出。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">%</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递推与递归"><a href="#递推与递归" class="headerlink" title="递推与递归"></a>递推与递归</h2><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://www.acwing.com/problem/content/94/">AcWing 92. 递归实现指数型枚举</a></p><p>位运算解法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归解法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">solve</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/95/">AcWing 93. 递归实现组合型枚举</a></p><p>需要剪枝</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">-</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">solve</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/96/">AcWing 94. 递归实现排列型枚举</a></p><p>在上一题的基础上修改一部分代码就行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//if (res.size() + n - res.back() + 1 &lt; n) return ;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">solve</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment">//res.push_back(0);</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h2><p><a href="https://www.acwing.com/problem/content/101/">AcWing 99. 激光炸弹</a></p><p>二维前缀和</p><p>根据容斥原理，可以推导出二维前缀和：<code>s[i][j]=s[i][j-1]+s[i-1][j]-s[i-1][j-1]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">5050</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> w<span class="token punctuation">;</span>        x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+=</span> w<span class="token punctuation">;</span><span class="token comment">//读数据，位置相同的点权值相加</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//以(0,0)为左下角的矩形求二维前缀和</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为炸弹影响r*r矩形的范围，根据容斥原理同样可以推导出ans=sum[i][j]-sum[i][j-r]-sum[i-r][j]+sum[i][j]，最后再取一个最大值就行</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/103/">AcWing 101. 最高的牛</a></p><p>简单的差分题，注意去重</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> vis<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> p <span class="token operator">>></span> h <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span> r<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        vis<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span> r<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p><a href="https://www.acwing.com/problem/content/104/">AcWing 102. 最佳牛围栏</a></p><p>二分出平均值，然后再用前缀和找出该平均值条件下的最大子段和，在利用这个最大子段和来确定二分方向</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> f<span class="token punctuation">;</span><span class="token keyword">double</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> min_value<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> f<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3000</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> eps<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 前缀和</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e8</span><span class="token punctuation">,</span> min_value <span class="token operator">=</span> <span class="token number">1e8</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> f<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            min_value <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_value<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> f<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min_value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维前缀和</title>
      <link href="/posts/b8859ab5/"/>
      <url>/posts/b8859ab5/</url>
      
        <content type="html"><![CDATA[<h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p>之前已经说过一维前缀和了，二位前缀和就是在此基础上拓展出来的。</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/cdn/blog-material/b8859ab5/1.png" style="zoom:80%;" /></p><div class="table-container"><table><thead><tr><th></th><th style="text-align:left">定义式</th><th>递推式</th></tr></thead><tbody><tr><td>一维前缀和</td><td style="text-align:left"><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images1.png" style="zoom: 80%;" /></td><td><code>S[i]=S[i-1]+a[i]</code></td></tr><tr><td>二维前缀和</td><td style="text-align:left"><img src="https://cdn.jsdelivr.net/gh/A-Egoist/cdn/blog-material/b8859ab5/1.png" style="zoom: 67%;" /></td><td><code>S[i][j]=S[i-1][j]+S[i][j-1]-S[i-1][j-1]+a[i][j]</code></td></tr></tbody></table></div><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><h3 id="引例："><a href="#引例：" class="headerlink" title="引例："></a>引例：</h3><p>对于一个给定的 n * m 的矩阵 a ，再给出 q 次操作，每次询问给定 x1 ，y1 ，x2 ， y2 ，k ，表示对(x1,y1)为左上角，(x2,y2)为右下角的子矩阵加 k ，最后再输出以(x1,y1)为左上角，(x2,y2)为右下角的子矩阵的所有元素的和。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>为了减少时间的消耗，我们可以利用差分的方式来对这q次操作进行存储，即利用差分的方式，因此我们需要构造一个二维的差分数组，我们用二维数组d来表示差分数组，那么每次操作，我们只需要对数组b进行如下操作</p><p><code>b[x1][y1]+=k;</code></p><p><code>b[x2+1][y2+1]+=k;</code></p><p><code>b[x2+1][y1]-=k;</code></p><p><code>b[x1][y2+1]-=k;</code></p><p>最后经过这个处理，在进行一起求前缀和即可得出答案。</p><h2 id="例题：Monitor"><a href="#例题：Monitor" class="headerlink" title="例题：Monitor"></a>例题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6514">Monitor</a></h2><p>（暂时还没有做，等我做了之后再上解析）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://acm.hdu.edu.cn/discuss/problem/list.php?problemid=6514">Monitor题解</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Sever 学习笔记——图形化创建数据库</title>
      <link href="/posts/fc45aa12/"/>
      <url>/posts/fc45aa12/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Sever-Management-Studio基础"><a href="#SQL-Sever-Management-Studio基础" class="headerlink" title="SQL Sever Management Studio基础"></a>SQL Sever Management Studio基础</h1><h2 id="启动连接到数据库服务器"><a href="#启动连接到数据库服务器" class="headerlink" title="启动连接到数据库服务器"></a>启动连接到数据库服务器</h2><p><img src="https://img-blog.csdnimg.cn/20201126154402488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>连接服务器之后可以看到界面的左侧如图所示：<br><img src="https://img-blog.csdnimg.cn/20201126154527220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>展开数据库选项卡后，可以看到已经存在的数据库：<br><img src="https://img-blog.csdnimg.cn/202011261546369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>右键单击“数据库”选项，选择“新建数据库”选项：<br><img src="https://img-blog.csdnimg.cn/20201126155206550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们根据需求依次修改“常规”、“选项”、“文件组”等信息。</p><h3 id="SQL-Server-数据库种类及文件"><a href="#SQL-Server-数据库种类及文件" class="headerlink" title="SQL Server 数据库种类及文件"></a>SQL Server 数据库种类及文件</h3><p>在上面新建数据库的过程中，我们需要对数据库文件进行命名，在此之前我们就需要了解到数据库文件的种类。<br>文件分为两种，分别是数据文件(.mdf | .ndf)和日志文件(.ldf)，其中.mdf文件是主数据文件，一个数据库中有且仅有一个.mdf文件；.ndf是辅助数据文件，一个数据库中可以有零个或多个；.ldf是日志文件，其用于存放对数据库的操作记录，一个数据库可以包含一个或多个。</p><h3 id="数据库文件组"><a href="#数据库文件组" class="headerlink" title="数据库文件组"></a>数据库文件组</h3><p>1）<font color=red size=4 >主文件组</font>。包含主数据文件和未指明组的其他文件。<br>2）<font color=red size=4 >次文件组</font>。也称用户自定义文件组，是由用户首次创建或修改数据库时自定义的。其目的在于数据分配，以提高数据库的读写效率。<br>3）<font color=red size=4 >默认文件组</font>。各数据库都有一个被指定的默认文件组。若在数据库创建对象时没有指定其所属的文件组时，则将分配给默认文件组。</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>在我们创建好数据库之后，我们就可以可以根据关系在数据库中创建表了，步骤如下：<br>首先我们打开我们创建好的数据库：<br><img src="https://img-blog.csdnimg.cn/20201126163925747.png#pic_center" alt="在这里插入图片描述"><br>然后，我们右键单击“表”，选择“新建”，再选择“表”，结果如图所示：<br><img src="https://img-blog.csdnimg.cn/20201126164304458.png#pic_center" alt="在这里插入图片描述"></p><h4 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h4><p>在创建好表之后，我们就可以根据表结构来创建对应的属性，以及设置一些基本的要求。如：选择数据类型，选择字符型长度，是否允许NULL值<br><img src="https://img-blog.csdnimg.cn/20201126164836725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在设计好这些基本的要求后，我们可以选择保存，并对表进行命名。<br><img src="https://img-blog.csdnimg.cn/2020112616502731.png#pic_center" alt="在这里插入图片描述"><br>如果想在保存之后再次修改表格内容并保存，我们需要修改设置：<br>点击左上角的“工具”，选择“选项”，按照图中的指示，找到“阻止保存要求重新创建表的更改”，取消前面的“√”<br><img src="https://img-blog.csdnimg.cn/20201126165446407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h4><p>1）主键约束<br><img src="https://img-blog.csdnimg.cn/20201126170006530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2）默认值约束<br><img src="https://img-blog.csdnimg.cn/20201126170102849.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201126170135170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3）NULL约束<br><img src="https://img-blog.csdnimg.cn/20201126170211208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>4）唯一性约束<br><img src="https://img-blog.csdnimg.cn/2020112617023867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201126170405295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>5）检查约束<br><img src="https://img-blog.csdnimg.cn/20201126170431501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>根据需求填写约束表达式<br><img src="https://img-blog.csdnimg.cn/2020112617050726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>6）外键约束<br><img src="https://img-blog.csdnimg.cn/20201126170617817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201126170651156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p><img src="https://img-blog.csdnimg.cn/20201126171030154.png#pic_center" alt="在这里插入图片描述"><br>右键单击需要修改的表，再选择“设计”选项，就可以按照之前的步骤对表进行修改。</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><img src="https://img-blog.csdnimg.cn/20201126171214391.png#pic_center" alt="在这里插入图片描述"><br>右键单击需要删除的表，选择“删除”选项，在确认之后就可以对表进行删除操作。</p><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>选择需要修改的数据库，右键单击选择“属性”，即可对数据库做出修改。<br><img src="https://img-blog.csdnimg.cn/2020112617144576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>选择需要删除的数据库，右键单击选择“删除”，在确认后即可删除数据库。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server 学习笔记——T-SQL</title>
      <link href="/posts/4c74c080/"/>
      <url>/posts/4c74c080/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL学习笔记"><a href="#SQL学习笔记" class="headerlink" title="SQL学习笔记"></a>SQL学习笔记</h1><h2 id="一、SQL概述"><a href="#一、SQL概述" class="headerlink" title="一、SQL概述"></a>一、SQL概述</h2><p>SQL按其功能可以分为三大部分：</p><font color=green size=5 >数据定义</font>功能、<font color=green size=5 >数据操纵</font>功能和<font color=green size=5 >数据控制</font>功能DDL、DML、DCL| SQL功能  | 命令动词                       || -------- | ------------------------------ || 数据定义 | CREATE、ALTER、DROP            || 数据操纵 | SELECT、INSERT、UPDATE、DELETE || 数据控制 | GRANT、REVOKE                  |## 二、SQL数据定义在SQL Server中，我们点击“新建查询”，在弹出的窗口中键入sql语言![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129135250537.png)### 1、创建数据库基本格式：![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129131947144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)样例：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> Demo<span class="token keyword">ON</span><span class="token punctuation">(</span>NAME<span class="token operator">=</span>Demo_data<span class="token punctuation">,</span><span class="token comment">--主文件名称</span>FILENAME<span class="token operator">=</span><span class="token string">'D:\Test\Demo_data.mdf'</span><span class="token punctuation">,</span><span class="token comment">--主文件的绝对路径</span>SIZE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">--主文件的大小</span>MAXSIZE<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">--最大值</span>FILEGROWTH<span class="token operator">=</span><span class="token number">1</span><span class="token comment">--数值型增长方式 </span><span class="token comment">--FILEGROWTH=10%--百分比增长</span><span class="token punctuation">)</span>LOG <span class="token keyword">ON</span><span class="token punctuation">(</span>NAME<span class="token operator">=</span>Demo_log<span class="token punctuation">,</span><span class="token comment">--日志文件名称</span>FILENAME<span class="token operator">=</span><span class="token string">'D:\Test\Demo_log.ldf'</span><span class="token punctuation">,</span><span class="token comment">--日志文件的绝对路径</span>SIZE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">--日志文件的大小</span>MAXSIZE<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">--最大值</span>FILEGROWTH<span class="token operator">=</span><span class="token number">1</span><span class="token comment">--数值型增长方式 </span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>效果：![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129130955662.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129131113123.png)### 2、修改数据库修改数据库名：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> Demo<span class="token keyword">MODIFY</span> NAME<span class="token operator">=</span>New_Demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129132917899.png)修改文件名：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> New_Demo <span class="token keyword">MODIFY</span> <span class="token keyword">FILE</span><span class="token punctuation">(</span>NAME<span class="token operator">=</span>Demo_data<span class="token punctuation">,</span>NEWNAME<span class="token operator">=</span>Demo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129133300677.png)添加新文件：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> New_Demo<span class="token keyword">ADD</span> <span class="token keyword">FILE</span><span class="token punctuation">(</span>NAME <span class="token operator">=</span> Demo_ndf<span class="token punctuation">,</span>FILENAME <span class="token operator">=</span> <span class="token string">'D:\Test\Demo_ndf.ndf'</span><span class="token punctuation">,</span>SIZE <span class="token operator">=</span> <span class="token number">5</span>MB<span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> <span class="token number">10</span>MB<span class="token punctuation">,</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">1</span>MB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129133905996.png)添加日志文件<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> New_Demo<span class="token keyword">ADD</span> LOG <span class="token keyword">FILE</span><span class="token punctuation">(</span>NAME <span class="token operator">=</span> Demo_new_log<span class="token punctuation">,</span>FILENAME <span class="token operator">=</span> <span class="token string">'D:\Test\Demo_new_log.ldf'</span><span class="token punctuation">,</span>SIZE <span class="token operator">=</span> <span class="token number">1</span>MB<span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> <span class="token number">10</span>MB<span class="token punctuation">,</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">1</span>MB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 3、删除数据库<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> 数据库<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>数据库<span class="token number">2</span>，数据库<span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">--可以同时删除多个数据库</span><span class="token comment">--但是用sql语句删除数据库的时候不会有确认信息，所以请小心使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>### 4、创建基本表定义基本表的一般格式：![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129134608274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)<font color=red size=6>warning</font>在SQL Server 建立新建查询的时候注意手动选择数据库![在这里插入图片描述](https://img-blog.csdnimg.cn/2020112913504458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)样例：![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129135406729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)根据上图所示内容，我们可以创建一个Student表：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Student<span class="token punctuation">(</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Sage <span class="token keyword">tinyint</span><span class="token punctuation">,</span>Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129135622277.png)在上面的例子中，我们创建表格的时候没有确立约束条件。一个表的约束条件分为两类：<font color=blue size=5>列级约束条件</font>和<font color=blue size=5>表级约束条件</font>。#### 1)列级约束条件![在这里插入图片描述](https://img-blog.csdnimg.cn/2020112914000774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token comment">--取值非空</span>Sage <span class="token keyword">tinyint</span> <span class="token keyword">DEFAULT</span> <span class="token number">18</span><span class="token comment">--默认值约束</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token comment">--限制列取值不重复</span>Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Sdept<span class="token operator">=</span><span class="token string">'CS'</span> <span class="token operator">OR</span> Sdept<span class="token operator">=</span><span class="token string">'IS'</span><span class="token punctuation">)</span><span class="token comment">--限制列的取值范围</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token comment">--指定本列为主码</span>Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Sdept<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> SC<span class="token punctuation">(</span>Sdept<span class="token punctuation">)</span><span class="token comment">--外码约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#### 2)表级约束条件UNIQUE表级约束：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">)</span><span class="token comment">--表示(Sno,Sname)这样的组合不允许重复</span><span class="token comment">--但是在Sno或Sname的列中可以重复</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>PRIMARY表级约束：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token comment">--和在Sno进行列定义相同</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">)</span><span class="token comment">--以(Sno,Sname)这样的组合作为表的主码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>#### 3)实例![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129142101770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Student<span class="token punctuation">(</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>Ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Ssex<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">OR</span> Ssex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Sage <span class="token keyword">tinyint</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Sage<span class="token operator">>=</span><span class="token number">15</span> <span class="token operator">AND</span> Sage<span class="token operator">&lt;=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'计算机系'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129143229352.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129142126453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Course<span class="token punctuation">(</span>Cno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Cname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>Ccredit <span class="token keyword">tinyint</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Ccredit<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Semester <span class="token keyword">tinyint</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Semester<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Period <span class="token keyword">int</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Period<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129143241897.png)![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129142141266.png)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SC<span class="token punctuation">(</span>Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>Cno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>Grade <span class="token keyword">tinyint</span><span class="token punctuation">,</span><span class="token keyword">CHECK</span><span class="token punctuation">(</span>Grade<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">AND</span> Grade <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Cno<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020112914320043.png)### 5、修改基本表在定义完表之后，我们还可能需要修改表的结构，修改表的方法如下：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020112914412058.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--在SC表中添加XKLB列--添加新列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SC<span class="token keyword">ADD</span> XKLB <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">--将XKLB的类型改为char(6)--修改列定义</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SC<span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> XKLB <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">--删除Course表的Period列--删除列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Course<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> Period<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>约束添加：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--添加主码约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SC<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> PK_SC <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token comment">--ADD CONSTRAINT 约束名 PRIMARY KEY(列名)</span><span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> PK_SC <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Cno<span class="token punctuation">)</span><span class="token comment">--表级约束</span><span class="token comment">--添加唯一性约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Course<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> UK_C <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token comment">--ADD CONSTRAINT 约束名 UNIQUE(列名[,列名1,列名2···])</span><span class="token comment">--添加外键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SC<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> FK_SC <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token comment">--ADD CONSTRAINT 约束名FOREIGN KEY(列名) REFERENCES 引用表名(列名)</span><span class="token comment">--添加默认值约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SC<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> DF_SC <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">FOR</span> Grade<span class="token comment">--ADD CONSTRAINT 约束名 DEFAULT 默认值 FOR 列名</span><span class="token comment">--添加检查约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Student<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> CK_S <span class="token keyword">CHECK</span><span class="token punctuation">(</span>Sage<span class="token operator">></span><span class="token number">15</span> <span class="token operator">AND</span> Sage<span class="token operator">&lt;</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment">--ADD CONSTRAINT 约束名 CHECK(约束表达式)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6、删除基本表<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>表<span class="token number">2</span><span class="token punctuation">,</span>表<span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> Student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>## 三、SQL数据操纵### 1、数据查询查询语句是数据库使用中最基本和最重要的语句之一，其功能是从数据中检索满足条件的数据。数据来源可以是一张表、多张表或者视图。查询结果是关系。语句格式：![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129155730737.png)#### 1)简单查询<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询指定列</span><span class="token keyword">SELECT</span> Sno<span class="token punctuation">,</span>Sname <span class="token keyword">FROM</span> Student<span class="token comment">--查询所有列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student<span class="token comment">--查询经过计算的列</span><span class="token keyword">SELECT</span> Sname<span class="token punctuation">,</span><span class="token number">2020</span><span class="token operator">-</span>Sage <span class="token keyword">FROM</span> Student<span class="token comment">--第二列列名为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#### 2)改变列标题①：`列名 | 表达式 [AS] 列别名`②：`列别名 = 列名 | 表达式`<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sname 姓名<span class="token punctuation">,</span><span class="token number">2020</span><span class="token operator">-</span>Sage <span class="token keyword">AS</span> 出身年份 <span class="token keyword">FROM</span> Student<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#### 3)选择表中若干行<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sno <span class="token keyword">FROM</span> SC<span class="token comment">--等价于</span><span class="token keyword">SELECT</span> <span class="token keyword">ALL</span> Sno <span class="token keyword">FROM</span> SC<span class="token comment">--在SELECT中缺省则为ALL</span><span class="token comment">--DISTINCT关键字可以去重</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> Sno <span class="token keyword">FROM</span> SC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#### 4)`WHERE`用于查询满足条件的元组![在这里插入图片描述](https://img-blog.csdnimg.cn/20201129160848518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nlc2FyZUJvcmdpYQ==,size_16,color_FFFFFF,t_70)<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--比较</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sdept<span class="token operator">=</span><span class="token string">'IS'</span><span class="token keyword">SELECT</span> Sname<span class="token punctuation">,</span>Sage <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sage<span class="token operator">&lt;</span><span class="token number">20</span><span class="token keyword">SELECT</span> Sname<span class="token punctuation">,</span>Sage <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> Sage<span class="token operator">>=</span><span class="token number">20</span><span class="token comment">--范围</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sage <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">23</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sage<span class="token operator">>=</span><span class="token number">20</span> <span class="token operator">AND</span> Sage<span class="token operator">&lt;=</span><span class="token number">23</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sage <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">23</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sage<span class="token operator">&lt;</span><span class="token number">20</span> <span class="token operator">OR</span> Sage<span class="token operator">></span><span class="token number">23</span><span class="token comment">--集合</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sdept <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token string">'IS'</span><span class="token punctuation">,</span><span class="token string">'MA'</span><span class="token punctuation">,</span><span class="token string">'CS'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sdept <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token string">'IS'</span><span class="token punctuation">,</span><span class="token string">'MA'</span><span class="token punctuation">,</span><span class="token string">'CS'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#### 5)字符串匹配在字符匹配中有四种通配符：`_`：匹配任意一个字符`%`：匹配0个或多个字符`[]`：匹配`[]`中的任意一个字符`[^]`：不匹配`[]`中的任意一个字符<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sno <span class="token operator">LIKE</span> <span class="token string">'200215121'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sname <span class="token operator">LIKE</span> <span class="token string">'王%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sname <span class="token operator">LIKE</span> <span class="token string">'[张刘李]%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sno <span class="token operator">LIKE</span> <span class="token string">'%[^235]'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sno <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">'%[235]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>#### 6)涉及空值的查询空值(`NULL`)在数据库中有特殊的含义，代表不确定的值判断某个值是否为`NULL`，只能用专门的判断`NULL`值的子句来完成`IS NULL`、`IS NOT NULL`<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sno <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Grade <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">SELECT</span> Sno <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Grade <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>#### 7)多重条件查询运用`AND`和`OR`俩简介查询多个查询条件其中`AND`的优先级高于`OR`<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> Sdept<span class="token operator">=</span><span class="token string">'IS'</span> <span class="token operator">AND</span> Sage<span class="token operator">&lt;</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#### 8)`ORDER BY``ORDER BY <列名> [ASC | DESC][,<列名>···]`可以按一个或多个属性列排序`ASC`：升序、`DESC`降序、缺省值为升序当排序列含空值时：`ASC`：排序列为空值的元组最先显示`DESC`：排序列为空值的元组最后显示<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sno<span class="token punctuation">,</span>Grade <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Cno<span class="token operator">=</span><span class="token string">'3'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Grade <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#### 9)TOP限制结果集<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> Sname<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Sdept <span class="token keyword">FROM</span> Student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Sage <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#### 10)聚集函数聚集函数也称为集合函数或聚合函数、计算函数，其作用是对一组值进行计算并返回一个单值。SQL提供的聚合函数有：`COUNT(*)`：统计表中元组个数`COUNT(<列名>)`：统计本列列值个数`SUM(<列名>)`：计算列值综合`AVG(<列名>)`：计算列值平均值`MAX(<列名>)`：求列值最大值`MIN(<列名>)`：求列值最小值除`COUNT(*)`外，其他函数在计算过程中均忽略`NULL`值<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 总人数 <span class="token keyword">FROM</span> Student<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> 选课人数 <span class="token keyword">FROM</span> SC<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span> 总成绩 <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Sno<span class="token operator">=</span><span class="token string">'95122'</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span> 平均成绩 <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Cno<span class="token operator">=</span><span class="token string">'C01'</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span> 最高分 <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Cno<span class="token operator">=</span><span class="token string">'C01'</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span> 最低分 <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Cno<span class="token operator">=</span><span class="token string">'C01'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><font color=red>聚合函数不能出现在WHERE子句中</font>#### 11)`GROUP BY``GROUP BY`可将计算控制在组一级，分组的目的是细化计算函数的作用对象分组语句位置在`WHERE`子句的后边，一般形式为：`GROUP BY <分组依据列>``[HAVING <组过滤条件>]`<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Cno 课程号<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> 选课人数 <span class="token keyword">FROM</span> SC <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Cno<span class="token keyword">SELECT</span> Sno 学号<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> 选课门数<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span> 平均成绩 <span class="token keyword">FROM</span> SC <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Sno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><font size=6 color=blue>暂时只学到了这里，之后再更新o(╥﹏╥)o</font><h4 id="12-其他"><a href="#12-其他" class="headerlink" title="12)其他"></a>12)其他</h4><h3 id="2、数据更改"><a href="#2、数据更改" class="headerlink" title="2、数据更改"></a>2、数据更改</h3><h2 id="四、SQL数据控制"><a href="#四、SQL数据控制" class="headerlink" title="四、SQL数据控制"></a>四、SQL数据控制</h2>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LaTex入门笔记</title>
      <link href="/posts/f43198be/"/>
      <url>/posts/f43198be/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTex入门笔记"><a href="#LaTex入门笔记" class="headerlink" title="LaTex入门笔记"></a>LaTex入门笔记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早之前写博客的时候就用LaTex写数学公式了，但是一直没有系统的学习过LaTex，正好逻辑代数的实验报告推荐使用LaTex编写，那我就开始系统的学习一边LaTex了。</p><p>不得不说在用过LaTex之后对Word的排版是真的难以忍受了。但是现在对于我来说用纯LaTex写实验报告之类的还是太慢了，所以现阶段我都是用md+LaTex编写的。</p><p>话说，用md写LaTex的入门笔记是不是不太行(╥╯^╰╥)</p><h2 id="LaTex的安装与配置"><a href="#LaTex的安装与配置" class="headerlink" title="LaTex的安装与配置"></a>LaTex的安装与配置</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/38178015">使用VSCode编写LaTeX</a></p><h2 id="LaTex基础"><a href="#LaTex基础" class="headerlink" title="LaTex基础"></a>LaTex基础</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>LaTex 语言是以反斜杠 <code>\</code> 开头的宏标记语言</p><p>注释以<code>%</code> 开头，若需要输入 <code>%</code> 则需要用 <code>\</code> 进行转义</p><p>按照惯例，输出一个 <code>Hello world</code></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span><span class="token comment">%文章类型为article，此外除了article之外还有：book，report</span><span class="token comment">%导言区</span><span class="token comment">%你可以将导言区理解为是对整篇文档进行设置的区域</span><span class="token comment">%在导言区出现的控制序列，往往会影响整篇文档的格式。</span><span class="token comment">%比如，我们通常在导言区设置页面大小、页眉页脚样式、章节标题样式等等。</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token comment">%文章开始的部分，只有位于document中的内容才会在PDF文件中显示</span>    Hello, world!<span class="token comment">%我们需要在PDF文件中显示的内容</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token comment">%文章的结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在LaTex中 <code>\begin</code> 和 <code>\end</code> 成对出现，两者之间的内容被称为<strong>环境</strong>，两者之后的第一个参数总是一致的，被称作环境名。</p><p>在VSCode中我们写好上面的代码之后就可以点击<img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210329204354659.png" alt="image-20210329204354659">，从而将tex文件编译成PDF文件。然后我们就可以点击<code>View LaTex PDF</code>中的选项来查看编译结果。</p><h3 id="组织文章"><a href="#组织文章" class="headerlink" title="组织文章"></a>组织文章</h3><h4 id="文档类型选择"><a href="#文档类型选择" class="headerlink" title="文档类型选择"></a>文档类型选择</h4><p>因为现在我主要用LaTex排版的内容是中文，因此我所需要使用的宏对中文的支持必须非常好，因此我在这里推荐是用CTeX，使用方法为：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8, c5size<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctex</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CTeX 宏集提供了四个中文文档类：ctexart、ctexrep、ctexbook和ctexbeamer，分别对应 LaTeX 的标准文档类article、report、book和beamer。</p><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>在CTeX宏包中，默认的正常字体是宋体，粗体是黑体，意大利体是楷体。</p><p>我们也可以通过使用<code>&#123;\songti ......&#125;</code>来修改字体</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token punctuation">&#123;</span><span class="token function selector">\songti</span> 什么是半加器和全加器？各自有何特点？<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\heiti</span> 什么是半加器和全加器？各自有何特点？<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\fangsong</span> 什么是半加器和全加器？各自有何特点？<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\kaishu</span> 什么是半加器和全加器？各自有何特点？<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>关于更加详细的字体介绍可以看看这本手册：<a href="https://www.moonpapers.com/manual/latex/basic/text/typeface/use.html">字体使用</a></p><h4 id="设置字号"><a href="#设置字号" class="headerlink" title="设置字号"></a>设置字号</h4><h5 id="局部修改字号"><a href="#局部修改字号" class="headerlink" title="局部修改字号"></a>局部修改字号</h5><p>对于字体的大小在LaTex中有很多命令来操纵：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\Huge</span><span class="token function selector">\huge</span><span class="token function selector">\LARGE</span><span class="token function selector">\Large</span><span class="token function selector">\large</span><span class="token function selector">\normalsize</span> (default)<span class="token function selector">\small</span><span class="token function selector">\footnotesize</span><span class="token function selector">\scriptsize</span><span class="token function selector">\tiny</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些命令对应字体的大小和默认字体有关，具体对应关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images14174754-267e8aa705533a74.png" alt="img"></p><h5 id="全局修改字号"><a href="#全局修改字号" class="headerlink" title="全局修改字号"></a>全局修改字号</h5><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>c5size<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token comment">%直接在\documentclass后面添加相应的字体大小即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于字号的详细信息可以看看这篇博客：<a href="https://www.jianshu.com/p/68da21a1501a">latex 字体设置</a></p><h4 id="设置行间距"><a href="#设置行间距" class="headerlink" title="设置行间距"></a>设置行间距</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\setlength</span><span class="token punctuation">&#123;</span><span class="token function selector">\baselineskip</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>20pt<span class="token punctuation">&#125;</span><span class="token comment">%20pt表示行间距大小为20磅</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于LaTex长度单位可以看这篇博客：<a href="http://blog.sina.com.cn/s/blog_5e16f1770100fve8.html">LaTeX技巧18：LaTeX的长度单位入门</a></p><h4 id="作者、标题、日期"><a href="#作者、标题、日期" class="headerlink" title="作者、标题、日期"></a>作者、标题、日期</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\title</span><span class="token punctuation">&#123;</span>你好，LaTex!<span class="token punctuation">&#125;</span><span class="token comment">%标题</span><span class="token function selector">\author</span><span class="token punctuation">&#123;</span>A-Egoist<span class="token punctuation">&#125;</span><span class="token comment">%作者</span><span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span><span class="token comment">%时间</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\maketitle</span><span class="token comment">%将在导言区中定义的标题、作者、日期按照预定的格式展现出来</span><span class="token comment">%\tableofcontents%设置目录，但是需要进行两次编译才能体现出效果</span>你好，world!<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="章节和段落"><a href="#章节和段落" class="headerlink" title="章节和段落"></a>章节和段落</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8, c5size<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">lipsum</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\centering</span><span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">\songti 什么是半加器和全加器？各自有何特点？</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">半加器(half-adder)</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">概述</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">原理</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">全加器(full-adder)</span><span class="token punctuation">&#125;</span><span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">根据组合逻辑电路设计步骤，设计半加器和全加器，并在Logisim中仿真。</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210331145215340.png" style="zoom:80%;" /></p><p>在文档类 <code>article</code>/<code>ctexart</code> 中，定义了五个控制序列来调整行文组织结构。他们分别是</p><ul><li><code>\section&#123;·&#125;</code></li><li><code>\subsection&#123;·&#125;</code></li><li><code>\subsubsection&#123;·&#125;</code></li><li><code>\paragraph&#123;·&#125;</code></li><li><code>\subparagraph&#123;·&#125;</code></li></ul><blockquote><p>在<code>report</code>/<code>ctexrep</code>中，还有<code>\chapter&#123;·&#125;</code>；在文档类<code>book</code>/<code>ctexbook</code>中，还定义了<code>\part&#123;·&#125;</code>。</p></blockquote><h4 id="插入目录"><a href="#插入目录" class="headerlink" title="插入目录"></a>插入目录</h4><p>在上一节的文档中，找到 <code>\maketitle</code>，在它的下面插入控制序列 <code>\tableofcontents</code>，保存并用 XeLaTeX 编译<strong>两次</strong></p><blockquote><p>第一次编译的时候和之前没有什么区别<br>但是当第二次编译的时候会在时间下方多出一个目录</p></blockquote><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8, c5size<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\maketitle</span>    <span class="token function selector">\tableofcontents</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>LaTeX 将一个换行当做是一个简单的空格来处理，如果需要换行另起一段，则需要用两个换行（一个空行）来实现。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">简单来说半加器就是一个两输入两输出、只能进行两个一位二进制加法的器件，因为两输入两输出的特性使得半加器不需要考虑低位的进位。<span class="token comment">%这样没有达到换行的目的</span><span class="token comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>简单来说半加器就是一个两输入两输出、只能进行两个一位二进制加法的器件，因为两输入两输出的特性使得半加器不需要考虑低位的进位。<span class="token comment">%这样才是换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入数学公式"><a href="#插入数学公式" class="headerlink" title="插入数学公式"></a>插入数学公式</h3><p>LaTeX 的数学模式有两种：行内模式 (inline) 和行间模式 (display)。前者在正文的行文中，插入数学公式；后者独立排列单独成行，并自动居中。</p><p>在行文中，使用 <script type="math/tex">...</script> 可以插入行内公式，使用 <code>\[ ... \]</code> 可以插入行间公式，如果需要对行间公式进行编号，则可以使用 <code>equation</code> 环境。</p><blockquote><p>行内公式也可以使用 <code>\(...\)</code> 或者 <code>\begin&#123;math&#125; ... \end&#123;math&#125;</code> 来插入，但略显麻烦。<br>无编号的行间公式也可以使用 <code>\begin&#123;displaymath&#125; ... \end&#123;displaymath&#125;</code> 或者 <code>\begin&#123;equation*&#125; ... \end&#123;equation*&#125;</code> 来插入，但略显麻烦。（<code>equation*</code> 中的 <code>*</code> 表示环境不编号）<br>也有 plainTeX 风格的 $$$ … $$$ 来插入不编号的行间公式。但是在 LaTeX 中这样做会改变行文的默认行间距，不推荐。</p></blockquote><p>在使用数学公式之前，我们需要导入包：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">amsmath</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h4><p>行内公式只需要放在两个$直接就行。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$S = 1$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="行间公式"><a href="#行间公式" class="headerlink" title="行间公式"></a>行间公式</h4><p>行间公式有两种一种是放在$$$…$$$中，还有一种是放在<code>\[...\]</code>中，推荐使用第二种。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">\[<span class="token equation-command regex">\begin</span>&#123;aligned&#125;    S =&amp; <span class="token equation-command regex">\bar</span>&#123;A&#125;<span class="token equation-command regex">\bar</span>&#123;B&#125;Cin + <span class="token equation-command regex">\bar</span>&#123;A&#125;B<span class="token equation-command regex">\bar</span>&#123;Cin&#125; + A<span class="token equation-command regex">\bar</span>&#123;B&#125;<span class="token equation-command regex">\bar</span>&#123;Cin&#125; + ABCin <span class="token equation-command regex">\\</span>    =&amp; (<span class="token equation-command regex">\bar</span>&#123;A&#125;<span class="token equation-command regex">\bar</span>&#123;B&#125; + AB)Cin + (<span class="token equation-command regex">\bar</span>&#123;A&#125;B + A<span class="token equation-command regex">\bar</span>&#123;B&#125;)<span class="token equation-command regex">\bar</span>&#123;Cin&#125; <span class="token equation-command regex">\\</span>    =&amp; (A<span class="token equation-command regex">\odot</span> B)Cin + (A<span class="token equation-command regex">\oplus</span> B)<span class="token equation-command regex">\bar</span>&#123;Cin&#125; <span class="token equation-command regex">\\</span>    =&amp; A <span class="token equation-command regex">\oplus</span> B <span class="token equation-command regex">\oplus</span> Cin<span class="token equation-command regex">\end</span>&#123;aligned&#125;\]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于数学公式的符号可以用用这个网站：<a href="https://latexlive.com/">LaTeX公式编辑器</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>在插入图片前，我们需要导入相关的包</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">graphicx</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="插入一张图片"><a href="#插入一张图片" class="headerlink" title="插入一张图片"></a>插入一张图片</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">电路图</span><span class="token punctuation">&#125;</span>    如图<span class="token function selector">\ref</span><span class="token punctuation">&#123;</span><span class="token keyword">half-adder-logisim-1</span><span class="token punctuation">&#125;</span>所示。<span class="token comment">%\ref 表示引用图片或者表格</span>    <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span><span class="token comment">%在这个区间放入图片</span>        <span class="token function selector">\centering</span>        <span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>width = .5<span class="token function selector">\textwidth</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>half-adder-1.png<span class="token punctuation">&#125;</span><span class="token comment">%[]中表示图片显示大小，&#123;&#125;中填入图片地址    </span>        <span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>half-adder<span class="token punctuation">&#125;</span><span class="token comment">%设置图片名称</span>        <span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">half-adder-logisim-1</span><span class="token punctuation">&#125;</span><span class="token comment">%创建标签名，在之后就可以使用\ref&#123;标签名&#125;引用图片</span>    <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210331123709331.png" alt="image-20210331123709331"><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210331123725694.png" alt="image-20210331123725694"></p><h4 id="在一排中插入两张图片"><a href="#在一排中插入两张图片" class="headerlink" title="在一排中插入两张图片"></a>在一排中插入两张图片</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span>    <span class="token function selector">\centering</span>    <span class="token comment">%一个subfigure就表示一张子图</span>    <span class="token function selector">\subfigure</span><span class="token punctuation">[</span>half-adder-alter<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>        <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>7cm<span class="token punctuation">&#125;</span>        <span class="token function selector">\centering</span>        <span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=0.4<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>half-adder-2.png<span class="token punctuation">&#125;</span>        <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token comment">%</span>    <span class="token punctuation">&#125;</span><span class="token comment">%</span>    <span class="token function selector">\subfigure</span><span class="token punctuation">[</span>full-adder-alter<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>        <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>7cm<span class="token punctuation">&#125;</span>        <span class="token function selector">\centering</span>        <span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=0.3<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>full-adder-2.png<span class="token punctuation">&#125;</span>        <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">minipage</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>根据芯片的结构改装之后的Logisim图<span class="token punctuation">&#125;</span>    <span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">alter</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210331130527907.png" alt="image-20210331130527907"></p><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>在插入表格前，我们需要导入相关的包</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">booktabs</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="普通表格"><a href="#普通表格" class="headerlink" title="普通表格"></a>普通表格</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>llll<span class="token punctuation">&#125;</span><span class="token comment">%表示有4列左对齐的数据</span>        <span class="token function selector">\hline</span>        姓名<span class="token punctuation">&amp;</span>name<span class="token punctuation">&amp;</span>学号<span class="token punctuation">&amp;</span>id<span class="token function selector">\\</span>        <span class="token function selector">\hline</span>        专业<span class="token punctuation">&amp;</span>cs<span class="token punctuation">&amp;</span>年级<span class="token punctuation">&amp;</span>grade<span class="token function selector">\\</span>        <span class="token function selector">\hline</span>    <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三线法"><a href="#三线法" class="headerlink" title="三线法"></a>三线法</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span>    <span class="token function selector">\centering</span>    <span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>Half-adder Truth Table<span class="token punctuation">&#125;</span><span class="token comment">%设置表格名称</span>    <span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">half-adder-1</span><span class="token punctuation">&#125;</span><span class="token comment">%创建标签名，在之后就可以使用\ref&#123;标签名&#125;引用表格</span>    <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>cccc<span class="token punctuation">&#125;</span><span class="token comment">%三线法绘制表格，&#123;&#125;中的字母表示每一列左对齐(l)，居中(c)，右对齐(r)，一个字母对应一列</span>        <span class="token function selector">\toprule</span>        A<span class="token punctuation">&amp;</span>B<span class="token punctuation">&amp;</span>S<span class="token punctuation">&amp;</span>Cout <span class="token function selector">\\</span>        <span class="token function selector">\midrule</span>        0<span class="token punctuation">&amp;</span>0<span class="token punctuation">&amp;</span>0<span class="token punctuation">&amp;</span>0 <span class="token function selector">\\</span>        0<span class="token punctuation">&amp;</span>1<span class="token punctuation">&amp;</span>1<span class="token punctuation">&amp;</span>0 <span class="token function selector">\\</span>        1<span class="token punctuation">&amp;</span>0<span class="token punctuation">&amp;</span>1<span class="token punctuation">&amp;</span>0 <span class="token function selector">\\</span>        1<span class="token punctuation">&amp;</span>1<span class="token punctuation">&amp;</span>0<span class="token punctuation">&amp;</span>1 <span class="token function selector">\\</span>        <span class="token function selector">\bottomrule</span>    <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">table</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210331124046483.png" alt="image-20210331124046483"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文是我个人在学习和使用LaTex过程中的学习笔记，同时也可以作为新手的一个简单入门指南和教程，本文参考了很多大佬的博客，文章。这些都放在参考资料中了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.moonpapers.com/manual/">LaTex手册</a></p><p><a href="https://liam.page/2014/09/08/latex-introduction/">一份其实很短的 LaTeX 入门文档</a></p><p><a href="https://www.jianshu.com/p/68da21a1501a">latex 字体设置</a></p>]]></content>
      
      
      <categories>
          
          <category> LaTex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 706 (Div. 2)</title>
      <link href="/posts/682df6fc/"/>
      <url>/posts/682df6fc/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-706-Div-2"><a href="#Codeforces-Round-706-Div-2" class="headerlink" title="Codeforces Round #706 (Div. 2)"></a><a href="https://codeforces.com/contest/1496">Codeforces Round #706 (Div. 2)</a></h1><h2 id="A-Split-it"><a href="#A-Split-it" class="headerlink" title="A Split it!"></a>A <a href="https://codeforces.com/contest/1496/problem/A">Split it!</a></h2><p>Tag：签到、思维</p><p>题意：</p><p>给定一个字符串s，参数k，字符串长度为n，问是否存在k+1个子串ai使得 s = a1 + a2 + a3 + ··· + ak + ak + 1 + r(ak) + r(ak - 1) + ··· + r(a2) + r(a1)。</p><p>思路：</p><p>首先证明：r(a3) + r(a2) + r(a1) = r(a3 + a2 + a1)，然后我们就可以得到 a1 + a2 + a3 + a4 + ··· + ak = r(ak) + ··· + r(a4) + r(a3) + r(a2) + r(a1)。然后使用双指针算法遍历，判断首尾对应的字符是否相同，若相同则计数，不相同则停止遍历。最后，如果计数大于k，则存在，否则就不存在。</p><p>题解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            cnt <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> k <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B-Max-and-Mex"><a href="#B-Max-and-Mex" class="headerlink" title="B Max and Mex"></a>B <a href="https://codeforces.com/contest/1496/problem/B">Max and Mex</a></h2><p>Tag：思维、二分</p><p>题意：</p><p>给定一个集合S，和一个操作数k，每次将 mex 和 max 的和的一半向上取整后加入集合，其中mex表示集合中不存在的最小非负整数，max表示集合中的最大数，最后输出集合中数字的个数。</p><p>思路：</p><p>读入输入之后，先特判一下k的值：</p><p>如果k为0，则直接输出n；</p><p>如果k不为0，则再从mex和max的大小来看，推导如图：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images7C3355583A1E00F2D9A3371B1F8E44F7.png" alt=""></p><p>题解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span>ll k<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> i <span class="token operator">==</span> n<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                b <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">+</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> a<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s <span class="token operator">+</span> n<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-Diamond-Miner"><a href="#C-Diamond-Miner" class="headerlink" title="C Diamond Miner"></a>C <a href="https://codeforces.com/contest/1496/problem/C">Diamond Miner</a></h2><p>Tag：贪心 </p><p>题意：</p><p>给定n个矿工和n个矿脉的位置，矿工在y轴，矿脉在x轴，(0, 0)位置没有矿工也没有矿脉；矿工和矿脉一一匹配，求矿工到矿脉的距离总和的最小值。</p><p>思路：</p><p>用两个数组分别存矿工和矿脉，读取数据的时候在负半轴的数据映射到正半轴，然后从小到大排序，相同序号的矿工和矿脉配对计算距离然后求和。证明：三角形两边之和大于第三边</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images62A128D7BB385BD58B95F9DC897BD192.png" style="zoom:50%;" /></p><p>题解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ll x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>y<span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>             ans <span class="token operator">+=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.15f\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="D-Let’s-Go-Hiking"><a href="#D-Let’s-Go-Hiking" class="headerlink" title="D Let’s Go Hiking"></a>D <a href="https://codeforces.com/contest/1496/problem/D">Let’s Go Hiking</a></h2><p>Tag：博弈、思维</p><p>题意：</p><p>给定一个整数序列，Qingshan选择该序列中的一个位置，然后告诉Daniel，Daniel再选择一个位置。游戏开始，每次Qingshan的要选择一个相邻且低于当前位置的位置行动，Daniel选择一个相邻且高于当前位置的位置行动，重复进行，无法行动的人败。问：当给定一个序列p的时候，Qingshan获胜的方案数是多少个。</p><p>思路：</p><p>直接上分析图</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images737BE4FC2FE5DD66CBFB2C2526A202D3.png" alt=""></p><p>题解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> flag<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> top<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> r<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> top<span class="token punctuation">)</span> flag <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> top<span class="token punctuation">)</span> cnt <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> top<span class="token punctuation">)</span> cnt <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E-Garden-of-the-Sun"><a href="#E-Garden-of-the-Sun" class="headerlink" title="E Garden of the Sun"></a>E <a href="https://codeforces.com/contest/1496/problem/E">Garden of the Sun</a></h2><p>Tag：</p><p>题意：</p><p>思路：</p><p>题解：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="F-BFS-Trees"><a href="#F-BFS-Trees" class="headerlink" title="F BFS Trees"></a>F <a href="https://codeforces.com/contest/1496/problem/F">BFS Trees</a></h2><p>Tag：</p><p>题意：</p><p>思路：</p><p>题解：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础——HTML</title>
      <link href="/posts/ff381255/"/>
      <url>/posts/ff381255/</url>
      
        <content type="html"><![CDATA[<h1 id="前端基础——HTML"><a href="#前端基础——HTML" class="headerlink" title="前端基础——HTML"></a>前端基础——HTML</h1><h2 id="网页基础概念"><a href="#网页基础概念" class="headerlink" title="网页基础概念"></a>网页基础概念</h2><p>1.网页&amp;网站, 网站是网页的集合</p><p>2.HTML(超文本标记语言, Hyper Text Markup Language)</p><p>3.浏览器内核(渲染引擎)</p><p>4.web标准</p><div class="table-container"><table><thead><tr><th>标准</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>结构</td><td style="text-align:left">HTML</td></tr><tr><td>表现</td><td style="text-align:left">CSS</td></tr><tr><td>行为</td><td style="text-align:left">JavaScript</td></tr></tbody></table></div><p>web标准最佳体验方案：==结构、样式、行为相分离==，即结构写到HTML文件中，表现写到CSS文件中，行为写到JavaScript文件中。</p><h2 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h2><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>1.HTML标签是由==尖括号包围的关键词==</p><p>2.HTML标签通常是成对出现的</p><p>3.有些特殊的标签必须是单个标签(极少情况)</p><h4 id="2-标签关系"><a href="#2-标签关系" class="headerlink" title="2.标签关系"></a>2.标签关系</h4><p>==包含关系&amp;并列关系==</p><h3 id="HTML基本结构标签"><a href="#HTML基本结构标签" class="headerlink" title="HTML基本结构标签"></a>HTML基本结构标签</h3><h4 id="1-lt-DOCTYPE-gt"><a href="#1-lt-DOCTYPE-gt" class="headerlink" title="1.&lt;!DOCTYPE&gt;"></a>1.&lt;!DOCTYPE&gt;</h4><p><code>&lt;!DOCTYPE&gt;</code>文档类型声明，告诉浏览器使用那种HTML版本来显示网页</p><p><code>&lt;!DOCTYPE&gt;</code>声明位于文档中的最前面的位置，处于<code>&lt;html&gt;</code>标签之前</p><p><code>&lt;!DOCTYPE&gt;</code>不是一个HTML标签，它就是文档类型声明标签</p><h4 id="2-lang语言种类"><a href="#2-lang语言种类" class="headerlink" title="2.lang语言种类"></a>2.lang语言种类</h4><p><code>en</code>英语</p><p><code>zh-CN</code>中文</p><p>主要是拿来触发浏览器的翻译功能</p><h4 id="3-编码"><a href="#3-编码" class="headerlink" title="3.编码"></a>3.编码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h3><h4 id="1-语义标签"><a href="#1-语义标签" class="headerlink" title="1.语义标签"></a>1.语义标签</h4><h4 id="2-标题标签-lt-h1-gt-lt-h6-gt"><a href="#2-标题标签-lt-h1-gt-lt-h6-gt" class="headerlink" title="2.标题标签 &lt;h1&gt; - &lt;h6&gt;"></a>2.标题标签 <code>&lt;h1&gt; - &lt;h6&gt;</code></h4><p>标签语义：作为标题使用，并且依据重要性递减</p><h4 id="3-段落标签和换行标签"><a href="#3-段落标签和换行标签" class="headerlink" title="3.段落标签和换行标签"></a>3.段落标签和换行标签</h4><p>段落标签：<code>&lt;p&gt;&lt;/p&gt;</code></p><p>换行标签：<code>&lt;br/&gt;</code></p><h4 id="4-文本格式化标签"><a href="#4-文本格式化标签" class="headerlink" title="4.文本格式化标签"></a>4.文本格式化标签</h4><div class="table-container"><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code></td><td><code>&lt;b&gt;&lt;/b&gt;</code></td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code></td><td><code>&lt;i&gt;&lt;/i&gt;</code></td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code></td><td><code>&lt;s&gt;&lt;/s&gt;</code></td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code></td><td><code>&lt;u&gt;&lt;/u&gt;</code></td></tr></tbody></table></div><h4 id="5-lt-div-gt-和-lt-span-gt-标签"><a href="#5-lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="5.&lt;div&gt; 和 &lt;span&gt; 标签"></a>5.<code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 标签</h4><p><code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 是没有语义的，它们就是一个盒子，用来装内容的。</p><p>div 表示分割、分区，span 表示跨度、跨距</p><p>div 一个占一行，一行可以放多个 span</p><h4 id="6-图像标签和路径"><a href="#6-图像标签和路径" class="headerlink" title="6.图像标签和路径"></a>6.图像标签和路径</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>树形</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图像不能显示的时候显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本，鼠标放到图像上显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图片的边框粗细</td></tr></tbody></table></div><p>相对路径、绝对路径</p><div class="table-container"><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件的同一级</td></tr><tr><td>下一级路径</td><td>/</td><td>图像文件位于HTML文件的下一级</td></tr><tr><td>上一级路径</td><td>../</td><td>图像文件位于HTML文件的上一级</td></tr></tbody></table></div><h4 id="7-超链接标签"><a href="#7-超链接标签" class="headerlink" title="7.超链接标签"></a>7.超链接标签</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>必须属性，指定链接目标的url地址</td></tr><tr><td>target</td><td>指定链接页面的打开方式，<code>_self</code>是在当前窗口打开，<code>_blank</code>为在新窗口中打开方式</td></tr></tbody></table></div><h5 id="链接分类："><a href="#链接分类：" class="headerlink" title="链接分类："></a>链接分类：</h5><p>1.外部链接</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://a-egoist.gitee.io<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.内部链接，网站内部各页面之间的相互链接，直接链接内部页面名称即可</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.空链接：如果当时没有确定链接的目标时</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>空链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.下载链接：如果 href 里面地址是一个文件或者压缩包，会下载这个文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img.zip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.网页元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接</p><p>6.锚点链接：当我们点击链接，可以快速定位到页面中的某个位置</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转目标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="8-注释标签和特殊字符"><a href="#8-注释标签和特殊字符" class="headerlink" title="8.注释标签和特殊字符"></a>8.注释标签和特殊字符</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--这是注释--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在HTML页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代</p><p><img src="https://gitee.com/A-Egoist/image_bed/raw/master/blog_material/image-20210411171801738.png" alt="image-20210411171801738" style="zoom:80%;" /></p><h4 id="9-表格标签"><a href="#9-表格标签" class="headerlink" title="9.表格标签"></a>9.表格标签</h4><h5 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h5><p>表格不是用来布局页面的，而是用来展示数据的</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用于定义表格的标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--只能嵌套在&lt;table>&lt;/table>中--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>表头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--表头单元格--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--只能嵌套在&lt;td>&lt;/td>中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h5><p>表格相关属性一般通过CSS设置</p><div class="table-container"><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对其方式</td></tr><tr><td>border</td><td>1 或 “”</td><td>规定表格单元是否拥有边框，默认为””，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格宽度</td></tr></tbody></table></div><h5 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h5><p><code>&lt;thead&gt;</code>标签 表格的头部区域，内部必须拥有<code>&lt;tr&gt;</code>标签，一般位于第一行</p><p><code>&lt;tbody&gt;</code>标签 表格的主体区域，主要用于存放数据本体</p><h5 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h5><h6 id="合并单元格方式"><a href="#合并单元格方式" class="headerlink" title="合并单元格方式"></a>合并单元格方式</h6><p>1.跨行合并：<code>rowspan=</code></p><p>2.跨列合并：<code>colspan=</code></p><h6 id="目标单元格"><a href="#目标单元格" class="headerlink" title="目标单元格"></a>目标单元格</h6><p>跨行：最上侧单元格为目标单元格，写合并代码</p><p>跨列：最左侧单元格为目标单元格，写合并代码</p><h6 id="合并单元格的步骤"><a href="#合并单元格的步骤" class="headerlink" title="合并单元格的步骤"></a>合并单元格的步骤</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跨列合并单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跨行合并单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="10-列表标签"><a href="#10-列表标签" class="headerlink" title="10.列表标签"></a>10.列表标签</h4><p>列表是用来布局的</p><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;ul>标签中只能放&lt;li>标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;li>标签中可以放任何标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;ol>标签中只能放&lt;li>标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;li>标签中可以放任何标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h5><p>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;dl>里面只能包含&lt;dt>&lt;dd>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-表单标签"><a href="#11-表单标签" class="headerlink" title="11.表单标签"></a>11.表单标签</h4><h5 id="表单组成"><a href="#表单组成" class="headerlink" title="表单组成"></a>表单组成</h5><p>表单域、表单控件、提示信息</p><h5 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h5><p>表单域是一个包含表单元素的区域</p><p>在HTML总，<code>&lt;form&gt;</code>标签用于定义表单域，以实现用户信息的收集和传递</p><p><code>&lt;form&gt;</code>标签会把它范围内的表单元素信息提交给服务器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交方式(GET or POST)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单域名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    各种表单元素控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="表单的控件-表单元素"><a href="#表单的控件-表单元素" class="headerlink" title="表单的控件(表单元素)"></a>表单的控件(表单元素)</h5><h6 id="1-input输入表单元素"><a href="#1-input输入表单元素" class="headerlink" title="1.input输入表单元素"></a>1.input输入表单元素</h6><p><code>&lt;input&gt;</code>标签用于收集用户信息</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>type属性设置不同的属性值用来指定不同的控件类型</p><p><code>&lt;input&gt;</code>标签常用属性</p><div class="table-container"><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户自定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>由用户自定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此input元素首次加载时应该被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table></div><p>单选按钮和复选框都要有相同的name值</p><h6 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt;标签"></a><code>&lt;label&gt;</code>标签</h6><p><code>&lt;label&gt;</code>标签为input元素定义标注(标签)</p><p><code>&lt;label&gt;</code>标签用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器会自动将焦点(光标)转到或者选择对应的表单元素上，用来增加用户体验</p><h6 id="2-select下拉表单元素"><a href="#2-select下拉表单元素" class="headerlink" title="2.select下拉表单元素"></a>2.select下拉表单元素</h6><h6 id="3-textarea文本域元素"><a href="#3-textarea文本域元素" class="headerlink" title="3.textarea文本域元素"></a>3.textarea文本域元素</h6><h4 id="12-查阅文档"><a href="#12-查阅文档" class="headerlink" title="12.查阅文档"></a>12.查阅文档</h4><p><a href="https://www.w3school.com.cn/index.html">W3shcool</a></p><p><a href="https://developer.mozilla.org/zh-CN/">MDN</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战——豆瓣电影Top250</title>
      <link href="/posts/187a0336/"/>
      <url>/posts/187a0336/</url>
      
        <content type="html"><![CDATA[<h2 id="爬虫实战——豆瓣电影Top250"><a href="#爬虫实战——豆瓣电影Top250" class="headerlink" title="爬虫实战——豆瓣电影Top250"></a>爬虫实战——豆瓣电影Top250</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h4><p>在目标网页直接<code>ctrl</code>+<code>u</code>查看网页源代码(或者<code>F12</code>审查)，豆瓣的网页源代码就出现了(非常友好)：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ua-windows ua-webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>always<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>google-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok0wCgT20tBBgo9_zat2iAcimtN4Ftf5ccsh092Xeyw<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>豆瓣电影 Top 250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baidu-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cZdR4xxR7RxmM4zE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pragma<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们翻到330行左右的位置，有如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid_view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>肖申克的救赎<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img2.doubanio.com/view/photo/s_ratio_poster/public/p480747492.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>肖申克的救赎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>The Shawshank Redemption<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>月黑高飞(港)  /  刺激1995(台)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[可播放]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            导演: 弗兰克·德拉邦特 Frank Darabont<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>主演: 蒂姆·罗宾斯 Tim Robbins /...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                            1994<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>美国<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>犯罪 剧情                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating5-t<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating_num<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:average<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:best<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>2304569人评价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>希望让人自由。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/wish/224683240/update?add=1292052<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j a_collect_btn<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sbtn-1292052-wish<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>想看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/collection/224683240/update?add=1292052<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j a_collect_btn<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sbtn-1292052-collection<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>看过<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1291546/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>霸王别姬<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2561716440.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1291546/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>霸王别姬<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>再见，我的妾  /  Farewell My Concubine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[可播放]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            导演: 陈凯歌 Kaige Chen<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>主演: 张国荣 Leslie Cheung / 张丰毅 Fengyi Zha...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                            1993<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>中国大陆 中国香港<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>剧情 爱情 同性                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating5-t<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating_num<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:average<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:best<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1709666人评价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>风华绝代。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这些代码中我们可以发现我们需要爬取的内容都在里面了。</p><p>现在我们来分析每一部电影的<code>HTML</code>语言，即从item项看：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>肖申克的救赎<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img2.doubanio.com/view/photo/s_ratio_poster/public/p480747492.webp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>肖申克的救赎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>The Shawshank Redemption<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>月黑高飞(港)  /  刺激1995(台)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[可播放]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            导演: 弗兰克·德拉邦特 Frank Darabont<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>主演: 蒂姆·罗宾斯 Tim Robbins /...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                            1994<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>美国<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>犯罪 剧情                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating5-t<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating_num<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:average<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:best<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>2304569人评价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>希望让人自由。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/wish/224683240/update?add=1292052<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j a_collect_btn<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sbtn-1292052-wish<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>想看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/collection/224683240/update?add=1292052<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j a_collect_btn<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sbtn-1292052-collection<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>看过<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从《肖申克的救赎》这部电影对应的<code>HTML</code>代码我们可以发现，我们需要提取的内容为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://movie.douban.com/subject/1292052/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>肖申克的救赎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>The Shawshank Redemption<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>/<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>月黑高飞(港)  /  刺激1995(台)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rating_num<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v:average<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>希望让人自由。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析到这我们就可以确定我们的代码实现思路了。</p><h4 id="确定思路"><a href="#确定思路" class="headerlink" title="确定思路"></a>确定思路</h4><p>1、确定网页的<code>url</code>，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">start_url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/top250?start=&#123;:d&#125;&amp;filter='</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> start_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment"># url便是每一页对应的网页链接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、获取到对应的网页，即通过<code>requests.get()</code>方法，即</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36'</span><span class="token punctuation">&#125;</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>爬取网页的时候可能会出现错误，我们要确保传递给下一个过程的数据没有错误，因此：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> html<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token comment"># 继续下一步操作</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error!!!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、通过<code>get()</code>方法获取网页代码有时我们无法直接处理，因此我们需要用的<code>beautifulSoup</code>来解析网页(虽然这一次根本不需要)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、经过前面的步骤我们就可以开始利用正则表达式来进行数据清洗了，因为之前我们已经确定了需求，所以现在我们按照之前的需求来一次完成我们的目标</p><p>4.1 匹配<code>url</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> <span class="token string">r'^[\[a-z&lt;="\s]*href="(.*)">$'</span><span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'None'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2 匹配名称</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> <span class="token string">r'^[&lt;a-z\s=">]*>(.*)&lt;/span>$'</span><span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">:</span>    movie_name <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    movie_name <span class="token operator">=</span> <span class="token string">'None'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.3 匹配评分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> <span class="token string">r'^[\[=a-z"&lt;>\s:_]*(.*)&lt;/span>]$'</span><span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">:</span>    rating <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    rating <span class="token operator">=</span> <span class="token string">'None'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.4 匹配推荐语</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> <span class="token string">r'^[\[=a-z"&lt;>\s]*(.*)&lt;/span>]$'</span><span class="token punctuation">]</span><span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">:</span>    inq <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    inq <span class="token operator">=</span> <span class="token string">'None'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、经过前面的步骤，我们就可以在从程序输出得到爬取的，但是为了方便阅读和保存，我们需要把爬取结果保存下来，为了方便，直接保存为CSV格式的文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'电影名'</span><span class="token punctuation">,</span> <span class="token string">'评分'</span><span class="token punctuation">,</span> <span class="token string">'推荐语'</span><span class="token punctuation">,</span> <span class="token string">'链接'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实施阶段"><a href="#实施阶段" class="headerlink" title="实施阶段"></a>实施阶段</h3><p>在准备阶段我们已经确定了整个爬取流程，接下来就作为一个无情的代码机器就行了</p><p>1、编写<code>getHtmlDiv(url)</code>函数，用于爬取网页并解析得到<code>div</code>标签中的结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getHtmlDiv</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36'</span><span class="token punctuation">&#125;</span>    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> html<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'info'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、编写<code>writeToCSV(res, filename)</code>函数，将爬取结果保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">writeToCSV</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'电影名'</span><span class="token punctuation">,</span> <span class="token string">'评分'</span><span class="token punctuation">,</span> <span class="token string">'推荐语'</span><span class="token punctuation">,</span> <span class="token string">'链接'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、编写<code>getRes(ans, url)</code>函数，从<code>div</code>标签中的到我们需要的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getRes</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    div <span class="token operator">=</span> getHtmlDiv<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        res_url <span class="token operator">=</span> <span class="token string">r'^[\[a-z&lt;="\s]*href="(.*)">$'</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_url<span class="token punctuation">,</span> s_url<span class="token punctuation">)</span><span class="token punctuation">:</span>            movie_url <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_url<span class="token punctuation">,</span> s_url<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            movie_url <span class="token operator">=</span> <span class="token string">"None"</span>        s_title_span <span class="token operator">=</span> div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'span'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token operator">+</span> div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'span'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'other'</span><span class="token punctuation">)</span>        res_title <span class="token operator">=</span> <span class="token string">r'^[&lt;a-z\s=">]*>(.*)&lt;/span>$'</span>        movie_name <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s_title_span<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_title<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s_title_span<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                m <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_title<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s_title_span<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                m <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>m<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                m <span class="token operator">=</span> <span class="token string">"None"</span>            movie_name <span class="token operator">+=</span> m        s_rating <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'span'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'rating_num'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res_rating <span class="token operator">=</span> <span class="token string">r'^[\[=a-z"&lt;>\s:_]*(.*)&lt;/span>]$'</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_rating<span class="token punctuation">,</span> s_rating<span class="token punctuation">)</span><span class="token punctuation">:</span>            movie_rating <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_rating<span class="token punctuation">,</span> s_rating<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            movie_rating <span class="token operator">=</span> <span class="token string">"None"</span>        s_inq <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'span'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'inq'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res_inq <span class="token operator">=</span> <span class="token string">r'^[\[=a-z"&lt;>\s]*(.*)&lt;/span>]$'</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_inq<span class="token punctuation">,</span> s_inq<span class="token punctuation">)</span><span class="token punctuation">:</span>            movie_inq <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>res_inq<span class="token punctuation">,</span> s_inq<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            movie_inq <span class="token operator">=</span> <span class="token string">"None"</span>        item <span class="token operator">=</span> <span class="token punctuation">(</span>movie_name<span class="token punctuation">,</span> movie_rating<span class="token punctuation">,</span> movie_inq<span class="token punctuation">,</span> movie_url<span class="token punctuation">)</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、编写<code>main()</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start_url <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/top250?start=&#123;:d&#125;&amp;filter="</span>    size <span class="token operator">=</span> <span class="token number">10</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> start_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> getRes<span class="token punctuation">(</span>res<span class="token punctuation">,</span> url<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main() error! i = %d"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>            <span class="token keyword">continue</span>    writeToCSV<span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'test.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看<a href="https://gitee.com/A-Egoist/A-Egoist.gitee.io/blob/master/Main.py">结果</a></h3><p>在代码所在的文件夹中，我们就可以看到生成了一个<code>.csv</code>文件，在该文件中就保存了我们的爬取结果。</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesimage-20210313163530530.png" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树(最优二叉树)</title>
      <link href="/posts/68a09d/"/>
      <url>/posts/68a09d/</url>
      
        <content type="html"><![CDATA[<h1 id="哈夫曼树-最优二叉树"><a href="#哈夫曼树-最优二叉树" class="headerlink" title="哈夫曼树(最优二叉树)"></a>哈夫曼树(最优二叉树)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​        利用一个字符串中符号的出现频率(即出现概率)作为输入，并差生编码这个字符串的一个前缀码作为输出，在这些符号的所有可能的二叉前缀码中，这个编码使用最少的位。</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>1、根据给定的<strong>n</strong>个权值，构造n棵只有一个结点的二叉树，<strong>n</strong>个权值分别为这些树根结点的全。设森林<strong>F</strong>是由这<strong>n</strong>棵树构成的集合；(<strong>原始森林</strong>)</p><p>2、在<strong>F</strong>中选取两棵根的权值最小的树作为左、右子树，构造一棵新二叉树，置新二叉树的权值<strong>=</strong>左、右子树根结点权值之和；(<strong>每次新增一个结点</strong>)</p><p>3、从<strong>F</strong>中删除这两棵树，并将新树加入<strong>F</strong>；(<strong>每次少一棵树</strong>)</p><p>4、重复2、3，直到<strong>F</strong>中只含一棵树为止。(<strong>重复n-1次</strong>)</p><p>具体构造图示：<a href="https://blog.csdn.net/qq_29519041/article/details/81428934">链接</a></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>定义结点类型</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct&#123;    int weight,parent,lchild,rchild;&#125;HTNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构造算法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreatHuffmanTree</span><span class="token punctuation">(</span>HTNode <span class="token operator">*</span>ht<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>min_1<span class="token punctuation">,</span>min_2<span class="token punctuation">;</span>    <span class="token comment">//初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild<span class="token operator">=</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min_1<span class="token operator">=</span>min_2<span class="token operator">=</span><span class="token number">9999999</span><span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//找到权值最小的两个结点</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ht<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ht<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">&lt;</span>min_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min_2<span class="token operator">=</span>min_1<span class="token punctuation">;</span>r<span class="token operator">=</span>l<span class="token punctuation">;</span>min_1<span class="token operator">=</span>ht<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ht<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">&lt;</span>min_2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min_2<span class="token operator">=</span>ht<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>r<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>ht<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">+</span>ht<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>ht<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span>ht<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span>i<span class="token punctuation">;</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild<span class="token operator">=</span>l<span class="token punctuation">;</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagesQQ图片20200622113021.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递推总结</title>
      <link href="/posts/f6444059/"/>
      <url>/posts/f6444059/</url>
      
        <content type="html"><![CDATA[<h2 id="递推总结"><a href="#递推总结" class="headerlink" title="递推总结"></a>递推总结</h2><h3 id="错排公式"><a href="#错排公式" class="headerlink" title="错排公式"></a>错排公式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><a href="https://blog.csdn.net/bengshakalakaka/article/details/83420150">介绍</a></h4><p><strong>问题：</strong>现有10本书按照顺序摆放，现要求重新排列，使得新的书的顺序中每一本书都不在原来的位置，求有多少种排列方式？</p><p>这个问题推广一下，就是<strong>错排问题</strong>，是<strong>组合数学</strong>中的问题之一。考虑一个有n个元素的排列，若一个排列中所有的元素都不在自己原来的位置上，那么这样的排列就称为原排列的一个错排。 n个元素的错排数记为<strong>D(n)</strong>。 研究一个排列错排个数的问题，叫做<strong>错排问题</strong>或称为<strong>更列问题</strong>。</p><p>OK，现在详细分析这个问题，我们要的最终结果就是书的编号与所在位置的编号不同，在这里，我们把n本书的错排操作数记为<strong>D(n)</strong>，那<strong>n-1</strong>本就是<strong>D(n-1)</strong>，<strong>n-2</strong>本就是<strong>D(n-2)</strong>啦，下面，我们把放置问题分为两步（初始位置号与书的编号相同）：</p><p><strong>第一步：</strong></p><ul><li>我们取一本书，书的编号为m，现在这本书就在我们手中，注意，按照题目要求，最开始的时候这本书的位置号也是m号，按照题目要求，我们现在放书时不能放回这个位置m了，而是要选择其他位置，那么有多少种选择呢?</li><li>想一下，总共有n本书，n个位置，现在我手里这本书不能把它放到位置m，那么剩下的n-1个位置我当然就是随便扔啦，也就是n-1种扔法，好，现在，我选择了位置k，我决定把手里这本书放到位置k这里，记住这个是位置编号k，那么，我肯定要把原来这里的编号为k的书拿出来，再把这本编号为n的书放进去喽。所以，现在我们手里的书的编号是k。</li></ul><p><strong>第二步：</strong></p><ul><li><p>我们把手里这本编号为k的书本放到书架，注意，放的过程中我们又面临两种情况，可以想到，此时此刻现在书架上编号m的位置是空着的，所以我们可以选择放在这个位置上，书的编号为k，位置编号为m，没错，满足题意，这是第一种情况，还有一种就是我不选择这个空着的位置m，我再重新选择一个新的位置，我们称之为第二种情况，下面详细分析</p></li><li><p><strong>第一种情况：</strong>我把这本编号为k的书放到这个编号为m的地址，那现在我们面前是什么状况呢，就是位置k和位置m的书交换位置，也就是位置号不等于书号，即满足错排，总共n个位置，我们只动了m和k这两个位置，那么剩下的n-2个位置还是纹丝不动，保持一一对应的关系呢</p><p>​    那么对于剩下的这n-2本书的错排操作，我们又回到了问题的起点，求n-2本的错排操作数D(n-2)，结合第一步，我们可以得到第一种情况总共有<strong>(n-1)*D(n-2)</strong>种方法</p></li><li><p><strong>第二种情况：</strong>我们不选择这个空着的位置m啦，我们手持这本编号为k的书，我们从除了位置m以及位置k的剩下的n-2个位置中选择一个位置。 </p><p>​    OK，我们现在开始想，我手里这本书不能放在这个位置m，嗯嗯，除了第一步我们放置的那本书m不用管了，我们还要搞手里这本和剩下的n-2本，也就是n-1本，同时又要求手里这本k还不能放到位置m，这是不是就相当于把手里这本加上剩下的n-2本也就是n-1本书进行错排呢？  </p><p>​    哇哇哇，想一想，错排的定义，要求每本书都不能呆在某一个特定位置，是不是刚好符合呢QWQ，所以，现在的为题就到了求手里这本和剩下的n-2本总共是n-1本书的错排操作数，我们记为D(n-1)，结合第一步，我们得出这第二种情况共有<strong>(n-1)*D(n-1)</strong>种方法</p></li></ul><p>好的，现在我们总结两种情况，结果进行相加，就可以得到递推公式啦<br><strong>递推公式为：</strong><code>D(n)=(n-1)*(D(n-1)+D(n-2))</code></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>1、<strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2048">神、上帝以及老天爷</a></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">//计算阶乘</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>sum<span class="token operator">*=</span>i<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> f<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//长整型数组用来存放错误的抽取</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">21</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递推公式</span>    <span class="token comment">//以上进行预处理</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">100.0</span><span class="token operator">/</span><span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f%%\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主义输出格式</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/bengshakalakaka/article/details/83420150">https://blog.csdn.net/bengshakalakaka/article/details/83420150</a></p><h3 id="组合-错排"><a href="#组合-错排" class="headerlink" title="组合+错排"></a>组合+错排</h3><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p>2、<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2049">不容易系列之(4)——考新郎</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> f<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> C<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>C<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>C<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cin<span class="token operator">>></span>c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>C<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">/</span>C<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">/</span>C<span class="token punctuation">[</span>n<span class="token operator">-</span>m<span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单纯地递推"><a href="#单纯地递推" class="headerlink" title="单纯地递推"></a>单纯地递推</h3><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p>3、<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2050">折线分割平面</a></p><p><strong>思路：列举找规律</strong></p><blockquote><p>第1条折线，穿过0条线，多了1个区间；</p><p>第2条折线，穿过2条线，多了5个区间；</p><p>第3条折线，穿过4条线，多了9个区间；</p><p>第4条折线，穿过6条线，多了13个区间；</p><p>多的区间: 2*2*(n-1)+1</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10005</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>素数筛法(转载+总结)</title>
      <link href="/posts/c7e65d0f/"/>
      <url>/posts/c7e65d0f/</url>
      
        <content type="html"><![CDATA[<h2 id="素数筛法-转载-总结"><a href="#素数筛法-转载-总结" class="headerlink" title="素数筛法(转载+总结)"></a>素数筛法(<a href="https://zhuanlan.zhihu.com/p/100051075">转载</a>+总结)</h2><h3 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h3><p>​        埃式筛的复杂度是 <strong>O(n*loglogn)</strong>，基本上可以视为线性。</p><p>​        它的过程是这样的：</p><p>我们把2~n的数按顺序写出来：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D2%263%264%265%266%267%268%269%2610%2611%2612%2613%2614%2615%2616%5Cend%7Bmatrix%7D" alt=""></p><p>从前往后看，找到第一个未被划掉的数，2，这说明它是质数。然后把2的倍数（不包括2）划掉：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D%7B2%7D%263%26%5Ccancel4%265%26%5Ccancel6%267%26%5Ccancel8%269%26%5Ccancel%7B10%7D%2611%26%5Ccancel%7B12%7D%2613%26%5Ccancel%7B14%7D%2615%26%5Ccancel%7B16%7D%5Cend%7Bmatrix%7D" alt=""></p><p>下一个未被划掉的数是3，它是质数，把3的倍数划掉：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%26%5Ccolor%7Bblue%7D3%26%5Ccancel4%265%26%5Ccancel6%267%26%5Ccancel8%26%5Ccancel%7B9%7D%26%5Ccancel%7B10%7D%2611%26%5Ccancel%7B12%7D%2613%26%5Ccancel%7B14%7D%26%5Ccancel%7B15%7D%26%5Ccancel%7B16%7D%5Cend%7Bmatrix%7D" alt=""></p><p>接下来应该是5，但是5已经超过  16^(0.5) 了，所以遍历结束，剩下未被划掉的都是素数：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%26%5Ccolor%7Bblue%7D3%26%5Ccancel4%26%5Ccolor%7Bblue%7D5%26%5Ccancel6%26%5Ccolor%7Bblue%7D7%26%5Ccancel8%26%5Ccancel%7B9%7D%26%5Ccancel%7B10%7D%26%5Ccolor%7Bblue%7D%7B11%7D%26%5Ccancel%7B12%7D%26%5Ccolor%7Bblue%7D%7B13%7D%26%5Ccancel%7B14%7D%26%5Ccancel%7B15%7D%26%5Ccancel%7B16%7D%5Cend%7Bmatrix%7D" alt=""></p><p>如何？是不是比一个一个判断快多了？这个过程写成代码就是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">//n表示上限</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//is_prime[0]=0;is_prime[1]=0;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//如果是素数的话，就加入ans中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span>is_prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这个算法的复杂度是 <strong>O(n*loglogn)</strong> ，还是非常优秀了。但是我们可能会发现，在筛的过程中我们会重复筛到同一个数，例如12同时被2和3筛到，30同时被2、3和5筛到。所以我们引入<strong>欧拉筛</strong>，也叫<strong>线性筛</strong>，可以在 <strong>O(n)</strong>时间内完成对2~n的筛选。它的核心思想是：<strong>让每一个合数被其最小质因数筛到</strong>。</p><h3 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h3><p>我们这次除了把2~n列出来，还维护一个<strong>质数表</strong>：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D2%263%264%265%266%267%268%269%2610%2611%2612%2613%2614%2615%2616%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%28%29" alt=""></p><p>还是从头到尾遍历，第一个数是2，未被划掉，把它放进质数表：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%263%264%265%266%267%268%269%2610%2611%2612%2613%2614%2615%2616%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%282%2C%29" alt=""></p><p>然后我们用2去乘质数表里的每个数，划掉它们：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%263%26%5Ccancel4%265%266%267%268%269%2610%2611%2612%2613%2614%2615%2616%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%282%2C%29" alt=""></p><p>下一个是3，加入质数表，划掉6、9：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%26%5Ccolor%7Bblue%7D3%26%5Ccancel4%265%26%5Ccancel6%267%268%26%5Ccancel9%2610%2611%2612%2613%2614%2615%2616%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%282%2C3%2C%29" alt=""></p><p>下一个是4（注意这里划掉的数也要遍历，只是不加入质数表），先划掉8，但我们不划掉12，因为12 <strong>(12=2 x 6 = 3 x 4)</strong>应该由它的最小质因数2筛掉，而不是3。</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%26%5Ccolor%7Bblue%7D3%26%5Ccancel4%265%26%5Ccancel6%267%26%5Ccancel8%26%5Ccancel9%2610%2611%2612%2613%2614%2615%2616%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%282%2C3%2C%29" alt=""></p><p>下一个是5，加入质数表，划掉10，15：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%26%5Ccolor%7Bblue%7D3%26%5Ccancel4%26%5Ccolor%7Bblue%7D5%26%5Ccancel6%267%26%5Ccancel8%26%5Ccancel9%26%5Ccancel%7B10%7D%2611%2612%2613%2614%26%5Ccancel%7B15%7D%2616%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%282%2C3%2C5%2C%29" alt=""></p><p>下一个是6，划掉12，6被2整除，跳过。</p><p>……</p><p>按这样的步骤进行下去，可以筛掉所有的合数，并得到一张质数表。</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Bmatrix%7D%5Ccolor%7Bblue%7D2%26%5Ccolor%7Bblue%7D3%26%5Ccancel4%26%5Ccolor%7Bblue%7D5%26%5Ccancel6%26%5Ccolor%7Bblue%7D7%26%5Ccancel8%26%5Ccancel9%26%5Ccancel%7B10%7D%26%5Ccolor%7Bblue%7D%7B11%7D%26%5Ccancel%7B12%7D%26%5Ccolor%7Bblue%7D%7B13%7D%26%5Ccancel%7B14%7D%26%5Ccancel%7B15%7D%26%5Ccancel%7B16%7D%5Cend%7Bmatrix%7D+%5C%5C%5Ctext%7Bprimes%3A%7D%5C%3B%282%2C3%2C5%2C7%2C11%2C13%29" alt=""></p><p>详细证明见：<a href="https://zhuanlan.zhihu.com/p/100051075">https://zhuanlan.zhihu.com/p/100051075</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">//n表示上限</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            is_prime<span class="token punctuation">[</span>i<span class="token operator">*</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h3><p>​        还是多多练习欧拉筛吧，$O(n)$还是挺香的，然后还要注意数据读取的优化。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><a href="https://www.luogu.com.cn/problem/P3383">洛谷P3383 【模板】线性筛素数</a></p><p>AC code</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span>bool is_prime<span class="token punctuation">[</span><span class="token number">100000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">[</span><span class="token number">100000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s<span class="token punctuation">;</span>cin<span class="token operator">>></span>s<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>k<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开longlong以防万一</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样读数据应该快一点</span>    <span class="token comment">//把函数体放在main里面省去调用函数的时间</span>    <span class="token function">memset</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//注意不能越界</span>        <span class="token punctuation">&#123;</span>            is_prime<span class="token punctuation">[</span>i<span class="token operator">*</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow实战——多变量线性回归</title>
      <link href="/posts/e831759b/"/>
      <url>/posts/e831759b/</url>
      
        <content type="html"><![CDATA[<h2 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>根据Boston房价问题展开的多元线性回归问题的实践，但因现实生活中，对房价有影响的因素实在是太多了，因此，本例中的模型不能完全的概括完整房价的变化情况，但是通过这个实例，我们可以更好的掌握<code>TensorFlow</code>的编程基础，以及模型训练的整个流程。</p><h3 id="导入相关库"><a href="#导入相关库" class="headerlink" title="导入相关库"></a>导入相关库</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib notebook<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>utils <span class="token keyword">import</span> shuffle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过Pandas导入数据"><a href="#通过Pandas导入数据" class="headerlink" title="通过Pandas导入数据"></a>通过Pandas导入数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取数据文件</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/boston.csv"</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#显示数据摘要描述信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="载入本例所需数据"><a href="#载入本例所需数据" class="headerlink" title="载入本例所需数据"></a>载入本例所需数据</h3><p>相关数据<a href="https://www.icourse163.org/learn/ZUCC-1206146808?tid=1206445215#/learn/content?type=detail&amp;id=1211173168&amp;cid=1213736792">下载</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取df的值</span>df<span class="token operator">=</span>df<span class="token punctuation">.</span>values<span class="token comment"># 把df转换为np的数组格式</span>df<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特征数据归一化"><a href="#特征数据归一化" class="headerlink" title="特征数据归一化"></a>特征数据归一化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对特征数据[0~11]列做(0-1)归一化处理</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># x_data为归一化后的前12列特征数据</span>x_data<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment"># y_data为最后1列标签数据</span>y_data<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><p><strong>定义占位符</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span>tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"X"</span><span class="token punctuation">)</span> <span class="token comment"># 12个特征数据(12列)</span>y<span class="token operator">=</span>tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"Y"</span><span class="token punctuation">)</span> <span class="token comment"># 1个标签数据(1列)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>创建变量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义了一个命名空间</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"Model"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># w 初始化值为 shape=(12,1) 的随机数</span>    w<span class="token operator">=</span>tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stddev<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>    <span class="token comment"># b 初始化值为 1.0</span>    b<span class="token operator">=</span>tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>    <span class="token comment"># w和x是矩阵相乘，用matmul，不能用mutiply或者*</span>    <span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token operator">+</span>b    <span class="token comment"># 预测计算操作，前向计算节点</span>    pred<span class="token operator">=</span>model<span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义超参数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 迭代轮次</span>train_epochs<span class="token operator">=</span><span class="token number">50</span><span class="token comment"># 学习率</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义均方损失函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"LossFunction"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loss_function<span class="token operator">=</span>tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>y<span class="token operator">-</span>pred<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 均方误差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>选择优化器</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建优化器</span>optimizer<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss_function<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">sess<span class="token operator">=</span>tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>init<span class="token operator">=</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 用于保存loss值的列表</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>train_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    loss_sum<span class="token operator">=</span><span class="token number">0.0</span>    <span class="token keyword">for</span> xs<span class="token punctuation">,</span>ys <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>y_data<span class="token punctuation">)</span><span class="token punctuation">:</span>                xs<span class="token operator">=</span>xs<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>        ys<span class="token operator">=</span>ys<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                _<span class="token punctuation">,</span>summary_str<span class="token punctuation">,</span>loss<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>optimizer<span class="token punctuation">,</span>sum_loss_op<span class="token punctuation">,</span>loss_function<span class="token punctuation">]</span><span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span>xs<span class="token punctuation">,</span>y<span class="token punctuation">:</span>ys<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                writer<span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>summary_str<span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>        loss_sum<span class="token operator">=</span>loss_sum<span class="token operator">+</span>loss            <span class="token comment"># 打乱数据顺序</span>    x_data<span class="token punctuation">,</span>y_data<span class="token operator">=</span>shuffle<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>y_data<span class="token punctuation">)</span>        b0temp<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>session<span class="token operator">=</span>sess<span class="token punctuation">)</span>    w0temp<span class="token operator">=</span>w<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>session<span class="token operator">=</span>sess<span class="token punctuation">)</span>    loss_average<span class="token operator">=</span>loss_sum<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>y_data<span class="token punctuation">)</span>        loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_average<span class="token punctuation">)</span> <span class="token comment"># 每轮添加一次</span>        <span class="token comment">#print("epoch=",epoch+1,"loss=",loss_average,"b=",b0temp,"w=",w0temp)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch="</span><span class="token punctuation">,</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检测模型"><a href="#检测模型" class="headerlink" title="检测模型"></a>检测模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">n<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">506</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>x_test<span class="token operator">=</span>x_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span>x_test<span class="token operator">=</span>x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>predict<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span>x_test<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测值：%f"</span><span class="token operator">%</span>predict<span class="token punctuation">)</span>target<span class="token operator">=</span>y_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标签值：%f"</span><span class="token operator">%</span>target<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可视化</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagestensduo(1" alt="">.png)</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linear regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow实战——单变量线性回归</title>
      <link href="/posts/49ee5eaa/"/>
      <url>/posts/49ee5eaa/</url>
      
        <content type="html"><![CDATA[<h2 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>单变量线性回归问题，因为其变量单一，因此，模型的搭建十分简单，拿来TensorFlow入门实战是最简单不过的了。</p><p>因为人工收集数据，再输入其中，比较麻烦，所以之间用随机数的方法生成人工数据集，来达到简化操作的目的。</p><h3 id="生成人工数据集"><a href="#生成人工数据集" class="headerlink" title="生成人工数据集"></a>生成人工数据集</h3><p>假设需要学习的函数为线性函数：y=2x+1</p><p>导入库：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在Jupyter中，使用 matplotlib 显示图像需要设置为 inline 模式，否则不会显示图像</span><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment"># 载入matplotlib</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># 载入numpy</span><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf <span class="token comment"># 载入TensorFlow</span><span class="token comment"># 设置随机数种子</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成随机数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#直接采用np生成等差数列的方法，生成100个点，每个点取值在-1~1之间</span>x_data<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#y=2x+1+噪声，其中，噪声的维度与x_data一致</span>y_data<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x_data<span class="token operator">+</span><span class="token number">1.0</span><span class="token operator">+</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token operator">*</span>x_data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画出生成的散点和目标线性函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 画出随机生成数据的散点图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>y_data<span class="token punctuation">)</span><span class="token comment"># 画出想要通过学习得到的目标线性函数y=2x+1</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>x_data<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagestensdan(1" alt="">.png)</p><h3 id="构建线性模型"><a href="#构建线性模型" class="headerlink" title="构建线性模型"></a>构建线性模型</h3><p>定义x和y的占位符：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义训练数据的占位符，x是特征值，y是标签值</span>x<span class="token operator">=</span>tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">)</span>y<span class="token operator">=</span>tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构建回归模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token operator">+</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建变量</p><ul><li>TensorFlow变量的声明函数是tf.Variable</li><li>tf.Variable的作用是保存和更新参数</li><li>变量的初始值可以是随机数、常数、或是通过其他变量的初始值计算得到</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 构建线性函数的斜率，变量w</span>w<span class="token operator">=</span>tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"wO"</span><span class="token punctuation">)</span><span class="token comment"># 构建线性函数的截距，变量b</span>b<span class="token operator">=</span>tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"bO"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预测值表示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pred是预测值，前向计算</span>pred<span class="token operator">=</span>model<span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>设置训练参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 迭代次数(训练轮数)</span>train_epochs<span class="token operator">=</span><span class="token number">10</span><span class="token comment"># 学习率</span>learning_rate<span class="token operator">=</span><span class="token number">0.05</span><span class="token comment"># 控制显示loss值的粒度</span>display_step<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h3><ul><li>损失函数用于描述预测值与真实值之间的误差，从而指导模型收敛方向</li><li>常见损失函数：均方差和交叉熵</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 采用均方差作为损失函数</span>loss_function<span class="token operator">=</span>tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y<span class="token operator">-</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="定义优化器、定义最小化损失函数"><a href="#定义优化器、定义最小化损失函数" class="headerlink" title="定义优化器、定义最小化损失函数"></a>定义优化器、定义最小化损失函数</h3><p>选择优化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 梯度下降优化器</span>optimizer<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss_function<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="执行训练"><a href="#执行训练" class="headerlink" title="执行训练"></a>执行训练</h3><p>声明会话：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sess<span class="token operator">=</span>tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量初始化：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">init<span class="token operator">=</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>训练开始：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 开始训练，轮数为 epoch，采用SGD随机梯度下降优化方法</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>train_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> xs<span class="token punctuation">,</span>ys <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>y_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        _<span class="token punctuation">,</span>loss<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>optimizer<span class="token punctuation">,</span>loss_function<span class="token punctuation">]</span><span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> xs<span class="token punctuation">,</span>y<span class="token punctuation">:</span> ys<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    bOtemp<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>session<span class="token operator">=</span>sess<span class="token punctuation">)</span>    wOtemp<span class="token operator">=</span>w<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>session<span class="token operator">=</span>sess<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>wOtemp<span class="token operator">*</span>x_data<span class="token operator">+</span>bOtemp<span class="token punctuation">)</span><span class="token comment"># 画图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagestensdan(2" alt="">.png)</p><h3 id="训练结果的可视化"><a href="#训练结果的可视化" class="headerlink" title="训练结果的可视化"></a>训练结果的可视化</h3><p>输出w和b：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"w:"</span><span class="token punctuation">,</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b:"</span><span class="token punctuation">,</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可视化：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>y_data<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Original data"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>x_data<span class="token operator">*</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token operator">+</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Fitted line"</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagestensdan(3" alt="">.png)</p><h3 id="利用学习到的模型进行预测"><a href="#利用学习到的模型进行预测" class="headerlink" title="利用学习到的模型进行预测"></a>利用学习到的模型进行预测</h3><p>预测方法一：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_test<span class="token operator">=</span><span class="token number">3.21</span>predict<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span>x_test<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测值：%f"</span><span class="token operator">%</span>predict<span class="token punctuation">)</span>target<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x_test<span class="token operator">+</span><span class="token number">1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"目标值：%f"</span><span class="token operator">%</span>target<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出展示：</p><blockquote><p>预测值：7.405184 </p><p>目标值：7.420000</p></blockquote><p>预测方法二：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_test<span class="token operator">=</span><span class="token number">3.21</span>predict<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token operator">*</span>x_test<span class="token operator">+</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测值：%f"</span><span class="token operator">%</span>predict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>预测值：7.405184</p></blockquote><h3 id="显示loss的训练"><a href="#显示loss的训练" class="headerlink" title="显示loss的训练"></a>显示loss的训练</h3><p>训练方式和前面的训练方式相同，只是在训练的工程中输出loss，具体代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 开始训练，轮数为 epoch，采用SGD随机梯度下降优化方法</span>step<span class="token operator">=</span><span class="token number">0</span> <span class="token comment"># 记录训练步数 </span>loss_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 用于保存loss值的列表</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>train_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> xs<span class="token punctuation">,</span>ys <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>y_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        _<span class="token punctuation">,</span>loss<span class="token operator">=</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>optimizer<span class="token punctuation">,</span>loss_function<span class="token punctuation">]</span><span class="token punctuation">,</span>feed_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> xs<span class="token punctuation">,</span>y<span class="token punctuation">:</span> ys<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment"># 显示损失值 loss</span>        <span class="token comment"># display_step: 控制报告粒度</span>        <span class="token comment"># 例如，如果display_step设为2，则将每训练2个样本输出一次损失值</span>        <span class="token comment"># 与超参数不同，修改display_step不会更改模型所学习的规律</span>        loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        step<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> step<span class="token operator">%</span>display_step<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Train Epoch:"</span><span class="token punctuation">,</span><span class="token string">"%02d"</span><span class="token operator">%</span><span class="token punctuation">(</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"step:%03d"</span><span class="token operator">%</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"loss="</span><span class="token punctuation">,</span>\                 <span class="token string">"&#123;:.9f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    bOtemp<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>session<span class="token operator">=</span>sess<span class="token punctuation">)</span>    wOtemp<span class="token operator">=</span>w<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>session<span class="token operator">=</span>sess<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span>wOtemp<span class="token operator">*</span>x_data<span class="token operator">+</span>bOtemp<span class="token punctuation">)</span><span class="token comment"># 画图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示loss图（1）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagestensdan(4" alt="">.png)</p><p>显示loss图（2）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss_list<span class="token punctuation">,</span><span class="token string">"g2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出展示：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagestensdan(5" alt="">.png)</p><p>输出异常点：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> loss_list <span class="token keyword">if</span> x<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出展示：</p><blockquote><p>[1.0133754, 1.2284044, 1.0088208, 1.2116321, 2.3539772, 2.3148305, 1.3175836, 1.0387748, 1.5018207, 1.547514, 1.5513999, 1.5517284, 1.5517554, 1.5517581, 1.5517581, 1.5517581, 1.5517581]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linear regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门(二)</title>
      <link href="/posts/24058a9b/"/>
      <url>/posts/24058a9b/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫之提取"><a href="#网络爬虫之提取" class="headerlink" title="网络爬虫之提取"></a>网络爬虫之提取</h2><h3 id="Beautiful-Soup库入门"><a href="#Beautiful-Soup库入门" class="headerlink" title="Beautiful Soup库入门"></a>Beautiful Soup库入门</h3><p><strong>安装：</strong><code>pip install beautifulsoup4</code></p><p><strong>遇到的问题：</strong></p><p>和<a href="">上一篇</a>一样，又遇到了同样的问题，然后又在百度找解决方法，发现了<a href="https://mp.weixin.qq.com/s?__biz=MjM5MDEyMDk4Mw==&amp;mid=2650167858&amp;idx=1&amp;sn=daae966c476142ddcdbccb059585c960&amp;chksm=be4b574a893cde5c98cafa2b9a333b9796113403027930dbe2141cc76b4dbf4ce20cd2d1089f&amp;scene=21#wechat_redirect">我也曾经因安装库而抓狂，直到我遇到了</a>这篇文章，直到这个时候我才意识到，我之前安装的Anaconda3包含了几百个第三方库(详细介绍可以看看这篇文章)。</p><p><strong>解决方法：</strong></p><p>在Anaconda3的目录下找到beautifulsoup4 的文件包，直接复制粘贴到python下的第三方库的文件夹就行了</p><h3 id="Beautiful-Soup库的基本元素"><a href="#Beautiful-Soup库的基本元素" class="headerlink" title="Beautiful Soup库的基本元素"></a>Beautiful Soup库的基本元素</h3><p>demo.html</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://python123.io/ws/demo.html"</span><span class="token punctuation">)</span>demo<span class="token operator">=</span>r<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(1" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(2" alt="">.png)</p><p><strong>遍历方式：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(3" alt="">.png)</p><p><strong>下行遍历：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(4" alt="">.png)</p><p><strong>上行遍历：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(5" alt="">.png)</p><p><strong>平行遍历：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(6" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(7" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(8" alt="">.png)</p><p><strong>让HTML内容更加“友好”的显示：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(9" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc2(10" alt="">.png)</p><h3 id="三种信息标记形式"><a href="#三种信息标记形式" class="headerlink" title="三种信息标记形式"></a>三种信息标记形式</h3><p><strong>XML：</strong>最早的通用信息标记语言，可扩展性好，但繁琐；Internet上的信息交互与传递</p><p><strong>JSON：</strong>信息有类型，时候程序处理(js)，较XML简洁；移动应用云端和节点的信息通信，无注释</p><p><strong>YAML：</strong>信息无类型，文本信息比利最高，可读性好；各类系统的配置文件，有注释易读</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-1001870001?tid=1206951268#/learn/content">https://www.icourse163.org/learn/BIT-1001870001?tid=1206951268#/learn/content</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门(一)</title>
      <link href="/posts/8b3411f9/"/>
      <url>/posts/8b3411f9/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫之规则"><a href="#网络爬虫之规则" class="headerlink" title="网络爬虫之规则"></a>网络爬虫之规则</h2><h3 id="requests库安装"><a href="#requests库安装" class="headerlink" title="requests库安装"></a>requests库安装</h3><p><strong>安装：</strong><code>pip install requests</code></p><p><strong>遇到的问题：</strong></p><p>当我在cmd中输入<code>pip install requests</code>之后，却返回了：<code>Requirement already satisfied</code>，然后我顺着后面的提示，在c盘中的anaconda3中的第三方库中找到了<code>requests库</code>但是我用python自带的IDLE测试安装结果的时候，却失败了。</p><p><strong>解决方法：</strong></p><p>直接打开pycharm，新建.py文件，然后直接<code>import requests</code>，软件会自动提示没有这个库，根据提示，点击安装就行了，因为这种情况正常安装好像无法安装上，没想到用这个办法却实现了(<em>^▽^</em>)。</p><h3 id="requests库的七个主要方法"><a href="#requests库的七个主要方法" class="headerlink" title="requests库的七个主要方法"></a>requests库的七个主要方法</h3><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑以下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table></div><h3 id="requests库的get-方法"><a href="#requests库的get-方法" class="headerlink" title="requests库的get()方法"></a>requests库的get()方法</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(1" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(2" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(3" alt="">.png)</p><h3 id="response对象的属性"><a href="#response对象的属性" class="headerlink" title="response对象的属性"></a>response对象的属性</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(4" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(5" alt="">.png)</p><h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#如果状态不是200，引发HTTPError异常</span>        r<span class="token punctuation">.</span>encoding<span class="token operator">=</span>r<span class="token punctuation">.</span>apparent_encoding        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"产生异常"</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>getHTMLText<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP协议对资源的操作"><a href="#HTTP协议对资源的操作" class="headerlink" title="HTTP协议对资源的操作"></a>HTTP协议对资源的操作</h3><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URL位置资源的响应消息报告，即获得该资源的头部信息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附加新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，即改变该处资源的部分内容</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table></div><h3 id="网络爬虫引发的问题"><a href="#网络爬虫引发的问题" class="headerlink" title="网络爬虫引发的问题"></a>网络爬虫引发的问题</h3><ul><li>性能骚扰</li><li>法律风险</li><li>隐私泄露</li></ul><h3 id="网络爬虫的尺寸"><a href="#网络爬虫的尺寸" class="headerlink" title="网络爬虫的尺寸"></a>网络爬虫的尺寸</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(6" alt="">.png)</p><h3 id="网络爬虫的限制"><a href="#网络爬虫的限制" class="headerlink" title="网络爬虫的限制"></a>网络爬虫的限制</h3><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespc1(7" alt="">.png)</p><h3 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h3><p>作用：</p><p>​        网站告知网络爬虫哪些页面可以抓取，哪些不行</p><p>形式：</p><p>​        再往站根目录下的robots.txt文件</p><p>真实的网络robots协议：</p><p>​        <a href="http://www.baidu.com/robots.txt">http://www.baidu.com/robots.txt</a></p><p>​        <a href="http://news.sina.com.cn/robots.txt">http://news.sina.com.cn/robots.txt</a></p><p>​        <a href="http://www.qq.com/robots.txt">http://www.qq.com/robots.txt</a></p><p>​        <a href="http://news.qq.com/robots.txt">http://news.qq.com/robots.txt</a></p><p>​        <a href="http://www.moe.edu.cn/robots.txt">http://www.moe.edu.cn/robots.txt</a> (无robots协议)</p><p>使用：</p><ul><li>网络爬虫：自动或人工识别robots.txt，再进行内容爬取</li><li>约束性：robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险</li><li>原则：类人类行为可不参考robots协议</li></ul><h3 id="实例一：京东商品页面的爬取"><a href="#实例一：京东商品页面的爬取" class="headerlink" title="实例一：京东商品页面的爬取"></a>实例一：京东商品页面的爬取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"https://item.jd.com/2391981.html"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding<span class="token operator">=</span>r<span class="token punctuation">.</span>apparent_encoding    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例二：亚马逊商品页面的爬取"><a href="#实例二：亚马逊商品页面的爬取" class="headerlink" title="实例二：亚马逊商品页面的爬取"></a>实例二：亚马逊商品页面的爬取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"https://www.amazon.cn/gp/product/B01M8L5Z3Y"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    kv<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">&#125;</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>kv<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding<span class="token operator">=</span>r<span class="token punctuation">.</span>apparent_encoding    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例三：百度360搜索关键词提交"><a href="#实例三：百度360搜索关键词提交" class="headerlink" title="实例三：百度360搜索关键词提交"></a>实例三：百度360搜索关键词提交</h3><p>360搜索：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestskeyword<span class="token operator">=</span><span class="token string">"Python"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    kv<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'q'</span><span class="token punctuation">:</span>keyword<span class="token punctuation">&#125;</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.so.com/s"</span><span class="token punctuation">,</span>params<span class="token operator">=</span>kv<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestskeyword<span class="token operator">=</span><span class="token string">"Python"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    kv<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'wd'</span><span class="token punctuation">:</span>keyword<span class="token punctuation">&#125;</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com/s"</span><span class="token punctuation">,</span>params<span class="token operator">=</span>kv<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：经过两个的爬取结果分析，发现360的<a href="https://www.so.com/robots.txt">robots协议</a>居然那么友好，诶，百度的<a href="https://www.baidu.com/robots.txt">robots协议</a>就不行了啊，各种限制</p><h3 id="网络图片的爬取和存储"><a href="#网络图片的爬取和存储" class="headerlink" title="网络图片的爬取和存储"></a>网络图片的爬取和存储</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> osurl<span class="token operator">=</span><span class="token string">"http://pic.netbian.com/uploads/allimg/190824/212516-15666531161ade.jpg"</span>root<span class="token operator">=</span><span class="token string">"F:/Picture/"</span>path<span class="token operator">=</span>root<span class="token operator">+</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件保存成功"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件已存在"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IP地址归属地的自动查询</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://m.ip138.com/ip.asp?ip="</span><span class="token keyword">try</span><span class="token punctuation">:</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'118.89.134.177'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding<span class="token operator">=</span>r<span class="token punctuation">.</span>apparent_encoding    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-1001870001?tid=1206951268#/learn/content">https://www.icourse163.org/learn/BIT-1001870001?tid=1206951268#/learn/content</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(六)</title>
      <link href="/posts/17063c30/"/>
      <url>/posts/17063c30/</url>
      
        <content type="html"><![CDATA[<h2 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h2><h3 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h3><p><strong>理解文件：</strong></p><blockquote><p>1、文件是存储在辅助存储器上的数据序列</p><p>2、文件是数据存储的一种形式</p><p>3、文件展现形态：文本文件和二进制文件(本质上所有文件都是二进制形式存储，只是其展现形式不同)</p></blockquote><h3 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h3><p>打开：<code>a=open(&lt;文件名&gt;,&lt;打开模式&gt;)</code>(文件名指文件路径和名称)</p><p>关闭：<code>a.close()</code></p><p>打开模式：</p><div class="table-container"><table><thead><tr><th>文件的打开模式</th><th>描述</th></tr></thead><tbody><tr><td>‘r’</td><td>只读模式，默认值，如果文件不存在，返回FileNotFoundError</td></tr><tr><td>‘w’</td><td>覆盖写模式，文件不存在则创建，存在则完全覆盖</td></tr><tr><td>‘x’</td><td>创建写模式，文件不存在则创建，存在则返回FileExistError</td></tr><tr><td>‘a’</td><td>追加写模式，文件不存在则创建，存在则在文件最后追加内容</td></tr><tr><td>‘b’</td><td>二进制文件模式</td></tr><tr><td>‘t’</td><td>文本文件模式，默认值</td></tr><tr><td>‘+’</td><td>与r/w/x/a一同使用，在原功能基础上增加同时读写功能</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">)</span><span class="token comment">#文本形式、只读模式、默认值</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"rt"</span><span class="token punctuation">)</span><span class="token comment">#文本形式、只读模式、同默认值</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token comment">#文本形式、覆盖写模式</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token comment">#文本形式、追加写模式+读文件</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token comment">#文本形式、创建写模式</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token comment">#二进制形式、只读模式</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token comment">#二进制形式、覆盖写模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件的内容读取"><a href="#文件的内容读取" class="headerlink" title="文件的内容读取"></a>文件的内容读取</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td>.read(size=-1)</td><td>读入全部内容，如果给出参数，读入前size长度</td></tr><tr><td>.readline(size=-1)</td><td>读入一行内容，如果给出参数，读入改行前size长度</td></tr><tr><td>.readlines(hint=-1)</td><td>读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行</td></tr></tbody></table></div><h3 id="数据的文件写入"><a href="#数据的文件写入" class="headerlink" title="数据的文件写入"></a>数据的文件写入</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td>.write(s)</td><td>向文件写入一个字符串或字节流</td></tr><tr><td>.writelines(lines)</td><td>将一个元素全为字符串的列表写入文件</td></tr><tr><td>.seek(offset)</td><td>改变当前文件操作指针的位置，offset含义如下：0-文件开头；1-当前位置；2-文件结尾</td></tr></tbody></table></div><h2 id="wordcloud库的使用"><a href="#wordcloud库的使用" class="headerlink" title="wordcloud库的使用"></a>wordcloud库的使用</h2><p>安装：<code>pip install wordcloud -i https://pypi.tuna.tsinghua.edu.cn/simple/</code></p><p>使用：<code>w=wordcloud.WordCloud()</code></p><p>常用方法：</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>w.generate(txt)</td><td>向WordCloud对象w中加在文本txt</td></tr><tr><td>w.to_file(filename)</td><td>将词云输出为图像文件，.png或.jpg格式</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wordcloudc<span class="token operator">=</span>wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#步骤1：配置对象参数</span>c<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">"wordcloudby Python"</span><span class="token punctuation">)</span><span class="token comment">#步骤2：加载词云文本</span>c<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"pywordcloud.png"</span><span class="token punctuation">)</span><span class="token comment">#配置3：输出词云文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy6(1" alt="">.png)</p><p>配置对象参数：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>置顶词云对象生成图片的宽度，默认400像素<br />&gt;&gt;&gt;w=wordcloud.WordCloud(width=600)</td></tr><tr><td>height</td><td>指定词云对象生成图片的高度，默认200像素<br />&gt;&gt;&gt;w=wordcloud.WordCloud(height=400)</td></tr><tr><td>min_font_size</td><td>指定词云中字体的最小字号，默认4号<br />&gt;&gt;&gt;w=wordcloud.wordCloud(min_font_size=10)</td></tr><tr><td>max_font_size</td><td>指定词云中字体的最大字号，根据高度自动调节<br />&gt;&gt;&gt;w=wordcloud.wordCloud(max_font_size=20)</td></tr><tr><td>font_step</td><td>指定词云中字体字号的步进间隔，默认为1<br />&gt;&gt;&gt;w=wordcloud.wordCloud(font_step=2)</td></tr><tr><td>font_path</td><td>指定字体文件的路径，默认None<br />&gt;&gt;&gt;w=wordcloud.wordCloud(font_path=”msyh.ttc”)</td></tr><tr><td>max_words</td><td>指定词云显示的最大单词数量，默认200<br />&gt;&gt;&gt;w=wordcloud.wordCloud(max_words=20)</td></tr><tr><td>stop_words</td><td>指定词云的排出词列表，即不显示的单词列表<br />&gt;&gt;&gt;w=wordcloud.wordCloud(stop_words={“python”})</td></tr><tr><td>mask</td><td>指定词云形状，默认为长方形，需要引用imread()函数<br />&gt;&gt;&gt;from scipy.misc import imread<br />mk=imread(“pic.png”)<br />&gt;&gt;&gt;w=wordcloud.wordCloud(mask=mk)</td></tr><tr><td>background_color</td><td>指定词云图片的背景颜色，默认为黑色<br />&gt;&gt;&gt;w=wordcloud.wordCloud(background_color=”white”)</td></tr></tbody></table></div><p>实例1：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wordcloudtxt<span class="token operator">=</span><span class="token string">"life is short, you need python"</span>w<span class="token operator">=</span>wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"pywcloud.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例2：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloudtxt<span class="token operator">=</span>"程序设计语言是计算机能够理解和识别用户操作意图的\     一种交互体系，它按照特定规则组织计算机指令，是计\     算机能够自动进行各种运算处理"w<span class="token operator">=</span>wordcloud<span class="token punctuation">.</span>wordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>font_path<span class="token operator">=</span><span class="token string">"msyh.ttc"</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"pycloud.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="体育竞技分析"><a href="#体育竞技分析" class="headerlink" title="体育竞技分析"></a>体育竞技分析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">printIntro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个程序模拟两个选手A和B的某种竞技比赛"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序运行需要A和B的能力值(以0到1之间的小数表示)"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入选手A的能力值(0-1)："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token operator">=</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入选手B的能力值(0-1)："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    n<span class="token operator">=</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"模拟比赛的场次："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token keyword">def</span> <span class="token function">printSummary</span><span class="token punctuation">(</span>winsA<span class="token punctuation">,</span>winsB<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token operator">=</span>winsA<span class="token operator">+</span>winsB    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"竞技分析开始，共模拟&#123;&#125;场比赛"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>winsA<span class="token punctuation">,</span>winsA<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>winsB<span class="token punctuation">,</span>winsB<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gameOver</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">==</span><span class="token number">15</span> <span class="token keyword">or</span> b<span class="token operator">==</span><span class="token number">15</span><span class="token keyword">def</span> <span class="token function">simOneGame</span><span class="token punctuation">(</span>proA<span class="token punctuation">,</span>proB<span class="token punctuation">)</span><span class="token punctuation">:</span>    scoreA<span class="token punctuation">,</span>scoreB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    serving<span class="token operator">=</span><span class="token string">"A"</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> gameOver<span class="token punctuation">(</span>scoreA<span class="token punctuation">,</span>scoreB<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> serving<span class="token operator">==</span><span class="token string">"A"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>proA<span class="token punctuation">:</span>                scoreA<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                serving<span class="token operator">=</span><span class="token string">"B"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>proB<span class="token punctuation">:</span>                scoreB<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                serving<span class="token operator">=</span><span class="token string">"A"</span>    <span class="token keyword">return</span> scoreA<span class="token punctuation">,</span>scoreB<span class="token keyword">def</span> <span class="token function">simNGames</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>proA<span class="token punctuation">,</span>proB<span class="token punctuation">)</span><span class="token punctuation">:</span>    winsA<span class="token punctuation">,</span>winsB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        scoreA<span class="token punctuation">,</span>scoreB<span class="token operator">=</span>simOneGame<span class="token punctuation">(</span>proA<span class="token punctuation">,</span>proB<span class="token punctuation">)</span>        <span class="token keyword">if</span> scoreA<span class="token operator">></span>scoreB<span class="token punctuation">:</span>            winsA<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            winsB<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> winsA<span class="token punctuation">,</span>winsB<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    printIntro<span class="token punctuation">(</span><span class="token punctuation">)</span>    proA<span class="token punctuation">,</span>proB<span class="token punctuation">,</span>n<span class="token operator">=</span>getInputs<span class="token punctuation">(</span><span class="token punctuation">)</span>    winsA<span class="token punctuation">,</span>winsB<span class="token operator">=</span>simNGames<span class="token punctuation">(</span>n<span class="token punctuation">,</span>proA<span class="token punctuation">,</span>proB<span class="token punctuation">)</span>    printSummary<span class="token punctuation">(</span>winsA<span class="token punctuation">,</span>winsB<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装第三方库的多种方法"><a href="#安装第三方库的多种方法" class="headerlink" title="安装第三方库的多种方法"></a>安装第三方库的多种方法</h2><p>python社区：<a href="https://pypi.org/">PyPi</a></p><p>常用方法：<code>win+r-&gt;cmd-&gt;pip install &lt;第三方库名&gt;</code></p><p>常用pip指令</p><blockquote><p>pip install -U &lt;第三方库名&gt; #更新已安装的指定第三方库</p><p>pip uninstall &lt;第三方库名&gt; #卸载指定的第三方库</p><p>pip download &lt;第三方库名&gt; #下载但不安装指定的第三方库</p><p>pip show &lt;第三方库名&gt; #列出某个指定第三方库的详细信息</p><p>pip search &lt;第三方库名&gt; #根据关键词在名称和介绍中搜索第三方库</p><p>pip list #列出当前系统已经安装的第三方库</p></blockquote><p>集成安装：<a href="https://www.continuum.io">Anaconda</a></p><h2 id="第三方库安装脚本"><a href="#第三方库安装脚本" class="headerlink" title="第三方库安装脚本"></a>第三方库安装脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> oslibs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"numpy"</span><span class="token punctuation">,</span><span class="token string">"matplotlib"</span><span class="token punctuation">,</span><span class="token string">"pillow"</span><span class="token punctuation">,</span><span class="token string">"sklearn"</span><span class="token punctuation">,</span><span class="token string">"requests"</span><span class="token punctuation">,</span>\        <span class="token string">"jieba"</span><span class="token punctuation">,</span><span class="token string">"beautifulsoup4"</span><span class="token punctuation">,</span><span class="token string">"wheel"</span><span class="token punctuation">,</span><span class="token string">"networkx"</span><span class="token punctuation">,</span><span class="token string">"sympy"</span><span class="token punctuation">,</span>\        <span class="token string">"pyinstaller"</span><span class="token punctuation">,</span><span class="token string">"django"</span><span class="token punctuation">,</span><span class="token string">"flask"</span><span class="token punctuation">,</span><span class="token string">"werobot"</span><span class="token punctuation">,</span><span class="token string">"pyqt5"</span><span class="token punctuation">,</span>\        <span class="token string">"pandas"</span><span class="token punctuation">,</span><span class="token string">"pyopengl"</span><span class="token punctuation">,</span><span class="token string">"pypdf2"</span><span class="token punctuation">,</span><span class="token string">"docopt"</span><span class="token punctuation">,</span><span class="token string">"pygame"</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> lib <span class="token keyword">in</span> libs<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"pip3 install "</span><span class="token operator">+</span>lib<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successful"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed Somehow"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy6(2" alt="">.png)</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(五)</title>
      <link href="/posts/a0aa46b8/"/>
      <url>/posts/a0aa46b8/</url>
      
        <content type="html"><![CDATA[<h2 id="函数和代码复用"><a href="#函数和代码复用" class="headerlink" title="函数和代码复用"></a>函数和代码复用</h2><h3 id="函数的定义和使用"><a href="#函数的定义和使用" class="headerlink" title="函数的定义和使用"></a>函数的定义和使用</h3><h4 id="函数的理解与定义"><a href="#函数的理解与定义" class="headerlink" title="函数的理解与定义"></a>函数的理解与定义</h4><h4 id="函数的使用及调用"><a href="#函数的使用及调用" class="headerlink" title="函数的使用及调用"></a>函数的使用及调用</h4><h4 id="函数参数的传递"><a href="#函数参数的传递" class="headerlink" title="函数参数的传递"></a>函数参数的传递</h4><p>可选参数的传递</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>可选参数<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n<span class="token operator">//</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可变参数传递</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token operator">*=</span>i    <span class="token keyword">for</span> item <span class="token keyword">in</span> b<span class="token punctuation">:</span>        s<span class="token operator">*=</span>item    <span class="token keyword">return</span> s       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images2323.png" alt=""></p><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><blockquote><p>return可以传递0个返回值，也可以传递任意多个返回值</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images2323(1" alt="">.png)</p><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><p>在函数内部引用全局变量的时候要用<strong>global</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> s    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token operator">*=</span>i    <span class="token keyword">return</span> s<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>组合数据类型，如果局部变量未真实创建，则是全局变量</strong></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images2323(2" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images2323(3" alt="">.png)</p><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images2323(4" alt="">.png)</p><h3 id="实例：七段数码管绘制"><a href="#实例：七段数码管绘制" class="headerlink" title="实例：七段数码管绘制"></a>实例：七段数码管绘制</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">drawGap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> draw <span class="token keyword">else</span> turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDigit</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">:</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'年'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">'='</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'月'</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'日'</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            drawDigit<span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m=%d+'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码复用与函数递归"><a href="#代码复用与函数递归" class="headerlink" title="代码复用与函数递归"></a>代码复用与函数递归</h3><p>汉诺塔1：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cnt<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">han</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> cnt    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;:&#123;&#125;->&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        han<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>src<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>dst<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;:&#123;&#125;->&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>        han<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">,</span>dst<span class="token punctuation">,</span>src<span class="token punctuation">)</span>han<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pyinstaller库的使用"><a href="#pyinstaller库的使用" class="headerlink" title="pyinstaller库的使用"></a>pyinstaller库的使用</h3><p>作用：将<code>.py</code>源代码转换成无需源代码的可执行文件</p><p>安装：</p><p><code>pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple/</code></p><p>使用：</p><p><code>pyinstaller -F name.py</code></p><p><code>pyinstaller -i curve.ico -F name.py</code></p><h3 id="科赫雪花"><a href="#科赫雪花" class="headerlink" title="科赫雪花"></a>科赫雪花</h3><p>科赫曲线绘制：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#KochDrawV1.py</span><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">koch</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>           koch<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    koch<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment"># 0阶科赫曲线长度，阶数</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>科赫雪花绘制：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#KochDrawV2.py</span><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">koch</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>           koch<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    level <span class="token operator">=</span> <span class="token number">3</span>      <span class="token comment"># 3阶科赫雪花，阶数</span>    koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>         turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>    koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>    koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248249">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248249</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248250">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248250</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248251">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248251</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248252">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248252</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248253">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248253</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248254">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248254</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248255">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248255</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248256">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094145&amp;cid=1215248256</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(四)</title>
      <link href="/posts/a60111c5/"/>
      <url>/posts/a60111c5/</url>
      
        <content type="html"><![CDATA[<h2 id="程序的控制结构"><a href="#程序的控制结构" class="headerlink" title="程序的控制结构"></a>程序的控制结构</h2><h3 id="程序的分支结构"><a href="#程序的分支结构" class="headerlink" title="程序的分支结构"></a>程序的分支结构</h3><h4 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h4><h4 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h4><blockquote><p>紧凑形式：&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</p></blockquote><h4 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h4><h4 id="条件判断及组合"><a href="#条件判断及组合" class="headerlink" title="条件判断及组合"></a>条件判断及组合</h4><h4 id="程序的异常处理"><a href="#程序的异常处理" class="headerlink" title="程序的异常处理"></a>程序的异常处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    num<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span> <span class="token operator">&lt;</span>异常类型<span class="token operator">></span><span class="token punctuation">:</span><span class="token comment">#标注异常名称之后只响应此类异常、异常类型名字等同于变量名</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    num<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span> NameError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#异常处理的高级使用</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#else对应的语句块在不发生异常时执行</span>    <span class="token operator">&lt;</span>语句块<span class="token number">3</span><span class="token operator">></span><span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token comment">#finally对应的语句块一定执行</span>    <span class="token operator">&lt;</span>语句块<span class="token number">4</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例：身体质量指数BMI"><a href="#实例：身体质量指数BMI" class="headerlink" title="实例：身体质量指数BMI"></a>实例：身体质量指数BMI</h3><h3 id="程序的循环结构"><a href="#程序的循环结构" class="headerlink" title="程序的循环结构"></a>程序的循环结构</h3><h4 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h4><blockquote><p>range()函数产生数字序列</p><p>range(M,N,K)    M起点，N-1终点，K步长</p></blockquote><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><h4 id="循环控制保留字"><a href="#循环控制保留字" class="headerlink" title="循环控制保留字"></a>循环控制保留字</h4><h4 id="循环的高级使用"><a href="#循环的高级使用" class="headerlink" title="循环的高级使用"></a>循环的高级使用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当循环没有被break语句退出时，执行else语句块</li><li>else语句块作为”正常“完成循环的奖励</li><li>这里else的用法和异常处理中else用法相似</li></ul><h3 id="实例：圆周率的计算"><a href="#实例：圆周率的计算" class="headerlink" title="实例：圆周率的计算"></a>实例：圆周率的计算</h3><p>蒙特卡罗方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> random<span class="token keyword">from</span> time <span class="token keyword">import</span> perf_counterdarts<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span>hits<span class="token operator">=</span><span class="token number">0.0</span>start<span class="token operator">=</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>darts<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">,</span>y<span class="token operator">=</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>    dist<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">0.5</span>    <span class="token keyword">if</span> dist<span class="token operator">&lt;=</span><span class="token number">1.0</span><span class="token punctuation">:</span>        hits<span class="token operator">+=</span><span class="token number">1</span>pi<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>hits<span class="token operator">/</span>darts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率值时：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运行时间时：&#123;:.5f&#125;s"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>公式法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pi <span class="token operator">=</span> <span class="token number">0</span>N <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    pi <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span> \              <span class="token number">4</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> \              <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率值是: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="random库简介"><a href="#random库简介" class="headerlink" title="random库简介"></a>random库简介</h2><ul><li>伪随机数：采用梅森旋转算法生成的(伪)随机序列中元素</li><li>random库主要用于生成随机数</li><li><ul><li>基本随机数函数：seed(), random()</li><li>扩展随机数函数：randint(), getrandbits(), uniform(), randrange(), choice(), shuffle()</li></ul></li></ul><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>seed(a=None)</td><td>初始化给定的随机数种子，默认为当前系统时间<br />&gt;&gt;&gt;random.seed(10)#产生种子10对应的序列</td></tr><tr><td>random()</td><td>生成一个[0.0, 1.0]之间的随机小数<br />&gt;&gt;&gt;random.random()</td></tr><tr><td>randint(a,b)</td><td>生成一个[a,b]之间的整数</td></tr><tr><td>randrange(m,n[,k])</td><td>生成一个[m,n)之间以k为步长的随机整数<br />&gt;&gt;&gt;random.randrange(10,100,10)<br />80</td></tr><tr><td>getrandbits(k)</td><td>生成一个k比特长的随机整数</td></tr><tr><td>uniform(a,b)</td><td>生成一个[a,b]之间的随机小数</td></tr><tr><td>choice(seq)</td><td>从序列seq中随机选择一个元素</td></tr><tr><td>shuffle(seq)</td><td>将序列seq中元素随机排列，返回打乱后的序列</td></tr></tbody></table></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248214">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248214</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248215">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248215</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248216">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248216</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248217">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248217</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248218">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248218</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248219">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094138&amp;cid=1215248219</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(三)</title>
      <link href="/posts/5c42feca/"/>
      <url>/posts/5c42feca/</url>
      
        <content type="html"><![CDATA[<h2 id="time库的使用"><a href="#time库的使用" class="headerlink" title="time库的使用"></a>time库的使用</h2><h3 id="time库基本介绍"><a href="#time库基本介绍" class="headerlink" title="time库基本介绍"></a>time库基本介绍</h3><p>time库是python中处理时间的标准库</p><ul><li>计算机时间的表达</li><li>提供获取系统时间并格式化输出功能</li><li>提供系统级精确计时功能，用于程序性能分析</li></ul><p>time库包含三类函数</p><ul><li>时间获取：time()、ctime()、gmtime()</li><li>时间格式化：strftime()、strptime()</li><li>程序计时：sleep()、perf_counter()</li></ul><h3 id="时间获取"><a href="#时间获取" class="headerlink" title="时间获取"></a>时间获取</h3><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>time()</td><td>获取当前时间戳，即计算机内部时间值，浮点数<br />&gt;&gt;&gt;time.time()<br />1581250590.4828136</td></tr><tr><td>ctime()</td><td>获取当前时间并以易读方式表示，返回字符串<br />&gt;&gt;&gt;time.ctime()<br />“Sun Feb  9 20:17:35 2020”</td></tr><tr><td>gmtime()</td><td>获取当前时间，表示为计算机可处理的时间格式<br />&gt;&gt;&gt;time.gmtime()<br />time.struct_time(tm_year=2020, tm_mon=2, <br />tm_mday=9, tm_hour=12, tm_min=18, tm_sec=27, <br />tm_wday=6, tm_yday=40, tm_isdst=0)</td></tr></tbody></table></div><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p>将时间以合理的方式展示出来</p><ul><li>格式化：类似字符串格式化，需要有展示模板</li><li>展示模板由特定的格式化控制符组成</li><li>strftime()方法</li></ul><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>strftime(tpl,ts)</td><td>tpl是格式化模板字符串，用来定义输出效果<br />ts是计算机内部时间类型变量<br />&gt;&gt;&gt;t = time.gmtime()<br />&gt;&gt;&gt;time.strftime(“%Y-%m-%d %H:%M:%S”,t)<br />“2020-02-09 12:22:49”</td></tr><tr><td>strptime(str,tpl)</td><td>str是字符串形式的时间值<br />tpl是格式化模板字符串，用来定义输入效果<br />&gt;&gt;&gt;timestr = “2020-02-09 12:22:49”<br />&gt;&gt;&gt;time.strptime(timestr,”%Y-%m-%d %H:%M:%S”)<br />time.struct_time(tm_year=2020, tm_mon=2, <br />tm_mday=9, tm_hour=12, tm_min=22, tm_sec=49, <br />tm_wday=6, tm_yday=40, tm_isdst=-1)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>格式化字符串</th><th>日期/时间说明</th><th>值范围</th></tr></thead><tbody><tr><td>%Y</td><td>年份</td><td>0000~9999</td></tr><tr><td>%m</td><td>月份</td><td>01~12</td></tr><tr><td>%B</td><td>月份名称</td><td>January~December</td></tr><tr><td>%b</td><td>月份名称缩写</td><td>Jan~Dec</td></tr><tr><td>%d</td><td>日期</td><td>01~31</td></tr><tr><td>%A</td><td>星期</td><td>Monday~Sunday</td></tr><tr><td>%a</td><td>星期缩写</td><td>Mon~Sun</td></tr><tr><td>%H</td><td>小时（24h制）</td><td>00~23</td></tr><tr><td>%I</td><td>小时（12h制）</td><td>01~12</td></tr><tr><td>%p</td><td>上/下午</td><td>AM、PM</td></tr><tr><td>%M</td><td>分钟</td><td>00~59</td></tr><tr><td>%S</td><td>秒</td><td>00~59</td></tr></tbody></table></div><h3 id="程序计时应用"><a href="#程序计时应用" class="headerlink" title="程序计时应用"></a>程序计时应用</h3><ul><li>程序计时指测量起止动作所经历时间的过程</li><li>测量时间：perf_counter()</li><li>产生时间：sleep()</li></ul><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>per_counter()</td><td>返回一个CPU级别的精准时间计数值，单位为秒<br />由于这个计数值七点不确定，连续调用差值才有意义<br />&gt;&gt;&gt;start = time.perf_counter()<br />42.6483905<br />&gt;&gt;&gt;end = time.perf_counter()<br />62.1302614<br />&gt;&gt;&gt;end - start<br />19.481870900000004</td></tr><tr><td>sleep(s)</td><td>s拟休眠的时间，单位是秒，可以是浮点数<br />&gt;&gt;&gt;def wait():<br />              time.sleep(5)<br />&gt;&gt;&gt;wait() #程序将等待5秒后再退出</td></tr></tbody></table></div><h2 id="实例：文本进度条设计"><a href="#实例：文本进度条设计" class="headerlink" title="实例：文本进度条设计"></a>实例：文本进度条设计</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timescale <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行开始"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>scale<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> i    b <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>scale <span class="token operator">-</span> i<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>    dur <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r&#123;:^3.0f&#125;%[&#123;&#125;->&#123;&#125;]&#123;:.2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>dur<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"执行结束"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248185">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248185</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(二)</title>
      <link href="/posts/22b1dee1/"/>
      <url>/posts/22b1dee1/</url>
      
        <content type="html"><![CDATA[<h2 id="数字类型及操作"><a href="#数字类型及操作" class="headerlink" title="数字类型及操作"></a>数字类型及操作</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>四种进制表示形式：</p><ul><li><p>十进制：1010,99，-217</p></li><li><p>二进制，以0b或0B开头：0b010,-0B010</p></li><li><p>八进制，以0o或0O开头：0o123，-0O456</p></li><li><p>十六进制,以0x或0X开头：0x9a，-0X89</p></li></ul><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><ul><li><p>浮点数之间的运算存在不确定位数，但是这不是bug，是二进制和十进制的转换导致。</p></li><li><p>round(x,d)：对x四舍五入，d是小数截取位数</p></li><li><p>浮点数间运算与比较用round()函数辅助</p></li><li><p>不确定位数一般发生在10<sup>-16</sup>，因此round()十分有效</p></li><li>使用字母e或E来表示科学计数法：4.3e-3 —&gt; 0.0043</li></ul><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><ul><li><p>z=1.23e-4+5.6e+89j</p><p>实部：1.23e-4    可以用z.real获得实部</p><p>虚部：5.6e+89j    可以用z.imag获得虚部</p></li></ul><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><ul><li>‘/‘表示除法    ‘//‘表示整除</li><li>‘**’表示幂运算</li></ul><h3 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h3><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>取绝对值</td></tr><tr><td>divmod(x,y)</td><td>同时输出商和余数</td></tr><tr><td>pow(x,y[,z])</td><td>等价于(x**y)%z，参数z可以省略</td></tr><tr><td>round(x[,d])</td><td>四舍五入，d是保留小数的位数</td></tr><tr><td>max(x<sub>1</sub>,x<sub>2</sub>,x<sub>3</sub>……x<sub>n</sub>)</td><td>返回最大值，n不限</td></tr><tr><td>min(x<sub>1</sub>,x<sub>2</sub>,x<sub>3</sub>……x<sub>n</sub>)</td><td>返回最小值，n不限</td></tr><tr><td>int(x)</td><td>将x变成整数，舍弃小数部分</td></tr><tr><td>float(x)</td><td>将x变成浮点数，增加小数部分</td></tr><tr><td>complex(x)</td><td>将x变成复数，增加虚数部分</td></tr></tbody></table></div><h2 id="实例：天天向上的力量"><a href="#实例：天天向上的力量" class="headerlink" title="实例：天天向上的力量"></a>实例：天天向上的力量</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>工作日模式要努力到什么水平，才能与每天努力1%一样？‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>-A君: 一年365天，每天进步1%，不停歇 ‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>-B君: 一年365天，每周工作5天休息2天，休息日下降1% ，要多努力呢？‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>每周工作5天休息2天，计算工作日的努力参数是多少才能与每天努力1%一样。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p> ‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮</p><p>要求如下：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>(1) ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬一年365天，以第0天的能力值为基数，记为1.0；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>(2) ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬当好好学习时，能力值相比前一天提高1%；当没有学习时，由于遗忘等原因能力值相比前一天下降1%； </p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出结果格式如下：（其中结果保留小数点后三位，冒号后有一个空格）‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>工作日的努力参数是: 0.019</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dayUP</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    dayup <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            dayup <span class="token operator">=</span> dayup<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dayup <span class="token operator">=</span> dayup<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> df<span class="token punctuation">)</span>    <span class="token keyword">return</span> dayupdayfactor <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">while</span> dayUP<span class="token punctuation">(</span>dayfactor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">37.78</span><span class="token punctuation">:</span>    dayfactor <span class="token operator">+=</span> <span class="token number">0.001</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工作日的努力参数是: &#123;:.3f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dayfactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>工作日模式，每天要努力到1.9%，相当于365模式每天1%</p></li><li><p>采用{:.3f}将输出数字变成三位小数点表示时，即使数学上该输出值是整数，也会按照小数方式输出。</p></li></ul><h2 id="字符串类型及操作"><a href="#字符串类型及操作" class="headerlink" title="字符串类型及操作"></a>字符串类型及操作</h2><h3 id="字符串类型的表示"><a href="#字符串类型的表示" class="headerlink" title="字符串类型的表示"></a>字符串类型的表示</h3><ul><li><p>表示方法：2类4种：一对单引号、一对双引号、一对三单引号、一对三双引号</p></li><li><p>字符串的序号：正向递增序号(从0开始)、反向递减序号(从-1开始)</p></li><li><p>索引：s[n]</p></li><li><p>切片：s[m:n] (m和n可以缺失，m缺失表示至开头，n缺失表示至结尾)</p><p>​            s[m:n:k] (根据步长k对字符串切片)</p><p>​                “123456789”[::-1]结果是：”987654321”</p></li></ul><h3 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h3><div class="table-container"><table><thead><tr><th>描述</th><th>操作符及使用</th></tr></thead><tbody><tr><td>x+y</td><td>连接两个字符串x和y</td></tr><tr><td>n <em> x 或 x </em> n</td><td>复制n次字符串x</td></tr><tr><td>x in s</td><td>如果x是s的字串，返回True，否则返回False</td></tr></tbody></table></div><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><div class="table-container"><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>len(x)</td><td>长度，返回字符串x的长度<br />len(“一二三456”)结果为6</td></tr><tr><td>str(x)</td><td>任意类型x所对应的字符串形式<br />str(1.23)结果为”1.23”、str([1,2])结果为”[1,2]”</td></tr><tr><td>hex(x) 或 oct(x)</td><td>整数x的十六进制或八进制小写形式的字符串<br />hex(425)结果为”0x1a9”、oct(425)结果为”0o651”</td></tr><tr><td>chr(u)</td><td>x为Unicode编码，返回其对应的字符</td></tr><tr><td>ord(x)</td><td>x为字符，返回其对应的Unicode编码</td></tr></tbody></table></div><h3 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h3><div class="table-container"><table><thead><tr><th>方法及使用</th><th>描述</th></tr></thead><tbody><tr><td>str.lower() 或 str.upper()</td><td>返回字符串的副本，全部字符小写大写</td></tr><tr><td>str.split(sep=None)</td><td>返回一个列表，由str根据sep被分割的部分组成<br />“A,B,C”.split(“,”)结果为[‘A’,’B’,’C’]</td></tr><tr><td>str.count(sub)</td><td>返回字串sub在str中出现的次数</td></tr><tr><td>str.replace(old,new)</td><td>返回字符串str副本，所有old字串被替换为new</td></tr><tr><td>str.center(width[,fillchar])</td><td>字符串str根据宽度width居中，fillchar可选</td></tr><tr><td>str.strip(chars)</td><td>从str中去掉在其左侧和右侧chars中列出的字符<br />“= python= “.strip(“ =np”)结果为”ytho”</td></tr><tr><td>str.join(iter)</td><td>在iter变量除最后元素外每个元素后增加一个str<br />“,”.join(“12345”)结果为”1,2,3,4,5”、主要用于字符串的分隔</td></tr></tbody></table></div><h3 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h3><p>字符串格式化使用.format()方法，用法如下：</p><p>​    &lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy(2" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy(3" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy(4" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy(5" alt="">.png)</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/imagespy(1" alt="">.png)</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248182">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248182</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248183">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248183</a></p><p><a href="https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248184">https://www.icourse163.org/learn/BIT-268001?tid=1207014257#/learn/content?type=detail&amp;id=1212094131&amp;cid=1215248184</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(一)</title>
      <link href="/posts/a3237779/"/>
      <url>/posts/a3237779/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-turtle-库详解"><a href="#Python-turtle-库详解" class="headerlink" title="Python turtle 库详解"></a>Python turtle 库详解</h1><p>turtle库是Python语言中一个很流行（基础）的绘制图像的函数库，想象一个小乌龟，在一个横轴为x、纵轴为y的坐标系原点，(0,0)位置开始，它根据函数指令的控制，在这个平面坐标系中移动，从而在它爬行的路径上绘制图形。</p><h2 id="canvas（画布）"><a href="#canvas（画布）" class="headerlink" title="canvas（画布）"></a>canvas（画布）</h2><p>canvas为我们用于绘图的窗口，我们可以对其初始化，从而改变其出现的位置和大小。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>width<span class="token punctuation">,</span>heigh<span class="token punctuation">,</span>startx<span class="token punctuation">,</span>starty<span class="token punctuation">)</span> <span class="token comment">#参数分别为画布的宽(单位像素), 高, 背景颜色。</span>turtle<span class="token punctuation">.</span>screensize<span class="token punctuation">(</span>canvas_width<span class="token punctuation">,</span>canvas_heigh<span class="token punctuation">,</span>background<span class="token punctuation">)</span> <span class="token comment">#参数：width, height: 输入宽和高为整数时,表示像素,为小数时, 表示占据电脑屏幕的比例;</span><span class="token comment">#(startx, starty): 这一坐标表示矩形窗口左上角顶点的位置,如果为空,则窗口位于屏幕中心。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><h3 id="画笔的状态"><a href="#画笔的状态" class="headerlink" title="画笔的状态"></a>画笔的状态</h3><p>在画布上，默认有一个坐标原点为画布中心的坐标轴，坐标原点上有一只面朝x轴正方向的乌龟。这里我们描述乌龟时使用两个词语：坐标原点(位置)，面朝x轴正方向(方向)，turtle绘图中，就是使用位置方向描述乌龟(画笔)的状态。</p><h3 id="画笔的属性"><a href="#画笔的属性" class="headerlink" title="画笔的属性"></a>画笔的属性</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#设置画笔的宽度</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认当前画笔颜色，传入参数设置画笔颜色，可以是字符串如"green",也可以是RGB3元组。</span>turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#设置画笔移动速度，画笔绘制的速度范围[0,10]整数，数字越大越快。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h3><p>画笔运动命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>distance<span class="token punctuation">)</span> <span class="token comment">#向当前画笔方向移动distance像素长度</span>turtle<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>distance<span class="token punctuation">)</span> <span class="token comment">#向当前画笔相反方向移动distance像素长度</span>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span>degree<span class="token punctuation">)</span> <span class="token comment">#顺时针移动degree°</span>turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>degree<span class="token punctuation">)</span> <span class="token comment">#逆时针移动degree°</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#移动时绘制图形，缺省时也为绘制</span>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment">#将画笔移动到坐标为x,y的位置</span>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#提起笔移动，不绘制图形，用于另起一个地方绘制</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#画圆，半径为正(负)，表示圆心在画笔的左边(右边)画圆</span>setx<span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token comment">#将当前x轴移动到指定位置</span>sety<span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token comment">#将当前y轴移动到指定位置</span>setheading<span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">#设置当前朝向为angle角度</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#设置当前画笔位置为原点，朝向东。</span>dot<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">#绘制一个指定直径和颜色的圆点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画笔控制命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span>colorstring<span class="token punctuation">)</span> <span class="token comment">#绘制图形的填充颜色</span>turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span>color1<span class="token punctuation">,</span> color2<span class="token punctuation">)</span> <span class="token comment">#同时设置pencolor=color1, fillcolor=color2</span>turtle<span class="token punctuation">.</span>filling<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#返回当前是否在填充状态</span>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#准备开始填充图形</span>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#填充完成</span>turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#隐藏画笔的turtle形状</span>turtle<span class="token punctuation">.</span>showturtle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#显示画笔的turtle形状</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局控制命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#清空turtle窗口，但是turtle的位置和状态不会改变</span>turtle<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#清空窗口，重置turtle状态为起始状态</span>turtle<span class="token punctuation">.</span>undo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#撤销上一个turtle动作</span>turtle<span class="token punctuation">.</span>isvisible<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#返回当前turtle是否可见</span>stamp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#复制当前图形</span>turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"font-name"</span><span class="token punctuation">,</span>font_size<span class="token punctuation">,</span><span class="token string">"font_type"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#写文本，s为文本内容，font是字体的参数，分别为字体名称，大小和类型；font为可选项，font参数也是可选项</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#必须是乌龟图形程序中的最后一个语句。</span>turtle<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment">#设置乌龟模式（“standard”，“logo”或“world”）并执行重置。</span>turtle<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>delay<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment">#设置或返回以毫秒为单位的绘图延迟。</span>turtle<span class="token punctuation">.</span>begin_poly<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#开始记录多边形的顶点。当前的乌龟位置是多边形的第一个顶点。</span>turtle<span class="token punctuation">.</span>end_poly<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#停止记录多边形的顶点。当前的乌龟位置是多边形的最后一个顶点。将与第一个顶点相连。</span>turtle<span class="token punctuation">.</span>get_poly<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#返回最后记录的多边形。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>python蟒蛇绘制</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle <span class="token comment">#调用库</span>turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">#初始化绘图窗口</span>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#提笔</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#放笔</span>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span> <span class="token comment">#改变颜色</span>turtle<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#用来停止画笔绘制，但绘图窗体不关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.python123.io/index/turtles/upvotes">python创意绘画</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/chen0307/articles/9645138.html">Python绘图Turtle库详解</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>string用法</title>
      <link href="/posts/b23d60f8/"/>
      <url>/posts/b23d60f8/</url>
      
        <content type="html"><![CDATA[<h1 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>string是c++中的一级成员，纯c中没有，使用时需要用到头文件<em>#include<string></em>，下面将总结string的常用方法。</p><h2 id="string的定义及初始化"><a href="#string的定义及初始化" class="headerlink" title="string的定义及初始化"></a>string的定义及初始化</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">string str<span class="token punctuation">;</span><span class="token comment">//生成空字符串</span>string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成字符串为str的复制品</span>string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>str_begin<span class="token punctuation">,</span>str_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串str中从下标str_begin开始、长度为str_len的部分作为字符串初值</span>string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>c_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以str的前c_len个字符串作为字符串s的初值</span>string <span class="token function">s</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成num个c字符的字符串</span>string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>str_idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串str中从下标str_idx开始到字符串结束的位置作为字符串初值</span>EG<span class="token operator">:</span>string s0<span class="token punctuation">;</span><span class="token comment">//生成空字符串</span>string s1<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//初始化一</span>string <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化二</span>string <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s2="llo";从s1的2位置的字符开始，连续3个字符赋值给s5</span>string <span class="token function">s3</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s3="ello";从s1的2位置的字符开始，将后续的字符都赋值给s6</span>string <span class="token function">s4</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s4="aaaaa";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的读入"><a href="#string的读入" class="headerlink" title="string的读入"></a>string的读入</h2><p>string 类支持 cin 方式和 getline() 方式两种输入方式。简单示例如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">string s<span class="token punctuation">;</span>cin<span class="token operator">>></span>s<span class="token punctuation">;</span><span class="token comment">//不能读空格，遇到空白字符即停止读入</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以读空格，读取一整行的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="string的大小和容量"><a href="#string的大小和容量" class="headerlink" title="string的大小和容量"></a>string的大小和容量</h2><p>s.size()和s.length()返回string对象的字符个数。</p><p>s.max_size()返回string对象最多包含的字符数。</p><h2 id="string的比较"><a href="#string的比较" class="headerlink" title="string的比较"></a>string的比较</h2><p>1、支持 ==、&gt;=、&lt;=、!=、&gt;、&lt;等比较运算符</p><p>2、s.compare();</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">string <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token function">c</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-></span> <span class="token operator">-</span><span class="token number">1</span>b<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-></span>  <span class="token number">1</span>b<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的插入"><a href="#string的插入" class="headerlink" title="string的插入"></a>string的插入</h2><p>1、push_back();</p><p>2、insert();</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">string s<span class="token punctuation">;</span><span class="token comment">//尾插一个字符</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s: abc</span><span class="token comment">//insert(pos,char);在指定的位置pos前插入字符char</span>string s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从s1的1位置开始，插入"ins"字符串，即s1="hinsello";</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ins"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从s1的1位置开始，插入"ins"字符串的前2个字符，即s1="hinello";</span>s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ins"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从s1的1位置开始，插入"ins"字符串的从1位置开始的2个字符，即s1="hnsello";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string拼接字符串"><a href="#string拼接字符串" class="headerlink" title="string拼接字符串"></a>string拼接字符串</h2><p>1、append();</p><p>2、’+’’;</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s: abcdef</span>string s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>string s2<span class="token operator">=</span><span class="token string">"def"</span><span class="token punctuation">;</span>s1<span class="token operator">=</span>s1<span class="token operator">+</span>s2<span class="token punctuation">;</span><span class="token comment">//'='右边至少有一个string类型的对象</span><span class="token comment">//s1: abcdef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的遍历"><a href="#string的遍历" class="headerlink" title="string的遍历"></a>string的遍历</h2><p>1、借助迭代器</p><p>2、下标法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下标法</span><span class="token comment">/*s[0]:'a's[1]:'b's[2]:'c's[3]:'d's[4]:'e's[5]:'f'*/</span><span class="token comment">//正向迭代器</span>string<span class="token operator">::</span>iterator iter<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>iter<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//反向迭代器</span>string<span class="token operator">::</span>reverse_iterator riter<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>riter<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>riter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>riter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的删除"><a href="#string的删除" class="headerlink" title="string的删除"></a>string的删除</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除字符串中p所指的字符</span><span class="token number">2.</span> iterator <span class="token function">erase</span><span class="token punctuation">(</span>iterator first<span class="token punctuation">,</span> iterator last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除字符串中迭代器区间[first,last)上所有字符</span><span class="token number">3.</span> string<span class="token operator">&amp;</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token operator">=</span>npos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除字符串中从索引位置pos开始的len个字符</span><span class="token number">4.</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除字符串中所有字符</span>string s1 <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 结果：13456789</span>s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 结果：189</span>s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 结果：189</span>string<span class="token operator">::</span>iterator iter <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token operator">!=</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token punctuation">;</span><span class="token operator">*</span>iter<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的字符替换"><a href="#string的字符替换" class="headerlink" title="string的字符替换"></a>string的字符替换</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> pos<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前字符串从pos索引开始的n个字符，替换成字符串s</span><span class="token number">2.</span> string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> pos<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n1<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将当前字符串从pos索引开始的n个字符，替换成n1个字符c</span><span class="token number">3.</span> string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span>iterator i1<span class="token punctuation">,</span> iterator i2<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将当前字符串[i1,i2)区间中的字符串替换为字符串s</span>string <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                     <span class="token comment">// 结果：12</span>s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 结果：hello,world.</span><span class="token comment">// 这里的6表示下标  5表示长度</span>s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"girl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 结果：hello,girl.</span><span class="token comment">// s1.begin(),s1.begin()+5 是左闭右开区间</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果：boy,girl.</span> cout<span class="token operator">&lt;&lt;</span>s1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的查找"><a href="#string的查找" class="headerlink" title="string的查找"></a>string的查找</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> <span class="token class-name">size_t</span> <span class="token function">find</span> <span class="token punctuation">(</span>constchar<span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，查找子串s，返回找到的位置索引，-1表示查找不到子串</span><span class="token number">2.</span> <span class="token class-name">size_t</span> <span class="token function">find</span> <span class="token punctuation">(</span>charc<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，查找字符c，返回找到的位置索引，-1表示查找不到字符</span><span class="token number">3.</span> <span class="token class-name">size_t</span> <span class="token function">rfind</span> <span class="token punctuation">(</span>constchar<span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，反向查找子串s，返回找到的位置索引，-1表示查找不到子串</span><span class="token number">4.</span> <span class="token class-name">size_t</span> <span class="token function">rfind</span> <span class="token punctuation">(</span>charc<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，反向查找字符c，返回找到的位置索引，-1表示查找不到字符</span><span class="token number">5.</span> <span class="token function">size_tfind_first_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，查找子串s的字符，返回找到的位置索引，-1表示查找不到字符</span><span class="token number">6.</span> <span class="token function">size_tfind_first_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，查找第一个不位于子串s的字符，返回找到的位置索引，-1表示查找不到字符</span><span class="token number">7.</span> <span class="token class-name">size_t</span> <span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，查找最后一个位于子串s的字符，返回找到的位置索引，-1表示查找不到字符</span><span class="token number">8.</span> <span class="token function">size_tfind_last_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//在当前字符串的pos索引位置开始，查找最后一个不位于子串s的字符，返回找到的位置索引，-1表示查找不到子串</span>string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"dog bird chicken bird cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串查找-----找到后返回首字母在字符串中的下标</span><span class="token comment">// 1. 查找一个字符串</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"chicken"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：9</span><span class="token comment">// 2. 从下标为6开始找字符'i'，返回找到的第一个i的下标</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：11</span><span class="token comment">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"chicken"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：9</span><span class="token comment">// 4. 从字符串的末尾开始查找字符</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：18-------因为是从末尾开始查找，所以返回第一次找到的字符</span><span class="token comment">// 5. 在该字符串中查找第一个属于字符串s的字符</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"13br98"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：4---b</span><span class="token comment">// 6. 在该字符串中查找第一个不属于字符串s的字符------先匹配dog，然后bird匹配不到，所以打印4</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">"hello dog 2006"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：4</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">"dog bird 2006"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：9</span><span class="token comment">// 7. 在该字符串最后中查找第一个属于字符串s的字符</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">"13r98"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：19</span><span class="token comment">// 8. 在该字符串最后中查找第一个不属于字符串s的字符------先匹配t--a---c，然后空格匹配不到，所以打印21</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token string">"teac"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果是：21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string的排序"><a href="#string的排序" class="headerlink" title="string的排序"></a>string的排序</h2><p>sort(s.begin(),s.end())</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"acdebf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//s:"abcdef"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="刷题遇到的"><a href="#刷题遇到的" class="headerlink" title="刷题遇到的"></a>刷题遇到的</h2><ol><li><code>std::reverse()</code>，顾名思义，用于反转序列。需要提供首尾迭代器作为参数。</li><li><code>std::string::erase()</code>，传入两个迭代器 l,r，清除[l,r)范围内的字符。</li><li><code>std::string::substr()</code>，用于提取子字符串，用法与前者类似。</li><li><code>std::string::find()</code>，用来查找字串在母串中第一次出现的位置。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/manonghouyiming/article/details/79827040">String用法详解</a></p><p><a href="https://www.cnblogs.com/jm-Xu/p/9318705.html">C++中string常用函数用法总结</a></p><p><a href="https://en.cppreference.com/">cppreference.com</a></p>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分和一维前缀和</title>
      <link href="/posts/ba932f45/"/>
      <url>/posts/ba932f45/</url>
      
        <content type="html"><![CDATA[<h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><p>​    说道一维前缀和，我们可以理解为——一个数列求前 <strong>n</strong> 项和。没错，一维前缀和就是这么简单，就是一个求前 <strong>n</strong> 项和的思想。</p><script type="math/tex; mode=display">S[i]=\sum_{j=1}^iA[j]</script><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//scanf("%d",&amp;a[j]);</span>    s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//其中s[j]表示前j项和，a[j]表示第j项数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们要求一个数列中某个区间的和，我们就可以用到前缀和的思想。例如求 $[l,r]$ 这个区间中数的和：</p><script type="math/tex; mode=display">sum[l,r]=\sum_{i=l}^rA[i]=S[r]-S[l-1]</script><p>所以想要求这个区间中数字的和，我们只需要用前 <strong>r</strong> 项和减前 <strong>l-1</strong> 项和。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cin<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>说道一维前缀和，差分这个思想也就不得不提一下了，差分数组就是一个表示当前数和前一项数的差值所构成的数组，直接上图解释：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images4.png" style="zoom: 150%;" /></p><p>其实在以前我们应该或多或少的遇到过这用法，例如：求一组数据的平局值，但是因为数据太大，而且不能用计算器之类的东西来辅助我们计算，我们只能口算，因此我们会将这一堆数字（ <strong>n</strong> 个）做一个处理：找到一个出现次数尽量多的数 <strong>A</strong> ，然后每个数都用其与 <strong>A</strong> 的差值来代替，然后直接 <strong>n * A</strong> +（这些处理之后的数字之和）。如此思想就和差分的思想差不多了。</p><h2 id="差分数组和前缀和的应用"><a href="#差分数组和前缀和的应用" class="headerlink" title="差分数组和前缀和的应用"></a>差分数组和前缀和的应用</h2><p>我们假设 <strong>a</strong> 数组表示原始的数组， <strong>d</strong> 数组表示差分数组， <strong>sum</strong> 数组表示前缀和数组， <strong>f</strong> 为探究用的中间数组，那么我们可以将这几个数组表示为：</p><p><strong>d[i]=a[i]-a[i-1]（1&lt;= i &lt;=n , a[0]=0 , d[1]=a[1] ）;</strong></p><p><strong>f[i]=f[i-1]+d[i] （1&lt;= i &lt;=n , f[1]=d[1]=a[1] ）;</strong></p><p><strong>sum[i]=sum[i-1]+a[i] （1&lt;= i &lt;=n , sum[1]=f[1]=d[1]=a[1] ）;</strong></p><p>由此，我们可以从第一项开始推：</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images3.png" alt=""></p><p>所以，可以得出结论，其实 <strong>f</strong> 数组就是 <strong>a</strong> 数组。到此差分数组 <strong>d</strong> 、前缀和数组 <strong>sum</strong> 、原数组 <strong>a</strong> 的关系就差不多理清了，但是要想掌握这个只是我们还需要实际的应用。</p><h3 id="例1：Imperishable-Night"><a href="#例1：Imperishable-Night" class="headerlink" title="例1：Imperishable Night"></a>例1：<a href="https://ac.nowcoder.com/acm/contest/3121/D">Imperishable Night</a></h3><p>这道题就是标准的差分思想的题目，但是要注意这输入的数据比较大，如果用<strong>cin</strong>、<strong>cout</strong>要关闭同步流。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//差分数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表示答案的数组</span><span class="token comment">/*用到了差分思想：改变一个区间的值，但是这个区间之内的数的差距并没有变化，因此只需要盖面这个区间的端点的值就行了。最后再根据差分数组和原数组的关系，来得出原数组就行了(也就是答案数组)。*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span>        d<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h3><p>有 <strong>n</strong> 个数。 <strong>m</strong> 次操作,每一次操作，将 <strong>l</strong> ~ <strong>r</strong> 区间的所有数增加 <strong>k</strong> ;最后有 <strong>q</strong> 次询问，每一次询问求出 <strong>l</strong> ~ <strong>r</strong> 区间的和。</p><p><strong>思路：</strong>因为要将一个区间的所有数都加 <strong>k</strong> ，如果用遍历操作来实现的话时间复杂度大大提高，因此，我们可以用差分来实现，这个就和上面那道题一样，然后因为要求一个区间的和，这就是前缀和的裸题，这个也好做，只要注意处理的操作，而且，因为这道题是拿来练手的，所以还没有卡时间，卡空间之类的，只需要掌握到差分和前缀和的应用就行了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span>d<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My blog optimization log</title>
      <link href="/posts/142c621a/"/>
      <url>/posts/142c621a/</url>
      
        <content type="html"><![CDATA[<h2 id="写这篇日志的原因"><a href="#写这篇日志的原因" class="headerlink" title="写这篇日志的原因"></a>写这篇日志的原因</h2><p>刚刚搭建好<strong>blog</strong>，心情有点激动，想要对我的<strong>blog</strong>做些美化工作，一直与花费了将近两天的时间，但是这都是值得的。</p><h2 id="美化目标"><a href="#美化目标" class="headerlink" title="美化目标"></a>美化目标</h2><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><p>以前在逛很多大佬的<strong>blog</strong>的时候就发现了这个东西，但是当落到实际想要把其放在自己的<strong>blog</strong>时，又觉得有点麻烦，而且，细思一下，觉得没有必要，然后就没有弄。</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>终于完成了。再次翻阅了一下<strong>dalao</strong>的<strong>blog</strong>找到了开启评论系统的相关方法。然后，我才用的是来必力这个第三方评论系统（主要是开启步骤是真的简单），现在大家可以通过一定的方式登陆之后在我的blog下面留言啦！</p><h3 id="备份系统"><a href="#备份系统" class="headerlink" title="备份系统"></a>备份系统</h3><p>同样，现在还用不上，可以物理备份。</p><h3 id="修改鼠标样式"><a href="#修改鼠标样式" class="headerlink" title="修改鼠标样式"></a>修改鼠标样式</h3><p>本来觉得在自己<strong>blog</strong>上，可以让用户有一个不同的鼠标样式，但是因为我不会<strong>css</strong>，而且在网上也没有找到我能看懂的资料，所以这个目标我现在还无法达成。</p><h3 id="添加鼠标点击特效"><a href="#添加鼠标点击特效" class="headerlink" title="添加鼠标点击特效"></a>添加鼠标点击特效</h3><p>已完成。因为<strong>matery</strong>主题自带的爱心点击特效我不喜欢，于是就在网上找到了一个烟花点击特效，于是成果的完成了这个目标。</p><h3 id="生成永久连接"><a href="#生成永久连接" class="headerlink" title="生成永久连接"></a>生成永久连接</h3><p>因为主题默认的生成链接的配置为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">premalink<span class="token operator">:</span> <span class="token operator">:</span>year/<span class="token operator">:</span>month/<span class="token operator">:</span>day/<span class="token operator">:</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这种生成的链接地址很长，而且如果博文是中文名的话，会出现一堆编码，非正常的长，一点也不美观，所以就加了一个生成现在这种很短的链接地址配置。</p><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>将404页面进行了简单的修改，加了一点背景图。</p><h3 id="添加了外链跳转插件"><a href="#添加了外链跳转插件" class="headerlink" title="添加了外链跳转插件"></a>添加了外链跳转插件</h3><h3 id="代码压缩加速"><a href="#代码压缩加速" class="headerlink" title="代码压缩加速"></a>代码压缩加速</h3><p>利用hexo-neat插件实现代码压缩，但是由于其有点bug，于是把默认参数改了点，否则这个bug会使md语法的代码块消失。</p><h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>又在GitHub上面开了一个仓库，用来存储资源，可以更加快速的加载blog，而且由于我的照片现在都改成了图床存储或者放在cdn仓库的，这样可以直接被其他人存下来了。</p><h3 id="代码块高亮设置"><a href="#代码块高亮设置" class="headerlink" title="代码块高亮设置"></a>代码块高亮设置</h3><p>主题自带的代码块的显示很不友好，但是这又是blog中最重要的一部分，为此修改了一些配置，再试了几个主题。虽然高亮显示没问题了，但是发现无法识别C++，C#这两个语言，当md文档的代码块为c++、c#这两个时，在blog生成的页面会出现莫名的错误，而且我还暂时解决不了这个问题，所以，一段时间内，我在我的blog上如果用到c++之类的，都会在md上改成c的格式，好让网页正常显示高亮。</p><h3 id="创建图床"><a href="#创建图床" class="headerlink" title="创建图床"></a>创建图床</h3><p>最初在网上查看其他人的<strong>blog</strong>的时候，发现很多都在推荐七牛云的图床，但是因为七牛云的存储空间申请需要用到实名认证，我嫌麻烦然后又找到了，基于<strong>GitHub</strong>实现的图床，同时也下载了一个<strong>picgo</strong>来帮助我上传照片，和我的<strong>blog</strong>一样，因为都是在<strong>GitHub</strong>上的原因，在晚上的时候可能加载速度会有点慢，但是因为这个是利用一定的手段来加速了的，至少比从自己的本地上传的照片快吧！</p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images66-1ZR2145S2D2.jpg" alt=""></p><h2 id="为什么写blog"><a href="#为什么写blog" class="headerlink" title="为什么写blog"></a>为什么写blog</h2><p>​    说道原因，其实有很多，但主要的还是为了自己的学习吧，我觉得我想学的，我必须要学的还有很多，因此我需要通过<strong>blog</strong>来督促自己。</p><p>​    至于其他的原因，我就引用下<strong>刘伟鹏</strong>大佬的一篇文章：<strong><a href="https://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">为什么你应该（从现在开始就）写博客</a></strong>。我觉得他讲的非常正确，有兴趣的可以看看。</p><p>​    于我而言，<strong>blog</strong>可以积累我的成长，是对我自己的一种见证。</p><p>​    而且，当以后我写了一些技术性的文章的时候，还可以帮助他人解决问题，并且，当以后遇到志同道合的朋友的时候，还可以以此来进行交流。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>My Blog Introduction</title>
      <link href="/posts/ba92b340/"/>
      <url>/posts/ba92b340/</url>
      
        <content type="html"><![CDATA[<h1 id="My-Blog-Introduction"><a href="#My-Blog-Introduction" class="headerlink" title="My Blog Introduction"></a>My Blog Introduction</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>​    因为在学算法的时候，翻阅了很多<strong>dalao</strong>的博客查看资料，看到他们都有着自己风格的博客（有着炫酷的背景，动态效果，等等特效）心生羡慕，遍想着自己搭建一个属于自己的<strong>blog</strong>，本来有点<strong>懒</strong>，起初是在洛谷，<strong>CSDN</strong>都尝试过，发现洛谷上面的博客的主题不适合我，再加之<strong>CSDN</strong>上的广告是真的多，而且还有朋友说，搭载别人那里的<strong>blog</strong>还可能会被别人删稿，这就把我吓着了。</p><p>​    于是，我就在网上查找资料，试着自己搭建一个属于自己的<strong>blog</strong>，并且让其后端在自己这边。网上有很多的方式，我选择了<strong>hexo+github</strong>的方式搭建的博客。</p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>1、因为我这个<strong>blog</strong>刚搭建好，然后又在美化上面耗费了许多的时间，以至于还有很多的bug，这个我会在之后的时间慢慢补上。</p><p>2、因为是在<a href="https://github.com/A-Egoist/A-Egoist.github.io"><strong>GitHub</strong></a>上面部署的，在晚上的时候访问博客的速度会变得很慢，毕竟需要用到<strong>国外的网</strong>，访问该<strong>blog</strong>的朋友请忍受下，我会找方法尽量改善下情况。</p><p>3、<strong>blog</strong>刚刚搭建好，还没有博文可以发上，而且也难得把以前的<strong>blog</strong>搬运过来。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>​    搭建<strong>blog</strong>的目的有很多，但主要的还是为了学习吧，毕竟我还是需要有一个这样的<strong>blog</strong>来帮助我学习的，希望可以通过这个方式让我学到更多的知识。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>​    这次<strong>blog</strong>的搭建借鉴了很多<strong>dalao</strong>的方法，然后又在<a href="https://www.bilibili.com/">B站</a>上找到了相关的视频（<a href="https://www.bilibili.com/video/av44544186?t=1608">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a>）（顺便说一句，<strong>羊哥</strong>(<code>CodeSheep</code>)是真的好，期间问了他很多问题，他都耐心的帮我解决了），而后又在逛<strong>CSDN</strong>的时候看到了相关的搭建流程，以及<strong><a href="https://blog.csdn.net/victoryxa/article/details/103733655">美化教程</a></strong>，在结合了以上的资源之后我终于搭建好了自己的<strong>blog</strong>。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>1、<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a></p><p>2、<a href="https://music.liuzhijin.cn/">音乐直链搜索</a></p><p>3、<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p><p><img src="https://cdn.jsdelivr.net/gh/A-Egoist/Blog-Figure-bed/images65-1Z30G35524340.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
